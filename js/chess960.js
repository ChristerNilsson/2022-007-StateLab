// Generated by CoffeeScript 2.5.1
// Givet ID r√§knar chess960 ut konfigurationen.
// <= 0 ID < 960
// 518 motsvarar normalt schack, dvs RNBQKBNR

// https://chess-tigers.de/download/chess960_regeln.pdf?PHPSESSID=d71dfe17e7e8aae16adce6f8fb284410
var assert;

assert = function(a, b) {
  a = JSON.stringify(a);
  b = JSON.stringify(b);
  if (a !== b) {
    return console.log(`${a} != ${b}`);
  }
};

export var chess960 = function(index) { // 16 microsecs
  var B, B0, B1, N, N0, N1, Q, X, b0, b1, fillIn, five, getEmpty, n0, n1, q, six;
  [Q, N, B, X] = 'QNB_';
  N0 = [0, 0, 0, 0, 1, 1, 1, 2, 2, 3];
  N1 = [1, 2, 3, 4, 2, 3, 4, 3, 4, 4];
  B0 = [0, 2, 4, 6];
  B1 = [1, 3, 5, 7];
  getEmpty = function(arr) {
    arr = _.map(arr, function(value, index) {
      if (value === X) {
        return index;
      } else {
        return X;
      }
    });
    return _.filter(arr, function(value) {
      return value !== X;
    });
  };
  assert([0, 1, 3], getEmpty([X, X, N, X, N]));
  fillIn = function(piece, places, pieces) {
    var empty, i, j, k, len, len1, place, ref, res;
    res = new Array(places.length + pieces.length);
    _.fill(res, X);
    for (j = 0, len = places.length; j < len; j++) {
      place = places[j];
      res[place] = piece;
    }
    empty = getEmpty(res);
    ref = _.range(pieces.length);
    for (k = 0, len1 = ref.length; k < len1; k++) {
      i = ref[k];
      res[empty[i]] = pieces[i];
    }
    return res.join('');
  };
  assert('RNKNR', fillIn(N, [1, 3], 'RKR'));
  assert('RNQKNR', fillIn(Q, [2], 'RNKNR'));
  assert('RNBQKBNR', fillIn(B, [2, 5], 'RNQKNR'));
  q = Math.floor(index / 16) % 6;
  n0 = N0[Math.floor(index / 96) % 10];
  n1 = N1[Math.floor(index / 96) % 10];
  b0 = B0[Math.floor(index / 4) % 4];
  b1 = B1[index % 4];
  five = fillIn(N, [n0, n1], 'RKR');
  six = fillIn(Q, [q], five);
  return fillIn(B, [b0, b1], six);
};

assert("RNBQKBNR", chess960(518));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlc3M5NjAuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcY2hlc3M5NjAuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJaUc7Ozs7O0FBQUEsSUFBQTs7QUFFakcsTUFBQSxHQUFTLFFBQUEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFBO0VBQ1IsQ0FBQSxHQUFJLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZjtFQUNKLENBQUEsR0FBSSxJQUFJLENBQUMsU0FBTCxDQUFlLENBQWY7RUFDSixJQUFHLENBQUEsS0FBRyxDQUFOO1dBQWEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFBLENBQUEsQ0FBRyxDQUFILENBQUEsSUFBQSxDQUFBLENBQVcsQ0FBWCxDQUFBLENBQVosRUFBYjs7QUFIUTs7QUFLVCxPQUFBLElBQU8sUUFBQSxHQUFXLFFBQUEsQ0FBQyxLQUFELENBQUEsRUFBQTtBQUNsQixNQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQTtFQUFDLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxDQUFBLEdBQVk7RUFFWixFQUFBLEdBQUssQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsRUFBYSxDQUFiLEVBQWUsQ0FBZixFQUFpQixDQUFqQixFQUFtQixDQUFuQjtFQUNMLEVBQUEsR0FBSyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CO0VBQ0wsRUFBQSxHQUFLLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUDtFQUNMLEVBQUEsR0FBSyxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVA7RUFFTCxRQUFBLEdBQVcsUUFBQSxDQUFDLEdBQUQsQ0FBQTtJQUNWLEdBQUEsR0FBTSxDQUFDLENBQUMsR0FBRixDQUFNLEdBQU4sRUFBVyxRQUFBLENBQUMsS0FBRCxFQUFPLEtBQVAsQ0FBQTtNQUFpQixJQUFHLEtBQUEsS0FBTyxDQUFWO2VBQWlCLE1BQWpCO09BQUEsTUFBQTtlQUE0QixFQUE1Qjs7SUFBakIsQ0FBWDtXQUNOLENBQUMsQ0FBQyxNQUFGLENBQVMsR0FBVCxFQUFjLFFBQUEsQ0FBQyxLQUFELENBQUE7YUFBVyxLQUFBLEtBQVM7SUFBcEIsQ0FBZDtFQUZVO0VBR1gsTUFBQSxDQUFPLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLENBQVAsRUFBZ0IsUUFBQSxDQUFTLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FBVCxDQUFoQjtFQUVBLE1BQUEsR0FBUyxRQUFBLENBQUMsS0FBRCxFQUFPLE1BQVAsRUFBYyxNQUFkLENBQUE7QUFDVixRQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLEVBQUE7SUFBRSxHQUFBLEdBQU0sSUFBSSxLQUFKLENBQVUsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsTUFBTSxDQUFDLE1BQWpDO0lBQ04sQ0FBQyxDQUFDLElBQUYsQ0FBTyxHQUFQLEVBQVcsQ0FBWDtJQUNBLEtBQUEsd0NBQUE7O01BQUEsR0FBRyxDQUFDLEtBQUQsQ0FBSCxHQUFhO0lBQWI7SUFDQSxLQUFBLEdBQVEsUUFBQSxDQUFTLEdBQVQ7QUFDUjtJQUFBLEtBQUEsdUNBQUE7O01BQUEsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFELENBQU4sQ0FBSCxHQUFnQixNQUFNLENBQUMsQ0FBRDtJQUF0QjtXQUNBLEdBQUcsQ0FBQyxJQUFKLENBQVMsRUFBVDtFQU5RO0VBT1QsTUFBQSxDQUFVLE9BQVYsRUFBbUIsTUFBQSxDQUFPLENBQVAsRUFBVSxDQUFDLENBQUQsRUFBRyxDQUFILENBQVYsRUFBaUIsS0FBakIsQ0FBbkI7RUFDQSxNQUFBLENBQVMsUUFBVCxFQUFtQixNQUFBLENBQU8sQ0FBUCxFQUFVLENBQUMsQ0FBRCxDQUFWLEVBQWlCLE9BQWpCLENBQW5CO0VBQ0EsTUFBQSxDQUFPLFVBQVAsRUFBbUIsTUFBQSxDQUFPLENBQVAsRUFBVSxDQUFDLENBQUQsRUFBRyxDQUFILENBQVYsRUFBaUIsUUFBakIsQ0FBbkI7RUFFQSxDQUFBLGNBQUssUUFBUyxHQUFULEdBQWM7RUFDbkIsRUFBQSxHQUFLLEVBQUUsWUFBQyxRQUFTLEdBQVQsR0FBYyxFQUFmO0VBQ1AsRUFBQSxHQUFLLEVBQUUsWUFBQyxRQUFTLEdBQVQsR0FBYyxFQUFmO0VBQ1AsRUFBQSxHQUFLLEVBQUUsWUFBQyxRQUFTLEVBQVQsR0FBYSxDQUFkO0VBQ1AsRUFBQSxHQUFLLEVBQUUsQ0FBQyxLQUFBLEdBQVEsQ0FBVDtFQUVQLElBQUEsR0FBTyxNQUFBLENBQU8sQ0FBUCxFQUFTLENBQUMsRUFBRCxFQUFJLEVBQUosQ0FBVCxFQUFpQixLQUFqQjtFQUNQLEdBQUEsR0FBTyxNQUFBLENBQU8sQ0FBUCxFQUFTLENBQUMsQ0FBRCxDQUFULEVBQWEsSUFBYjtTQUNQLE1BQUEsQ0FBTyxDQUFQLEVBQVMsQ0FBQyxFQUFELEVBQUksRUFBSixDQUFULEVBQWlCLEdBQWpCO0FBaENpQjs7QUFpQ2xCLE1BQUEsQ0FBTyxVQUFQLEVBQW1CLFFBQUEsQ0FBUyxHQUFULENBQW5CIiwic291cmNlc0NvbnRlbnQiOlsiIyBHaXZldCBJRCByw6RrbmFyIGNoZXNzOTYwIHV0IGtvbmZpZ3VyYXRpb25lbi5cclxuIyA8PSAwIElEIDwgOTYwXHJcbiMgNTE4IG1vdHN2YXJhciBub3JtYWx0IHNjaGFjaywgZHZzIFJOQlFLQk5SXHJcblxyXG4jIGh0dHBzOi8vY2hlc3MtdGlnZXJzLmRlL2Rvd25sb2FkL2NoZXNzOTYwX3JlZ2Vsbi5wZGY/UEhQU0VTU0lEPWQ3MWRmZTE3ZTdlOGFhZTE2YWRjZTZmOGZiMjg0NDEwXHJcblxyXG5hc3NlcnQgPSAoYSxiKSAtPlxyXG5cdGEgPSBKU09OLnN0cmluZ2lmeSBhIFxyXG5cdGIgPSBKU09OLnN0cmluZ2lmeSBiXHJcblx0aWYgYSE9YiB0aGVuIGNvbnNvbGUubG9nIFwiI3thfSAhPSAje2J9XCJcclxuXHJcbmV4cG9ydCBjaGVzczk2MCA9IChpbmRleCkgLT4gIyAxNiBtaWNyb3NlY3NcclxuXHRbUSxOLEIsWF0gPSAnUU5CXydcclxuXHJcblx0TjAgPSBbMCwwLDAsMCwxLDEsMSwyLDIsM11cclxuXHROMSA9IFsxLDIsMyw0LDIsMyw0LDMsNCw0XVxyXG5cdEIwID0gWzAsMiw0LDZdXHJcblx0QjEgPSBbMSwzLDUsN11cclxuXHJcblx0Z2V0RW1wdHkgPSAoYXJyKSAtPlxyXG5cdFx0YXJyID0gXy5tYXAgYXJyLCAodmFsdWUsaW5kZXgpIC0+IGlmIHZhbHVlPT1YIHRoZW4gaW5kZXggZWxzZSBYXHJcblx0XHRfLmZpbHRlciBhcnIsICh2YWx1ZSkgLT4gdmFsdWUgIT0gWFxyXG5cdGFzc2VydCBbMCwxLDNdLCBnZXRFbXB0eSBbWCxYLE4sWCxOXVxyXG5cclxuXHRmaWxsSW4gPSAocGllY2UscGxhY2VzLHBpZWNlcykgLT5cclxuXHRcdHJlcyA9IG5ldyBBcnJheSBwbGFjZXMubGVuZ3RoICsgcGllY2VzLmxlbmd0aFxyXG5cdFx0Xy5maWxsIHJlcyxYXHJcblx0XHRyZXNbcGxhY2VdID0gcGllY2UgZm9yIHBsYWNlIGluIHBsYWNlc1xyXG5cdFx0ZW1wdHkgPSBnZXRFbXB0eSByZXNcclxuXHRcdHJlc1tlbXB0eVtpXV0gPSBwaWVjZXNbaV0gZm9yIGkgaW4gXy5yYW5nZSBwaWVjZXMubGVuZ3RoXHJcblx0XHRyZXMuam9pbiAnJ1xyXG5cdGFzc2VydCAgICAnUk5LTlInLCBmaWxsSW4gTiwgWzEsM10sICdSS1InXHJcblx0YXNzZXJ0ICAgJ1JOUUtOUicsIGZpbGxJbiBRLCBbMl0sICAgJ1JOS05SJ1xyXG5cdGFzc2VydCAnUk5CUUtCTlInLCBmaWxsSW4gQiwgWzIsNV0sICdSTlFLTlInXHJcblxyXG5cdHEgID0gaW5kZXggLy8gMTYgJSA2XHJcblx0bjAgPSBOMFtpbmRleCAvLyA5NiAlIDEwXVxyXG5cdG4xID0gTjFbaW5kZXggLy8gOTYgJSAxMF1cclxuXHRiMCA9IEIwW2luZGV4IC8vIDQgJSA0XVxyXG5cdGIxID0gQjFbaW5kZXggJSA0XVxyXG5cclxuXHRmaXZlID0gZmlsbEluIE4sW24wLG4xXSwnUktSJ1xyXG5cdHNpeCAgPSBmaWxsSW4gUSxbcV0sZml2ZVxyXG5cdGZpbGxJbiBCLFtiMCxiMV0sc2l4XHJcbmFzc2VydCBcIlJOQlFLQk5SXCIsIGNoZXNzOTYwIDUxOFxyXG4iXX0=
//# sourceURL=c:\github\2022-007-StateLab\coffee\chess960.coffee