// Generated by CoffeeScript 2.5.1
var C960, CAdv, CCogwheel, CColor, CDead, CImage, CNumber, CPause, CRotate, CRounded, CShow, Control,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

Control = class Control {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'black', fg1 = 'white') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
    this.disabled = false;
  }

  
    // @x = Math.round @x
  // @y = Math.round @y
  // @w = Math.round @w
  // @h = Math.round @h
  draw() {
    return console.log('Control.draw must be overriden!');
  }

  inside(x, y) {
    var ref, ref1, w;
    w = this.w * [height / width, width / height][1 - TOGGLE];
    return (-w / 2 <= (ref = x - this.x) && ref <= w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

C960 = class C960 extends Control {
  constructor(x, y, w, h) {
    super(x, y, w, h);
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
    this.visible = true;
  }

  draw() {
    var dx, i, j, len, ref, results, w, xoff;
    if (this.visible) {
      dx = 12;
      w = this.h * [height / width, width / height][TOGGLE];
      xoff = this.x + (dx - w) / 2;
      ref = range(8);
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        results.push(image(chess[settings.chess960[i]], xoff + (i - 4) * dx, this.y + 8, w, this.h));
      }
      return results;
    }
  }

};

CAdv = class CAdv extends Control {
  constructor(bits1, index, x, y, diam, text, flipper, read, clk) {
    super(x, y, diam, diam, text, 'black');
    this.bits = bits1;
    this.index = index;
    this.flipper = flipper;
    this.read = read;
    this.clk = clk;
    this.visible = true;
  }

  draw() {
    var s;
    push();
    translate(this.x, this.y);
    if (this.flipper) {
      fill(1 === this.reader() ? 'yellow' : 'gray');
    } else {
      fill('gray');
    }
    s = [height / width, width / height][TOGGLE];
    ellipse(0, 0, this.w * s, this.h);
    fill('black');
    textSize(5);
    text(this.text, 0, 0.2);
    return pop();
  }

  inside(x, y) {
    var h, ref, ref1, s, w;
    s = [height / width, width / height][TOGGLE];
    w = this.w * s;
    h = this.h;
    return (-w / 2 <= (ref = x - this.x) && ref <= w / 2) && (-h / 2 <= (ref1 = y - this.y) && ref1 <= h / 2);
  }

  reader() {
    if (this.flipper) {
      return this.read(this.bits, this.index);
    } else {
      return this.read(this.bits, this.text);
    }
  }

  click() {
    if (this.flipper) {
      return this.clk(this.bits, this.index);
    } else {
      return this.clk(this.bits, this.text);
    }
  }

};

CCogwheel = class CCogwheel extends Control { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'black', fg1 = 'white', clicker) {
    super(x, y, w, h);
    this.click = this.click.bind(this);
    this.bg = bg1;
    this.fg = fg1;
    this.clicker = clicker;
  }

  click() {
    boundMethodCheck(this, CCogwheel);
    
    //console.log 'CCogwheel'
    return this.clicker();
  }

  draw() {
    var j, len, ref, v;
    if (settings.paused) {
      push();
      translate(this.x, this.y);
      scale([height / width, width / height][TOGGLE], 1);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      for (j = 0, len = ref.length; j < len; j++) {
        v = ref[j];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        pop();
      }
      return pop();
    }
  }

};

CColor = class CColor extends Control {
  constructor(x, y, fg1) {
    super(x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(settings.info[this.fg], this.x, this.y);
    return pop();
  }

};

CDead = class CDead extends Control {
  constructor(x, y, text, fg = 'white') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

CImage = class CImage extends Control {
  constructor(x, y, w, h, image1, clicker) {
    super(x, y, w, h);
    this.click = this.click.bind(this);
    this.image = image1;
    this.clicker = clicker;
  }

  click() {
    boundMethodCheck(this, CImage);
    return this.clicker();
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

CNumber = class CNumber extends Control {
  constructor(x, y, reader) {
    super(x, y, 0, 0);
    this.reader = reader;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
  }

  draw() {
    push();
    textSize(8);
    fill('white');
    text(this.reader(), this.x, this.y);
    return pop();
  }

};

CPause = class CPause extends Control {
  constructor(x, y, w = 0, h = 0, bg1 = 'black', fg1 = 'white', clicker) {
    super(x, y, w, h);
    this.click = this.click.bind(this);
    this.bg = bg1;
    this.fg = fg1;
    this.clicker = clicker;
  }

  click() {
    boundMethodCheck(this, CPause);
    return this.clicker();
  }

  draw() {
    if (!settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

CRotate = class CRotate extends Control {
  constructor(x, y, w, h, degrees, bg, fg, player, clicker) {
    super(x, y, w, h, '', bg, fg);
    this.click = this.click.bind(this);
    this.degrees = degrees;
    this.player = player;
    this.clicker = clicker;
  }

  click() {
    boundMethodCheck(this, CRotate);
    return this.clicker();
  }

  draw() {
    var m, minCol, mw, s, secCol, ss, sw, t, tertier;
    tertier = settings.clocks[this.player];
    [m, s, t] = mst(tertier);
    t = Math.round(t);
    ss = m + ':' + d2(s);
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    if (settings.player === this.player) {
      minCol = 'red';
      secCol = settings.timeout ? 'red' : 'white';
    } else {
      minCol = 'lightgrey';
      secCol = 'grey';
    }
    textSize(27);
    mw = tw * m.toString().length;
    sw = tw * 2;
    fill(minCol);
    text(m, -sw / 2, -2);
    fill(secCol);
    text(d2(s), mw / 2, -2);
    textSize(10);
    if (tertier < 10 * 60) {
      text(t, 36, -4);
    }
    if (bits.handicap.nr > 0 && settings.bonuses[this.player] > 0) {
      textSize(8);
      fill('grey');
      text(settings.bonus[this.player], 0, 17);
    }
    return pop();
  }

};

CRounded = class CRounded extends Control {
  constructor(x, y, w, h, text = '', disabled = false, bg = 'white', fg = 'black', clicker = null) {
    super(x, y, w, h, text, bg, fg);
    this.click = this.click.bind(this);
    this.disabled = disabled;
    this.clicker = clicker;
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.disabled ? "black" : this.bg);
      rect(this.x, this.y, this.w, this.h, this.h / 2);
      textSize(4);
      fill(this.disabled ? "white" : this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

  click() {
    boundMethodCheck(this, CRounded);
    if (this.clicker) {
      return this.clicker();
    }
  }

};

CShow = class CShow extends CDead {
  constructor(x, y, fg = 'white') {
    super(x, y, '', fg);
  }

  draw() {
    push();
    translate(this.x, this.y);
    rotate(-90);
    fill('white');
    textSize(5);
    text(settings.info.white, 0, 0);
    return pop();
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\controls.coffee