// Generated by CoffeeScript 2.5.1
var prettyPair,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

export var globals = {};

globals.HOUR = 60 * 60 * 60; // tertier

globals.MINUTE = 60 * 60; // tertier

globals.SEC = 60; // tertier

globals.TOGGLE = 1; // 0=portrÃ¤tt (Android) 1=landskap (Mac)

globals.HEARTBEAT = 1000; // ms updates of localStorage

globals.FRAMERATE = 60; // 10

globals.states = {};

globals.settings = {};

globals.bits = {};

globals.backup = null;

globals.tw = 0;

globals.qr = null;

globals.sound = null;

globals.currState = null;

globals.diag = 0;

globals.os = '';

globals.chess = null;

globals.logg = [];

export var logg = function(prompt, value = '') {
  return globals.logg.push(`${prompt} ${JSON.stringify(value)}`);
};

export var clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

export var getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

export var createState = function(key, klass) {
  return globals.states[key] = new klass(key);
};

export var pretty = function(tot) {
  var header, m, s, t;
  tot = Math.round(tot);
  t = modulo(tot, 60);
  tot = Math.floor(tot / 60);
  s = modulo(tot, 60);
  m = Math.floor(tot / 60);
  header = '';
  if (m > 0) {
    header += m + 'm';
  }
  if (s > 0) {
    header += s + 's';
  }
  if (t > 0) {
    header += t + 't';
  }
  return header;
};

assert('1m1t', pretty(3601));

assert('2s3t', pretty(123));

assert('60m30s', pretty(60 * 60 * 60 + 30 * 60));

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

assert('1m1t + 2s3t', prettyPair(3601, 123));

export var d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

assert('03', d2(3));

export var mst = function(x) { // tertier
  var m, s, t;
  t = modulo(x, 60);
  x = Math.floor(x / 60);
  s = modulo(x, 60);
  m = Math.floor(x / 60);
  return [m, s, t];
};

assert([3, 0, 0], mst(3 * 60 * 60));

assert([3, 0, 30], mst(180 * 60 + 30));

export var getOrange = function() {
  var g, gs, gsp;
  g = globals;
  gs = g.settings;
  gs.makeHandicap();
  gsp = gs.players;
  if (g.bits.handicap.nr === 0) {
    return '';
  } else {
    return prettyPair(gsp[0][0], gsp[0][1]);
  }
};

export var getWhite = function() {
  return globals.settings.compact();
};

export var getGreen = function() {
  var g, gs, gsp;
  g = globals;
  gs = g.settings;
  gs.makeHandicap();
  gsp = globals.settings.players;
  if (g.bits.handicap.nr === 0) {
    return '';
  } else {
    return prettyPair(gsp[1][0], gsp[1][1]);
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFscy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxnbG9iYWxzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQSxVQUFBO0VBQUE7O0FBQUEsT0FBQSxJQUFPLE9BQUEsR0FBVSxDQUFBOztBQUVqQixPQUFPLENBQUMsSUFBUixHQUFpQixFQUFBLEdBQUcsRUFBSCxHQUFNLEdBRnZCOztBQUdBLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLEVBQUEsR0FBRyxHQUhwQjs7QUFJQSxPQUFPLENBQUMsR0FBUixHQUFpQixHQUpqQjs7QUFNQSxPQUFPLENBQUMsTUFBUixHQUFpQixFQU5qQjs7QUFPQSxPQUFPLENBQUMsU0FBUixHQUFvQixLQVBwQjs7QUFTQSxPQUFPLENBQUMsU0FBUixHQUFvQixHQVRwQjs7QUFVQSxPQUFPLENBQUMsTUFBUixHQUFpQixDQUFBOztBQUNqQixPQUFPLENBQUMsUUFBUixHQUFvQixDQUFBOztBQUNwQixPQUFPLENBQUMsSUFBUixHQUFlLENBQUE7O0FBQ2YsT0FBTyxDQUFDLE1BQVIsR0FBaUI7O0FBRWpCLE9BQU8sQ0FBQyxFQUFSLEdBQWE7O0FBQ2IsT0FBTyxDQUFDLEVBQVIsR0FBYTs7QUFDYixPQUFPLENBQUMsS0FBUixHQUFnQjs7QUFDaEIsT0FBTyxDQUFDLFNBQVIsR0FBb0I7O0FBQ3BCLE9BQU8sQ0FBQyxJQUFSLEdBQWU7O0FBQ2YsT0FBTyxDQUFDLEVBQVIsR0FBYTs7QUFDYixPQUFPLENBQUMsS0FBUixHQUFnQjs7QUFDaEIsT0FBTyxDQUFDLElBQVIsR0FBZTs7QUFFZixPQUFBLElBQU8sSUFBQSxHQUFPLFFBQUEsQ0FBQyxNQUFELEVBQVEsUUFBTSxFQUFkLENBQUE7U0FDYixPQUFPLENBQUMsSUFBSSxDQUFDLElBQWIsQ0FBa0IsQ0FBQSxDQUFBLENBQUcsTUFBSCxFQUFBLENBQUEsQ0FBYSxJQUFJLENBQUMsU0FBTCxDQUFlLEtBQWYsQ0FBYixDQUFBLENB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b250ZW50IjpbImV4cG9ydCBnbG9iYWxzID0ge31cclxuXHJcbmdsb2JhbHMuSE9VUiAgID0gNjAqNjAqNjAgIyB0ZXJ0aWVyXHJcbmdsb2JhbHMuTUlOVVRFID0gNjAqNjAgICAgIyB0ZXJ0aWVyXHJcbmdsb2JhbHMuU0VDICAgID0gNjAgICAgICAgIyB0ZXJ0aWVyXHJcblxyXG5nbG9iYWxzLlRPR0dMRSA9IDEgIyAwPXBvcnRyw6R0dCAoQW5kcm9pZCkgMT1sYW5kc2thcCAoTWFjKVxyXG5nbG9iYWxzLkhFQVJUQkVBVCA9IDEwMDAgIyBtcyB1cGRhdGVzIG9mIGxvY2FsU3RvcmFnZVxyXG5cclxuZ2xvYmFscy5GUkFNRVJBVEUgPSA2MCAjIDEwXHJcbmdsb2JhbHMuc3RhdGVzID0ge31cclxuZ2xvYmFscy5zZXR0aW5ncyAgPSB7fVxyXG5nbG9iYWxzLmJpdHMgPSB7fVxyXG5nbG9iYWxzLmJhY2t1cCA9IG51bGxcclxuXHJcbmdsb2JhbHMudHcgPSAwXHJcbmdsb2JhbHMucXIgPSBudWxsXHJcbmdsb2JhbHMuc291bmQgPSBudWxsXHJcbmdsb2JhbHMuY3VyclN0YXRlID0gbnVsbFxyXG5nbG9iYWxzLmRpYWcgPSAwXHJcbmdsb2JhbHMub3MgPSAnJ1xyXG5nbG9iYWxzLmNoZXNzID0gbnVsbFxyXG5nbG9iYWxzLmxvZ2cgPSBbXVxyXG5cclxuZXhwb3J0IGxvZ2cgPSAocHJvbXB0LHZhbHVlPScnKSAtPlxyXG5cdGdsb2JhbHMubG9nZy5wdXNoIFwiI3twcm9tcHR9ICN7SlNPTi5zdHJpbmdpZnkgdmFsdWV9XCJcclxuXHJcbmV4cG9ydCBjbG9uZSA9ICh4KSAtPiBKU09OLnBhcnNlIEpTT04uc3RyaW5naWZ5IHhcclxuXHJcbmV4cG9ydCBnZXRMb2NhbENvb3JkcyA9IC0+XHJcblx0bWF0cml4ID0gZHJhd2luZ0NvbnRleHQuZ2V0VHJhbnNmb3JtKClcclxuXHRwZCA9IHBpeGVsRGVuc2l0eSgpXHJcblx0bWF0cml4LmludmVyc2UoKS50cmFuc2Zvcm1Qb2ludCBuZXcgRE9NUG9pbnQgbW91c2VYICogcGQsbW91c2VZICogcGRcclxuXHJcbmV4cG9ydCBjcmVhdGVTdGF0ZSA9IChrZXksa2xhc3MpIC0+IGdsb2JhbHMuc3RhdGVzW2tleV0gPSBuZXcga2xhc3Mga2V5XHJcblxyXG5leHBvcnQgcHJldHR5ID0gKHRvdCkgLT5cclxuXHR0b3QgPSBNYXRoLnJvdW5kIHRvdFxyXG5cdHQgPSB0b3QgJSUgNjBcclxuXHR0b3QgLy89IDYwXHJcblx0cyA9IHRvdCAlJSA2MFxyXG5cdG0gPSB0b3QgLy8gNjBcclxuXHRoZWFkZXIgPSAnJ1xyXG5cdGlmIG0gPiAwIHRoZW4gaGVhZGVyICs9IG0gKyAnbSdcclxuXHRpZiBzID4gMCB0aGVuIGhlYWRlciArPSBzICsgJ3MnXHJcblx0aWYgdCA+IDAgdGhlbiBoZWFkZXIgKz0gdCArICd0J1xyXG5cdGhlYWRlclxyXG5hc3NlcnQgJzFtMXQnLCBwcmV0dHkgMzYwMVxyXG5hc3NlcnQgJzJzM3QnLCBwcmV0dHkgMTIzXHJcbmFzc2VydCAnNjBtMzBzJywgcHJldHR5IDYwKjYwKjYwKzMwKjYwXHJcblxyXG5wcmV0dHlQYWlyID0gKGEsYikgLT4gXHJcblx0c2VwYXJhdG9yID0gaWYgcHJldHR5KGIpICE9ICcnIHRoZW4gJyArICcgZWxzZSAnJ1xyXG5cdHByZXR0eShhKSArIHNlcGFyYXRvciArIHByZXR0eShiKVxyXG5hc3NlcnQgJzFtMXQgKyAyczN0JywgcHJldHR5UGFpciAzNjAxLDEyM1xyXG5cclxuZXhwb3J0IGQyID0gKHgpIC0+XHJcblx0eCA9IE1hdGgudHJ1bmMgeFxyXG5cdGlmIHggPCAxMCB0aGVuICcwJyt4IGVsc2UgeFxyXG5hc3NlcnQgJzAzJywgZDIgM1xyXG5cclxuZXhwb3J0IG1zdCA9ICh4KSAtPiAjIHRlcnRpZXJcclxuXHR0ID0geCAlJSA2MFxyXG5cdHggLy89IDYwXHJcblx0cyA9IHggJSUgNjBcclxuXHRtID0geCAvLyA2MFxyXG5cdFttLHMsdF0gXHJcbmFzc2VydCBbMywwLDBdLCBtc3QgMyo2MCo2MFxyXG5hc3NlcnQgWzMsMCwzMF0sIG1zdCAxODAqNjArMzBcclxuXHJcbmV4cG9ydCBnZXRPcmFuZ2UgPSAtPlxyXG5cdGcgPSBnbG9iYWxzXHJcblx0Z3MgPSBnLnNldHRpbmdzXHJcblx0Z3MubWFrZUhhbmRpY2FwKClcclxuXHRnc3AgPSBncy5wbGF5ZXJzXHJcblx0aWYgZy5iaXRzLmhhbmRpY2FwLm5yID09IDAgdGhlbiAnJyBlbHNlIHByZXR0eVBhaXIgZ3NwWzBdWzBdLCBnc3BbMF1bMV1cclxuXHJcbmV4cG9ydCBnZXRXaGl0ZSA9IC0+IGdsb2JhbHMuc2V0dGluZ3MuY29tcGFjdCgpXHJcblxyXG5leHBvcnQgZ2V0R3JlZW4gPSAtPiBcclxuXHRnID0gZ2xvYmFsc1xyXG5cdGdzID0gZy5zZXR0aW5nc1xyXG5cdGdzLm1ha2VIYW5kaWNhcCgpXHJcblx0Z3NwID0gZ2xvYmFscy5zZXR0aW5ncy5wbGF5ZXJzXHJcblx0aWYgZy5iaXRzLmhhbmRpY2FwLm5yID09IDAgdGhlbiAnJyBlbHNlIHByZXR0eVBhaXIgZ3NwWzFdWzBdLCBnc3BbMV1bMV1cclxuIl19
//# sourceURL=c:\github\2022-007-StateLab\coffee\globals.coffee