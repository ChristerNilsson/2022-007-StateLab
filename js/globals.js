// Generated by CoffeeScript 2.5.1
var modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

export var globals = {};

globals.HOUR = 60 * 60 * 60; // tertier

globals.MINUTE = 60 * 60; // tertier

globals.SEC = 60; // tertier

globals.TOGGLE = 1; // 0=portrÃ¤tt (Android) 1=landskap (Mac)

globals.HEARTBEAT = 1000; // ms updates of localStorage

globals.FRAMERATE = 60; // 10

globals.states = {};

globals.settings = {};

globals.bits = {};

globals.backup = null;

globals.tw = 0;

globals.qr = null;

globals.sound = null;

globals.currState = null;

globals.diag = 0;

globals.os = '';

globals.chess = null;

export var clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

export var getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

export var createState = function(key, klass) {
  return globals.states[key] = new klass(key);
};

export var pretty = function(tot) {
  var header, m, s, t;
  tot = Math.round(tot);
  t = modulo(tot, 60);
  tot = Math.floor(tot / 60);
  s = modulo(tot, 60);
  m = Math.floor(tot / 60);
  header = '';
  if (m > 0) {
    header += m + 'm';
  }
  if (s > 0) {
    header += s + 's';
  }
  if (t > 0) {
    header += t + 't';
  }
  return header;
};

assert('1m1t', pretty(3601));

assert('2s3t', pretty(123));

assert('60m30s', pretty(60 * 60 * 60 + 30 * 60));

export var prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

assert('1m1t + 2s3t', prettyPair(3601, 123));

export var d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

assert('03', d2(3));

export var mst = function(x) { // tertier
  var m, s, t;
  t = modulo(x, 60);
  x = Math.floor(x / 60);
  s = modulo(x, 60);
  m = Math.floor(x / 60);
  return [m, s, t];
};

assert([3, 0, 0], mst(3 * 60 * 60));

assert([3, 0, 30], mst(180 * 60 + 30));

export var getOrange = function() {
  var g, gs, gsp;
  g = globals;
  gs = g.settings;
  gs.makeHandicap();
  gsp = gs.players;
  if (g.bits.handicap.nr === 0) {
    return '';
  } else {
    return prettyPair(gsp[0][0], gsp[0][1]);
  }
};

export var getWhite = function() {
  return globals.settings.compact();
};

export var getGreen = function() {
  var g, gs, gsp;
  g = globals;
  gs = g.settings;
  gs.makeHandicap();
  gsp = globals.settings.players;
  if (g.bits.handicap.nr === 0) {
    return '';
  } else {
    return prettyPair(gsp[1][0], gsp[1][1]);
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFscy5qcyIsInNvdXJjZVJvb3QiOiIuLiIsInNvdXJjZXMiOlsiY29mZmVlXFxnbG9iYWxzLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQTs7QUFBQSxPQUFBLElBQU8sT0FBQSxHQUFVLENBQUE7O0FBRWpCLE9BQU8sQ0FBQyxJQUFSLEdBQWlCLEVBQUEsR0FBRyxFQUFILEdBQU0sR0FGdkI7O0FBR0EsT0FBTyxDQUFDLE1BQVIsR0FBaUIsRUFBQSxHQUFHLEdBSHBCOztBQUlBLE9BQU8sQ0FBQyxHQUFSLEdBQWlCLEdBSmpCOztBQU1BLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLEVBTmpCOztBQU9BLE9BQU8sQ0FBQyxTQUFSLEdBQW9CLEtBUHBCOztBQVNBLE9BQU8sQ0FBQyxTQUFSLEdBQW9CLEdBVHBCOztBQVVBLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQUE7O0FBQ2pCLE9BQU8sQ0FBQyxRQUFSLEdBQW9CLENBQUE7O0FBQ3BCLE9BQU8sQ0FBQyxJQUFSLEdBQWUsQ0FBQTs7QUFDZixPQUFPLENBQUMsTUFBUixHQUFpQjs7QUFFakIsT0FBTyxDQUFDLEVBQVIsR0FBYTs7QUFDYixPQUFPLENBQUMsRUFBUixHQUFhOztBQUNiLE9BQU8sQ0FBQyxLQUFSLEdBQWdCOztBQUNoQixPQUFPLENBQUMsU0FBUixHQUFvQjs7QUFDcEIsT0FBTyxDQUFDLElBQVIsR0FBZTs7QUFDZixPQUFPLENBQUMsRUFBUixHQUFhOztBQUNiLE9BQU8sQ0FBQyxLQUFSLEdBQWdCOztBQUVoQixPQUFBLElBQU8sS0FBQSxHQUFRLFFBQUEsQ0FBQyxDQUFELENBQUE7U0FBTyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixDQUFYO0FBQVA7O0FBRWYsT0FBQSxJQUFPLGNBQUEsR0FBaUIsUUFBQSxDQUFBLENBQUE7QUFDeEIsTUFBQSxNQUFBLEVBQUE7RUFBQyxNQUFBLEdBQVMsY0FBYyxDQUFDLFlBQWYsQ0FBQTtF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QyxDQUFDO0VBQ1AsRUFBRSxDQUFDLFlBQUgsQ0FBQTtFQUNBLEdBQUEsR0FBTSxFQUFFLENBQUM7RUFDVCxJQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQWhCLEtBQXNCLENBQXpCO1dBQWdDLEdBQWhDO0dBQUEsTUFBQTtXQUF3QyxVQUFBLENBQVcsR0FBRyxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsR0FBRyxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBNUIsRUFBeEM7O0FBTGtCOztBQU9uQixPQUFBLElBQU8sUUFBQSxHQUFXLFFBQUEsQ0FBQSxDQUFBO1NBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFqQixDQUFBO0FBQUg7O0FBRWxCLE9BQUEsSUFBTyxRQUFBLEdBQVcsUUFBQSxDQUFBLENBQUE7QUFDbEIsTUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBO0VBQUMsQ0FBQSxHQUFJO0VBQ0osRUFBQSxHQUFLLENBQUMsQ0FBQztFQUNQLEVBQUUsQ0FBQyxZQUFILENBQUE7RUFDQSxHQUFBLEdBQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQztFQUN2QixJQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQWhCLEtBQXNCLENBQXpCO1dBQWdDLEdBQWhDO0dBQUEsTUFBQTtXQUF3QyxVQUFBLENBQVcsR0FBRyxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsR0FBRyxDQUFDLENBQUQsQ0FBRyxDQUFDLENBQUQsQ0FBNUIsRUFBeEM7O0FBTGlCIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGdsb2JhbHMgPSB7fVxyXG5cclxuZ2xvYmFscy5IT1VSICAgPSA2MCo2MCo2MCAjIHRlcnRpZXJcclxuZ2xvYmFscy5NSU5VVEUgPSA2MCo2MCAgICAjIHRlcnRpZXJcclxuZ2xvYmFscy5TRUMgICAgPSA2MCAgICAgICAjIHRlcnRpZXJcclxuXHJcbmdsb2JhbHMuVE9HR0xFID0gMSAjIDA9cG9ydHLDpHR0IChBbmRyb2lkKSAxPWxhbmRza2FwIChNYWMpXHJcbmdsb2JhbHMuSEVBUlRCRUFUID0gMTAwMCAjIG1zIHVwZGF0ZXMgb2YgbG9jYWxTdG9yYWdlXHJcblxyXG5nbG9iYWxzLkZSQU1FUkFURSA9IDYwICMgMTBcclxuZ2xvYmFscy5zdGF0ZXMgPSB7fVxyXG5nbG9iYWxzLnNldHRpbmdzICA9IHt9XHJcbmdsb2JhbHMuYml0cyA9IHt9XHJcbmdsb2JhbHMuYmFja3VwID0gbnVsbFxyXG5cclxuZ2xvYmFscy50dyA9IDBcclxuZ2xvYmFscy5xciA9IG51bGxcclxuZ2xvYmFscy5zb3VuZCA9IG51bGxcclxuZ2xvYmFscy5jdXJyU3RhdGUgPSBudWxsXHJcbmdsb2JhbHMuZGlhZyA9IDBcclxuZ2xvYmFscy5vcyA9ICcnXHJcbmdsb2JhbHMuY2hlc3MgPSBudWxsXHJcblxyXG5leHBvcnQgY2xvbmUgPSAoeCkgLT4gSlNPTi5wYXJzZSBKU09OLnN0cmluZ2lmeSB4XHJcblxyXG5leHBvcnQgZ2V0TG9jYWxDb29yZHMgPSAtPlxyXG5cdG1hdHJpeCA9IGRyYXdpbmdDb250ZXh0LmdldFRyYW5zZm9ybSgpXHJcblx0cGQgPSBwaXhlbERlbnNpdHkoKVxyXG5cdG1hdHJpeC5pbnZlcnNlKCkudHJhbnNmb3JtUG9pbnQgbmV3IERPTVBvaW50IG1vdXNlWCAqIHBkLG1vdXNlWSAqIHBkXHJcblxyXG5leHBvcnQgY3JlYXRlU3RhdGUgPSAoa2V5LGtsYXNzKSAtPiBnbG9iYWxzLnN0YXRlc1trZXldID0gbmV3IGtsYXNzIGtleVxyXG5cclxuZXhwb3J0IHByZXR0eSA9ICh0b3QpIC0+XHJcblx0dG90ID0gTWF0aC5yb3VuZCB0b3RcclxuXHR0ID0gdG90ICUlIDYwXHJcblx0dG90IC8vPSA2MFxyXG5cdHMgPSB0b3QgJSUgNjBcclxuXHRtID0gdG90IC8vIDYwXHJcblx0aGVhZGVyID0gJydcclxuXHRpZiBtID4gMCB0aGVuIGhlYWRlciArPSBtICsgJ20nXHJcblx0aWYgcyA+IDAgdGhlbiBoZWFkZXIgKz0gcyArICdzJ1xyXG5cdGlmIHQgPiAwIHRoZW4gaGVhZGVyICs9IHQgKyAndCdcclxuXHRoZWFkZXJcclxuYXNzZXJ0ICcxbTF0JywgcHJldHR5IDM2MDFcclxuYXNzZXJ0ICcyczN0JywgcHJldHR5IDEyM1xyXG5hc3NlcnQgJzYwbTMwcycsIHByZXR0eSA2MCo2MCo2MCszMCo2MFxyXG5cclxuZXhwb3J0IHByZXR0eVBhaXIgPSAoYSxiKSAtPiBcclxuXHRzZXBhcmF0b3IgPSBpZiBwcmV0dHkoYikgIT0gJycgdGhlbiAnICsgJyBlbHNlICcnXHJcblx0cHJldHR5KGEpICsgc2VwYXJhdG9yICsgcHJldHR5KGIpXHJcbmFzc2VydCAnMW0xdCArIDJzM3QnLCBwcmV0dHlQYWlyIDM2MDEsMTIzXHJcblxyXG5leHBvcnQgZDIgPSAoeCkgLT5cclxuXHR4ID0gTWF0aC50cnVuYyB4XHJcblx0aWYgeCA8IDEwIHRoZW4gJzAnK3ggZWxzZSB4XHJcbmFzc2VydCAnMDMnLCBkMiAzXHJcblxyXG5leHBvcnQgbXN0ID0gKHgpIC0+ICMgdGVydGllclxyXG5cdHQgPSB4ICUlIDYwXHJcblx0eCAvLz0gNjBcclxuXHRzID0geCAlJSA2MFxyXG5cdG0gPSB4IC8vIDYwXHJcblx0W20scyx0XSBcclxuYXNzZXJ0IFszLDAsMF0sIG1zdCAzKjYwKjYwXHJcbmFzc2VydCBbMywwLDMwXSwgbXN0IDE4MCo2MCszMFxyXG5cclxuZXhwb3J0IGdldE9yYW5nZSA9IC0+XHJcblx0ZyA9IGdsb2JhbHNcclxuXHRncyA9IGcuc2V0dGluZ3NcclxuXHRncy5tYWtlSGFuZGljYXAoKVxyXG5cdGdzcCA9IGdzLnBsYXllcnNcclxuXHRpZiBnLmJpdHMuaGFuZGljYXAubnIgPT0gMCB0aGVuICcnIGVsc2UgcHJldHR5UGFpciBnc3BbMF1bMF0sIGdzcFswXVsxXVxyXG5cclxuZXhwb3J0IGdldFdoaXRlID0gLT4gZ2xvYmFscy5zZXR0aW5ncy5jb21wYWN0KClcclxuXHJcbmV4cG9ydCBnZXRHcmVlbiA9IC0+IFxyXG5cdGcgPSBnbG9iYWxzXHJcblx0Z3MgPSBnLnNldHRpbmdzXHJcblx0Z3MubWFrZUhhbmRpY2FwKClcclxuXHRnc3AgPSBnbG9iYWxzLnNldHRpbmdzLnBsYXllcnNcclxuXHRpZiBnLmJpdHMuaGFuZGljYXAubnIgPT0gMCB0aGVuICcnIGVsc2UgcHJldHR5UGFpciBnc3BbMV1bMF0sIGdzcFsxXVsxXVxyXG4iXX0=
//# sourceURL=c:\github\2022-007-StateLab\coffee\globals.coffee