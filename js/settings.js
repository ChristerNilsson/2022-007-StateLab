// Generated by CoffeeScript 2.5.1
import {
  globals,
  clone,
  pretty,
  logg
} from './globals.js';

import {
  getOrange,
  getWhite,
  getGreen
} from './globals.js';

export var CSettings = class CSettings {
  constructor() {
    console.log(localStorage.settings ? logg("load") : logg("default"));
    if (localStorage.settings) {
      Object.assign(this, JSON.parse(localStorage.settings));
    }
    this.bits || (this.bits = {
      minutes: 3,
      seconds: 2,
      handicap: 0,
      number960: 518
    });
    this.bonus || (this.bonus = [
      '',
      '' // redundant, sparar tid
    ]);
    this.bonuses || (this.bonuses = [
      2 * 60,
      2 * 60 // tertier, redundant, sparar tid
    ]);
    this.chess960 || (this.chess960 = 'RNBQKBNR'); // redundant, sparar tid
    this.clocks || (this.clocks = [
      180 * 60,
      180 * 60 // tertier
    ]);
    this.info || (this.info = {
      orange: '',
      white: '3+2',
      green: '' // redundant, sparar tid
    });
    this.paused = true;
    this.player || (this.player = -1);
    this.timeout || (this.timeout = false);
    //logg "bits",@bits

    // Dessa fyra objekt vill man inte spara i localStorage
    this.settings2bits();
    this.makeHandicap();
    this.save();
  }

  bits2settings() {
    var gb;
    //logg 'bits2settings'
    gb = globals.bits;
    //logg 'minutes before', gb.minutes
    this.bits.minutes = gb.minutes.nr;
    this.bits.seconds = gb.seconds.nr;
    this.bits.handicap = gb.handicap.nr;
    return this.bits.number960 = gb.number960.nr;
  }

  //logg 'minutes after', @bits.minutes
  //logg 'minutes', @bits.minutes.nr
  //logg 'seconds', @bits.seconds.nr
  //logg 'handicap', @bits.handicap.nr
  settings2bits() {
    var gb;
    //logg 'settings2bits'
    gb = globals.bits;
    //logg 'minutes before', gb.minutes
    gb.minutes.setNr(this.bits.minutes);
    gb.seconds.setNr(this.bits.seconds);
    gb.handicap.setNr(this.bits.handicap);
    return gb.number960.setNr(this.bits.number960);
  }

  //logg 'minutes after', gb.minutes
  //logg 'seconds', gb.seconds.nr
  //logg 'handicap', gb.handicap.nr
  backup() {
    this.bits2settings();
    return globals.backup = clone(this); // kopierar TILL backup
  }

  restore() {
    Object.assign(this, globals.backup); // kopierar FRÃ…N backup
    return this.settings2bits();
  }

  tick() {
    var c;
    if (this.paused) {
      return;
    }
    c = this.clocks[this.player];
    if (c > 0) {
      c -= 60 / frameRate();
    }
    if (c <= 0) {
      c = 0;
      this.timeout = true;
      this.paused = true;
    }
    return this.clocks[this.player] = c;
  }

  save() {
    var d, lastStorageSave;
    d = new Date();
    if (d - lastStorageSave < globals.HEARTBEAT) { // ms
      return;
    }
    lastStorageSave = d;
    logg('save');
    this.bits2settings();
    return localStorage.settings = JSON.stringify(this);
  }

  compact() {
    var g, gb, header, header0, header1;
    header0 = '';
    header1 = '';
    g = globals;
    gb = g.bits;
    if (gb.minutes.nr > 0) {
      header0 += gb.minutes.nr;
    }
    if (gb.seconds.nr > 0) {
      header1 += gb.seconds.nr;
    }
    header = header0;
    if (header1.length > 0) {
      header += '+' + header1;
    }
    if (gb.handicap.nr > 0) {
      header += `\n(${gb.handicap.nr})`;
    }
    return header;
  }

  makeHandicap() {
    var bonus, g, gb, hcp, refl;
    g = globals;
    gb = g.bits;
    //logg 'makeHandicap', gb.minutes.nr
    refl = g.MINUTE * gb.minutes.nr; // tertier
    bonus = g.SEC * gb.seconds.nr; // tertier
    hcp = gb.handicap.nr / 60; // 0/60 to 59/60
    this.players = [];
    this.players[0] = [refl + refl * hcp, bonus + bonus * hcp];
    return this.players[1] = [refl - refl * hcp, bonus - bonus * hcp];
  }

  //logg 'players', @players
  ok() {
    var g, gs;
    g = globals;
    gs = g.settings;
    this.makeHandicap();
    this.clocks = [this.players[0][0], this.players[1][0]];
    this.bonuses = [this.players[0][1], this.players[1][1]];
    this.bonus = ['+' + pretty(gs.bonuses[0]), '+' + pretty(gs.bonuses[1])];
    this.info.orange = getOrange();
    this.info.white = getWhite();
    this.info.green = getGreen();
    this.timeout = false;
    this.paused = true;
    return this.player = -1;
  }

  cancel() {
    this.restore();
    return this.paused = true;
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\settings.coffee