// Generated by CoffeeScript 2.5.1
  // TODO
  // Försämring av frameRate inträffar om man går från fullscreen till normal på Android

// Istället för sekunder är nu normalformen tertier, 60-dels sekunder
var C960, CAdv, CCogwheel, CColor, CDead, CImage, CNumber, CPause, CRotate, CRounded, CShow, Control, S960, SAdv, SBasic, SClock, State, cancel, chess, currState, diag, handlePlayer, lastStorageSave, ok, os, qr, rates, sound, sumRate, tw,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

import {
  globals,
  clone,
  getLocalCoords,
  createState,
  pretty,
  prettyPair,
  d2,
  mst
} from './globals.js';

import {
  getOrange,
  getWhite,
  getGreen
} from './globals.js';

import {
  CBits
} from './cbits.js';

import {
  chess960
} from './chess960.js';

import {
  CSettings
} from './settings.js';

globals.bits = {};

globals.bits.minutes = new CBits([1, 2, 4, 8, 15, 30, 60]);

globals.bits.seconds = new CBits([1, 2, 4, 8, 15, 30, 60]);

globals.bits.handicap = new CBits([1, 2, 4, 8, 15, 30]);

globals.bits.number960 = new CBits([1, 2, 4, 8, 15, 30, 60, 120, 240, 480]);

tw = 0;

qr = null;

chess = {};

currState = null;

os = '';

sound = null;

lastStorageSave = new Date();

rates = [];

sumRate = 0;

diag = 0;

cancel = () => {
  globals.settings.cancel();
  return currState = globals.states.SClock;
};

ok = () => {
  globals.settings.ok();
  return currState = globals.states.SClock;
};

Control = class Control {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'black', fg1 = 'white') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
  }

  // @x = Math.round @x
  // @y = Math.round @y
  // @w = Math.round @w
  // @h = Math.round @h
  draw() {
    return console.log('Control.draw must be overriden!');
  }

  inside(x, y) {
    var ref, ref1, w;
    w = this.w * [height / width, width / height][1 - globals.TOGGLE];
    return (-w / 2 <= (ref = x - this.x) && ref <= w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

CNumber = class CNumber extends Control {
  constructor(x, y, reader1) {
    super(x, y, 0, 0);
    this.reader = reader1;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
  }

  draw() {
    push();
    textSize(8);
    fill('white');
    text(this.reader(), this.x, this.y);
    return pop();
  }

};

C960 = class C960 extends Control {
  constructor(x, y, w, h) {
    super(x, y, w, h);
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
    this.visible = true;
  }

  draw() {
    var dx, i, k, len, ref, results, w, xoff;
    if (this.visible) {
      dx = 12;
      w = this.h * [height / width, width / height][globals.TOGGLE];
      xoff = this.x + (dx - w) / 2;
      ref = range(8);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(image(chess[globals.settings.chess960[i]], xoff + (i - 4) * dx, this.y + 8, w, this.h));
      }
      return results;
    }
  }

};

CRounded = class CRounded extends Control {
  constructor(x, y, w, h, text = '', disabled = false, bg = 'white', fg = 'black', clicker1 = null) {
    super(x, y, w, h, text, bg, fg);
    this.click = this.click.bind(this);
    this.disabled = disabled;
    this.clicker = clicker1;
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.disabled ? "black" : this.bg);
      rect(this.x, this.y, this.w, this.h, this.h / 2);
      textSize(4);
      fill(this.disabled ? "white" : this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

  click() {
    boundMethodCheck(this, CRounded);
    if (this.clicker) {
      return this.clicker();
    }
  }

};

CPause = class CPause extends Control {
  constructor(x, y, w = 0, h = 0, bg1 = 'black', fg1 = 'white', clicker1) {
    super(x, y, w, h);
    this.click = this.click.bind(this);
    this.bg = bg1;
    this.fg = fg1;
    this.clicker = clicker1;
  }

  click() {
    boundMethodCheck(this, CPause);
    return this.clicker();
  }

  draw() {
    if (!globals.settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

CCogwheel = class CCogwheel extends Control { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'black', fg1 = 'white', clicker1) {
    super(x, y, w, h);
    this.click = this.click.bind(this);
    this.bg = bg1;
    this.fg = fg1;
    this.clicker = clicker1;
  }

  click() {
    boundMethodCheck(this, CCogwheel);
    return this.clicker();
  }

  draw() {
    var k, len, ref, v;
    if (globals.settings.paused) {
      push();
      translate(this.x, this.y);
      scale([height / width, width / height][globals.TOGGLE], 1);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      for (k = 0, len = ref.length; k < len; k++) {
        v = ref[k];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        pop();
      }
      return pop();
    }
  }

};

CImage = class CImage extends Control {
  constructor(x, y, w, h, image1, clicker1) {
    super(x, y, w, h);
    this.click = this.click.bind(this);
    this.image = image1;
    this.clicker = clicker1;
  }

  click() {
    boundMethodCheck(this, CImage);
    return this.clicker();
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][globals.TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

CRotate = class CRotate extends Control {
  constructor(x, y, w, h, degrees, bg, fg, player2, clicker1) {
    super(x, y, w, h, '', bg, fg);
    this.click = this.click.bind(this);
    this.degrees = degrees;
    this.player = player2;
    this.clicker = clicker1;
  }

  click() {
    boundMethodCheck(this, CRotate);
    return this.clicker();
  }

  draw() {
    var m, minCol, mw, s, secCol, ss, sw, t, tertier;
    tertier = globals.settings.clocks[this.player];
    [m, s, t] = mst(tertier);
    t = Math.round(t);
    ss = m + ':' + d2(s);
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    if (globals.settings.player === this.player) {
      minCol = 'red';
      secCol = globals.settings.timeout ? 'red' : 'white';
    } else {
      minCol = 'lightgrey';
      secCol = 'grey';
    }
    textSize(18 + 9);
    mw = tw * m.toString().length;
    sw = tw * 2;
    fill(minCol);
    text(m, -sw / 2, -2);
    fill(secCol);
    text(d2(s), mw / 2, -2);
    textSize(10);
    if (tertier < 10 * 60) {
      text(t, 36, -4);
    }
    if (globals.bits.handicap.nr > 0 && globals.settings.bonuses[this.player] > 0) {
      textSize(8);
      fill('grey');
      text(globals.settings.bonus[this.player], 0, 17);
    }
    return pop();
  }

};

CAdv = class CAdv extends Control {
  constructor(bits1, index1, x, y, diam, text, flipper, read, clk) {
    super(x, y, diam, diam, text, 'black');
    this.bits = bits1;
    this.index = index1;
    this.flipper = flipper;
    this.read = read;
    this.clk = clk;
    this.visible = true;
  }

  draw() {
    var s;
    push();
    translate(this.x, this.y);
    if (this.flipper) {
      fill(1 === this.reader() ? 'yellow' : 'gray');
    } else {
      fill('gray');
    }
    s = [height / width, width / height][globals.TOGGLE];
    ellipse(0, 0, this.w * s, this.h);
    fill('black');
    textSize(5);
    text(this.text, 0, 0.2);
    return pop();
  }

  inside(x, y) {
    var h, ref, ref1, s, w;
    s = [height / width, width / height][globals.TOGGLE];
    w = this.w * s;
    h = this.h;
    return (-w / 2 <= (ref = x - this.x) && ref <= w / 2) && (-h / 2 <= (ref1 = y - this.y) && ref1 <= h / 2);
  }

  reader() {
    if (this.flipper) {
      return this.read(this.bits, this.index);
    } else {
      return this.read(this.bits, this.text);
    }
  }

  click() {
    if (this.flipper) {
      return this.clk(this.bits, this.index);
    } else {
      return this.clk(this.bits, this.text);
    }
  }

};

CDead = class CDead extends Control {
  constructor(x, y, text, fg = 'white') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

CShow = class CShow extends CDead {
  constructor(x, y, fg = 'white') {
    super(x, y, '', fg);
  }

  draw() {
    push();
    translate(this.x, this.y);
    rotate(-90);
    fill('white');
    textSize(5);
    text(globals.settings.info.white, 0, 0);
    return pop();
  }

};

CColor = class CColor extends Control {
  constructor(x, y, fg1) {
    super(x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(globals.settings.info[this.fg], this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor(name1) {
    this.name = name1;
    this.controls = {};
  }

  draw() {
    var key, results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw());
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

handlePlayer = function(player) {
  var g, gs;
  g = globals;
  gs = g.settings;
  if (gs.timeout) {
    return;
  }
  if (gs.paused) {
    sound.play();
  } else if (gs.player === -1) {
    sound.play();
  } else if (gs.player === player) {
    sound.play();
    gs.clocks[player] += gs.bonuses[player];
  }
  gs.paused = false;
  return gs.player = 1 - player;
};

SClock = class SClock extends State {
  constructor(name) {
    var handleQR, pause, player0, player1;
    super(name);
    player0 = () => {
      if (globals.settings.timeout) {

      } else {
        return handlePlayer(0);
      }
    };
    player1 = () => {
      if (globals.settings.timeout) {

      } else {
        return handlePlayer(1);
      }
    };
    pause = () => {
      return globals.settings.paused = true;
    };
    handleQR = () => {
      fullscreen(true);
      return resizeCanvas(innerWidth, innerHeight);
    };
    this.controls.left = new CRotate(50, 22, 100, 44, 180, 'black', 'white', 0, player0); // eg up
    this.controls.right = new CRotate(50, 78, 100, 44, 0, 'black', 'white', 1, player1); // eg down
    this.controls.pause = new CPause(67, 50, 17, 12, 'black', 'white', pause);
    this.controls.qr = new CImage(50, 50, 33, 12, qr, handleQR);
    this.controls.basic = new CCogwheel(83, 50, 17, 12, 'black', 'white', () => {
      globals.settings.backup();
      return currState = globals.states.SBasic;
    });
    this.controls.show = new CShow(22, 50, 'white');
  }

  indicator() {
    var a, andel, b;
    a = globals.settings.clocks[0];
    b = globals.settings.clocks[1];
    andel = 100 * a / (a + b);
    push();
    strokeWeight(1);
    stroke('white');
    line(1, andel, 10, andel);
    line(90, andel, 99, andel);
    return pop();
  }

  draw() {
    super.draw();
    return this.indicator();
  }

};

SBasic = class SBasic extends State {
  constructor(name) {
    var M, clicker, diam, gbm, gbs, i, k, l, len, len1, len2, n, reader, ref, ref1, ref2, s, x, y;
    super(name);
    reader = (bitar, text) => {
      return bitar.nr;
    };
    clicker = (bitar, text) => {
      var g, gb, gs, gsi;
      bitar.nr = text;
      g = globals;
      gb = g.bits;
      gs = g.settings;
      gsi = gs.info;
      gsi.orange = getOrange();
      gsi.white = getWhite();
      gsi.green = getGreen();
      return this.controls.ok.visible = gb.minutes.nr > 0 && gb.handicap.nr < 60;
    };
    x = [100 / 3, 200 / 3];
    y = [32, 41, 50, 59, 68, 77, 86, 95];
    diam = 8;
    this.controls.orange = new CColor(50, 2.5, 'orange'); // ,getOrange
    this.controls.white = new CColor(50, 9.5, 'white'); // , getWhite
    this.controls.green = new CColor(50, 16.5, 'green'); // , getGreen
    this.controls.reflection = new CDead(x[0], 20, 'reflection');
    this.controls.bonus = new CDead(x[1], 20, 'bonus');
    this.controls.M = new CDead(x[0], 25, 'minutes');
    this.controls.s = new CDead(x[1], 25, 'seconds');
    gbm = globals.bits.minutes;
    ref = range(5);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      M = [1, 2, 3, 5, 10][i];
      this.controls['M' + M] = new CAdv(gbm, i, x[0] - 10, y[i], diam, M, false, reader, clicker);
    }
    ref1 = range(6);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      M = [15, 20, 30, 45, 60, 90][i];
      this.controls['M' + M] = new CAdv(gbm, i, x[0] + 10, y[i], diam, M, false, reader, clicker);
    }
    gbs = globals.bits.seconds;
    ref2 = range(7);
    for (n = 0, len2 = ref2.length; n < len2; n++) {
      i = ref2[n];
      s = [0, 1, 2, 3, 5, 10, 30][i];
      this.controls['s' + s] = new CAdv(gbs, i, x[1], y[i], diam, s, false, reader, clicker);
    }
    this.controls.basic = new CRounded(1 * 100 / 10, y[7], 18, 6, 'basic', true, 'white', 'black');
    this.controls.adv = new CRounded(3 * 100 / 10, y[7], 18, 6, 'adv', false, 'white', 'black', () => {
      return currState = globals.states.SAdv;
    });
    this.controls.b960 = new CRounded(5 * 100 / 10, y[7], 18, 6, '960', false, 'white', 'black', () => {
      return currState = globals.states.S960;
    });
    this.controls.cancel = new CRounded(7 * 100 / 10, y[7], 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(9 * 100 / 10, y[7], 18, 6, 'ok', false, 'white', 'black', ok);
  }

};

SAdv = class SAdv extends State {
  constructor(name) {
    var y;
    super(name);
    this.controls.orange = new CColor(50, 2.5, 'orange');
    this.controls.white = new CColor(50, 9.5, 'white');
    this.controls.green = new CColor(50, 16.5, 'green');
    this.controls.reflection = new CDead(25, 21, 'reflection');
    this.controls.bonus = new CDead(50, 21, 'bonus');
    this.controls.hcp = new CDead(75, 21, 'handicap');
    y = 95;
    this.controls.basic = new CRounded(1 * 100 / 10, y, 18, 6, 'basic', false, 'white', 'black', () => {
      return currState = globals.states.SBasic;
    });
    this.controls.adv = new CRounded(3 * 100 / 10, y, 18, 6, 'adv', true, 'white', 'black');
    this.controls.b960 = new CRounded(5 * 100 / 10, y, 18, 6, '960', false, 'white', 'black', () => {
      return currState = globals.states.S960;
    });
    this.controls.cancel = new CRounded(7 * 100 / 10, y, 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(9 * 100 / 10, y, 18, 6, 'ok', false, 'white', 'black', ok);
    this.makeEditButtons();
  }

  makeEditButtons() {
    var clicker, diam, gb, i, j, k, len, letter, name, number, reader, ref, results, xoff, xsize, yoff, ysize;
    reader = (bitar, index) => {
      return bitar.pattern[index];
    };
    clicker = (bitar, index) => {
      var g, gs, gsi;
      bitar.flipBit(index);
      g = globals;
      gs = g.settings;
      gsi = gs.info;
      gsi.orange = getOrange();
      gsi.white = getWhite();
      gsi.green = getGreen();
      return this.controls.ok.visible = g.bits.minutes.nr > 0 && g.bits.handicap.nr < 60;
    };
    ref = range(3);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'Mst'[i];
      xsize = 100 / 4;
      ysize = 100 / 12;
      xoff = xsize;
      yoff = 33 + 2;
      diam = 7;
      gb = globals.bits;
      this.controls[letter] = new CDead(xoff + xsize * i, 26 + 1, 'minutes seconds tertier'.split(' ')[i]);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(7);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30, 60][j];
          name = letter + number;
          if (i !== 2 || j !== 6) {
            results1.push(this.controls[name] = new CAdv([gb.minutes, gb.seconds, gb.handicap][i], j, xoff + xsize * i, yoff + ysize * j, diam, number, true, reader, clicker));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  }

};

S960 = class S960 extends State {
  constructor(name) {
    var click960, diam, gbn, i, k, key, len, number, random960, reader960, ref, x, xi, y, yi;
    super(name);
    reader960 = (bits, index) => {
      return bits.pattern[index];
    };
    click960 = (bitar, index) => {
      var gb;
      bitar.flipBit(index);
      gb = globals.bits;
      globals.settings.chess960 = chess960(gb.number960.nr);
      return this.controls.ok.visible = gb.number960.nr < 960;
    };
    random960 = function() {
      var nr;
      nr = _.random(0, 959);
      globals.bits.number960.setNr(nr);
      return globals.settings.chess960 = chess960(nr);
    };
    x = [100 / 4, 200 / 4, 300 / 4];
    y = [-5, 40, 52, 64, 76, 78, 90, 95];
    diam = 10;
    this.controls.C960 = new C960(50, y[0], 100, 10);
    this.controls.CNumber = new CNumber(50, 25, () => {
      return globals.bits.number960.nr;
    });
    gbn = globals.bits.number960;
    ref = range(gbn.lst.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      number = gbn.lst[i];
      key = 'R' + number;
      xi = [0, 0, 0, 0, 1, 1, 1, 2, 2, 2][i];
      yi = [1, 2, 3, 4, 1, 2, 3, 1, 2, 3][i];
      this.controls[key] = new CAdv(gbn, i, x[xi], y[yi], diam, number, true, reader960, click960);
    }
    this.controls.random = new CRounded((x[1] + x[2]) / 2, y[4], 18, 6, 'random', false, 'white', 'black', random960);
    this.controls.basic = new CRounded(10, y[7], 18, 6, 'basic', false, 'white', 'black', () => {
      return currState = globals.states.SBasic;
    });
    this.controls.adv = new CRounded(30, y[7], 18, 6, 'adv', false, 'white', 'black', () => {
      return currState = globals.states.SAdv;
    });
    this.controls.b960 = new CRounded(50, y[7], 18, 6, '960', true, 'white', 'black');
    this.controls.cancel = new CRounded(70, y[7], 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(90, y[7], 18, 6, 'ok', false, 'white', 'black', ok);
  }

};

//############### p5 ###################
window.preload = function() {
  var k, len, ltr, ref, results;
  qr = loadImage('qr.png');
  sound = loadSound('key.mp3');
  ref = "KQRBN";
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    ltr = ref[k];
    results.push(chess[ltr] = loadImage(`chess\\${ltr}.png`));
  }
  return results;
};

window.windowResized = function() {
  resizeCanvas(innerWidth, innerHeight);
  return diag = sqrt(width * width + height * height);
};

window.setup = function() {
  var canvas;
  globals.settings = new CSettings(globals.bits);
  frameRate(globals.FRAMERATE);
  os = navigator.appVersion;
  if (os.indexOf('Linux') >= 0) {
    os = 'Android';
  }
  if (os.indexOf('Windows') >= 0) {
    os = 'Windows';
  }
  if (os.indexOf('Mac') >= 0) {
    os = 'Mac';
  }
  canvas = createCanvas(innerWidth, innerHeight);
  bodyScrollLock.disableBodyScroll(canvas); // Förhindrar att man kan scrolla canvas på iOS
  if (os === 'Android') {
    textFont('Droid Sans');
  }
  if (os === 'Mac') {
    textFont('Verdana');
  }
  if (os === 'Windows') {
    textFont('Lucida Sans Unicode');
  }
  globals.TOGGLE = os === 'Mac' ? 1 : 0;
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  createState('SClock', SClock);
  createState('SAdv', SAdv);
  createState('SBasic', SBasic);
  createState('S960', S960);
  currState = globals.states.SClock;
  push();
  textSize(18 + 9);
  tw = textWidth('0');
  return pop();
};

window.mousePressed = function() {
  if (os === 'Windows') {
    return currState.mouseClicked();
  }
};

window.touchStarted = function() {
  if (os !== 'Windows') {
    return currState.mouseClicked();
  }
};

window.draw = function() {
  var aspect;
  if (globals.TOGGLE === 0) {
    scale(width / 100, height / 100); // portrait
  } else {
    rotate(90);
    translate(0, -width);
    scale(height / 100, width / 100); // Landscape
  }
  strokeWeight(100 / height);
  push();
  background('black');
  globals.settings.tick();
  currState.draw();
  pop();
  globals.settings.save();
  return aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return text(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee