// Generated by CoffeeScript 2.5.1
  // TODO
  // Försämring av frameRate inträffar om man går från fullscreen till normal på Android
var BColor, BDead, BEdit, BImage, BPause, BRotate, BSettings, BShow, Button, FRAMERATE, HCP, HEARTBEAT, HOUR, MINUTE, SClock, SEditor, State, TOGGLE, backup, clone, createState, currState, d2, debugFunction, diag, draw, dump, getLocalCoords, hms, lastStorageSave, loadSettings, makeBits, mouseClicked, os, preload, pretty, prettyPair, qr, rates, saveSettings, settings, setup, sound, states, sumRate, trunc3, windowResized,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HCP = 1;

HOUR = 3600;

MINUTE = 60;

TOGGLE = 1; // 0=porträtt (Android) 1=landskap (Mac)

HEARTBEAT = 1000; // ms updates of localStorage

FRAMERATE = 30; // 10

settings = {};

backup = null;

states = {};

qr = null;

currState = null;

os = '';

sound = null;

lastStorageSave = new Date();

rates = [];

sumRate = 0;

diag = 0;

getLocalCoords = function() { // tar 3 microsekunder
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

trunc3 = function(x) {
  return Math.trunc(x * 1000) / 1000;
};

console.assert(trunc3(12.345678) === 12.345);

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (trunc3(h) > 0) {
    header += trunc3(h) + 'h';
  }
  if (trunc3(m) > 0) {
    header += trunc3(m) + 'm';
  }
  if (trunc3(s) > 0) {
    header += trunc3(s) + 's';
  }
  return header;
};

console.assert(pretty(3601) === '1h1s');

console.assert(pretty(123) === '2m3s');

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

console.assert(prettyPair(3601, 123) === '1h1s + 2m3s');

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.assert(d2(3) === '03');

hms = function(x) {
  var h, m, orig, s;
  orig = x;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  if (orig < 10) {
    s = Math.trunc(s * 10) / 10;
  }
  return [h, m, s];
};

chai.assert.deepEqual(hms(180), [0, 3, 0]);

chai.assert.deepEqual(hms(180.5), [0, 3, 0.5]);

clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

Button = class Button {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'white', fg1 = 'black') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
  }

  draw() {
    if (this.visible) {
      fill(this.bg);
      rect(this.x, this.y, this.w, this.h);
      textSize(4);
      fill(this.fg);
      return text(this.text, this.x, this.y);
    }
  }

  inside(x, y) {
    var ref, ref1;
    return (-this.w / 2 <= (ref = x - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

BPause = class BPause extends Button {
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    if (!settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

BSettings = class BSettings extends Button { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    var k, len, ref, v;
    if (settings.paused) {
      push();
      translate(this.x, this.y);
      scale([height / width, width / height][TOGGLE], 1);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      for (k = 0, len = ref.length; k < len; k++) {
        v = ref[k];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        pop();
      }
      return pop();
    }
  }

};

BImage = class BImage extends Button {
  constructor(x, y, w, h, image1) {
    super(x, y, w, h);
    this.image = image1;
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

BRotate = class BRotate extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super(x, y, w, h, '', bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = settings.clocks[this.player];
    [h, m, s] = hms(secs);
    if (h >= 1) {
      ss = h + 'h' + d2(m);
    } else {
      ss = m + ':' + (secs < 10 ? s.toFixed(1) : d2(s));
    }
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    if (settings.timeout && settings.player === this.player) {
      this.bg = 'red';
      this.fg = 'black';
    }
    fill(this.bg);
    rect(0, 0, this.w, this.h);
    fill(this.fg);
    textSize(18 + 9);
    text(ss, 0, -2);
    textSize(5 + 3);
    //text (if h==0 then 'm:ss' else 'h:mm'),0,17
    if (settings.bonuses[this.player] > 0) {
      text('+' + pretty(settings.bonuses[this.player]), 0, 17);
    }
    return pop();
  }

};

BEdit = class BEdit extends Button {
  constructor(x, y, w, h, text, fg = 'gray') {
    super(x, y, w, h, text, 'black', fg);
  }

  draw() {
    textSize(5);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

BDead = class BDead extends Button {
  constructor(x, y, text, fg = 'lightgray') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    textSize(4);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

BShow = class BShow extends BDead {
  constructor(x, y, fg = 'lightgray') {
    super(x, y, 0, 0, '', 'black', fg);
  }

  draw() {
    this.text = settings.show;
    return super.draw();
  }

};

BColor = class BColor extends Button {
  constructor(x, y, fg1) {
    super(x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor(name1) {
    this.name = name1;
    this.buttons = {};
    this.transitions = {};
    this.makeButtons();
  }

  createTrans(t) {
    var arr, k, len, results, target, word;
    target = void 0;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      word = arr[k];
      if (word === '=>') {
        results.push(target = void 0);
      } else if (word.indexOf('=>') === 0) {
        results.push(target = word.slice(2));
      } else {
        results.push(this.transitions[word] = target);
      }
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    return currState = states[this.transitions[key]];
  }

  draw() {
    var results, tkey;
    results = [];
    for (tkey in this.transitions) {
      if (tkey in this.buttons) {
        results.push(this.buttons[tkey].draw());
      } else {
        results.push(console.log('missing', tkey));
      }
    }
    return results;
  }

  mouseClicked() {
    var button, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.transitions) {
      if (this.transitions[key] === void 0) {
        continue;
      }
      button = this.buttons[key];
      if (button.visible && button.inside(x, y)) {
        this.message(key);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

SClock = class SClock extends State {
  constructor(name) {
    super(name);
    this.createTrans('=>SClock left pause qr right =>SEditor edit => show');
    settings.paused = true;
    settings.player = -1;
  }

  makeButtons() {
    this.buttons.left = new BRotate(50, 22, 100, 44, 180, 'orange', 'white', 0); // eg up
    this.buttons.right = new BRotate(50, 78, 100, 44, 0, 'green', 'white', 1); // eg down
    this.buttons.show = new BShow(22, 50, 'black');
    this.buttons.qr = new BImage(50, 50, 33, 12, qr);
    this.buttons.pause = new BPause(67, 50, 17, 12, 'white', 'black');
    return this.buttons.edit = new BSettings(83, 50, 17, 12, 'white', 'black');
  }

  uppdatera() {
    var clock;
    if (settings.paused) {
      return;
    }
    clock = settings.clocks[settings.player];
    if (clock > 0) {
      clock -= 1 / frameRate();
    }
    if (clock <= 0) {
      clock = 0;
      settings.timeout = true;
      settings.paused = true;
    }
    return settings.clocks[settings.player] = clock;
  }

  message(key) {
    var ref, ref1;
    if (key === 'left') {
      if (settings.timeout) {
        return;
      } else {
        if ((ref = settings.player) === (-1) || ref === 0) {
          sound.play();
          settings.clocks[0] += settings.bonuses[0];
        }
        settings.paused = false;
        settings.player = 1;
        this.buttons.left.fg = 'black';
        this.buttons.right.fg = 'white';
      }
    }
    if (key === 'right') {
      if (settings.timeout) {
        return;
      } else {
        if ((ref1 = settings.player) === (-1) || ref1 === 1) {
          sound.play();
          settings.clocks[1] += settings.bonuses[1];
        }
        settings.paused = false;
        settings.player = 0;
        this.buttons.left.fg = 'white';
        this.buttons.right.fg = 'black';
      }
    }
    if (key === 'pause') {
      settings.paused = true;
      this.buttons.left.fg = settings.player === 0 ? 'white' : 'black';
      this.buttons.right.fg = settings.player === 0 ? 'black' : 'white';
    }
    if (key === 'qr') {
      fullscreen(true);
      resizeCanvas(innerWidth, innerHeight);
    }
    if (key === 'edit') {
      backup = clone(settings); // to be used by cancel
      console.log('backup skapad', backup);
    }
    saveSettings();
    return super.message(key);
  }

  draw() {
    background('white');
    return super.draw();
  }

};

// =>SClock ok => orange white green reflection bonus hcp a b c d e f =>SEditor a0 a1 a2 a3 a4 a5 b0 b1 b2 b3 b4 b5 c0 c1 c2 c3 c4 c5 d0 d1 d2 d3 d4 d5 e0 e1 e2 e3 e4 e5 f0 f1 f2 f3 f4 f5
SEditor = class SEditor extends State {
  constructor(name) {
    var arr, i, j, k, l, len, len1, ref, ref1;
    super(name);
    //settings.sums = [0,0,0,0,0,0]
    arr = '=> H M S m s t bonus green hcp orange reflection white =>SClock cancel ok =>SEditor'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        arr.push('HMSmst'[i] + [1, 2, 4, 8, 15, 30][j]);
      }
    }
    this.createTrans(arr.join(' '));
  }

  makeButtons() {
    this.buttons.cancel = new Button(33, 93, 22, 8, 'cancel');
    this.buttons.ok = new Button(67, 93, 22, 8, 'ok');
    this.buttons.orange = new BColor(50, 3, 'orange');
    this.buttons.white = new BColor(50, 9, 'white');
    this.buttons.green = new BColor(50, 15, 'green');
    this.buttons.reflection = new BDead(25, 21, 'reflection');
    this.buttons.bonus = new BDead(66, 21, 'bonus');
    this.buttons.hcp = new BDead(92, 21, 'hcp');
    return this.makeEditButtons();
  }

  makeEditButtons() {
    var i, j, k, len, letter, name, number, ref, results, xoff, xsize, yoff, ysize;
    ref = range(6);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      xsize = 100 / 6;
      ysize = 100 / 10;
      xoff = xsize / 2;
      yoff = 33 + 2;
      this.buttons[letter] = new BDead(xoff + xsize * i, 26 + 2, 'HMSmst'[i]);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(6);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30][j];
          name = letter + number;
          results1.push(this.buttons[name] = new BEdit(xoff + xsize * i, yoff + ysize * j, xsize, ysize, number, 'gray'));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  message(key) {
    var col, k, len, letter, name, number, ref;
    if (key === 'cancel') {
      settings = clone(backup); // Återställ allt som behövs
      this.clearMatrix(); // Nollställ 6x6-matrisen
      ref = settings.bits;
      // Tänd aktuella siffror
      for (k = 0, len = ref.length; k < len; k++) {
        name = ref[k];
        this.buttons[name].fg = 'yellow';
      }
      settings.sums = this.calcSums();
    } else if (key === 'ok') {
      settings.clocks = [settings.players[0][0], settings.players[1][0]];
      settings.bonuses = [settings.players[0][1], settings.players[1][1]];
    } else {
      letter = key[0];
      col = 'HMSmst'.indexOf(letter);
      number = parseInt(key.slice(1));
      this.buttons[key].fg = this.buttons[key].fg === 'gray' ? 'yellow' : 'gray';
      settings.sums = this.calcSums();
      this.buttons.ok.visible = settings.sums[0] + settings.sums[1] + settings.sums[2] > 0 && settings.sums[5] < 60;
    }
    this.uppdatera();
    return super.message(key);
  }

  clearMatrix() {
    var i, j, k, len, letter, name, number, ref, results;
    ref = range(6);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(6);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30][j];
          name = letter + number;
          results1.push(this.buttons[name].fg = 'gray');
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  calcSums() {
    var i, j, k, l, len, len1, letter, name, number, ref, ref1, res;
    res = [0, 0, 0, 0, 0, 0];
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        number = [1, 2, 4, 8, 15, 30][j];
        name = letter + number;
        if (this.buttons[name].fg === 'yellow') {
          res[i] += number;
        }
      }
    }
    return res;
  }

  uppdatera() {
    settings.sums = this.calcSums();
    settings.show = this.compact();
    this.buttons.white.text = settings.show;
    this.handicap();
    if (settings.hcp === 0) {
      this.buttons.orange.text = '';
      return this.buttons.green.text = '';
    } else {
      this.buttons.orange.text = prettyPair(settings.players[0][0], settings.players[0][1]);
      return this.buttons.green.text = prettyPair(settings.players[1][0], settings.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'hmsms';
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (settings.sums[i] > 0) {
        header0 += settings.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (settings.sums[i] > 0) {
        header1 += settings.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += '+' + header1;
    }
    if (settings.sums[5] > 0) {
      header += '\n' + settings.sums[5];
    }
    return header;
  }

  handicap() {
    settings.hcp = settings.sums[5] / (HCP * 60); // 0.0 .. 1.0
    settings.refl = HOUR * settings.sums[0] + MINUTE * settings.sums[1] + settings.sums[2];
    settings.bonus = MINUTE * settings.sums[3] + settings.sums[4];
    settings.players = [];
    settings.players[0] = [settings.refl + settings.refl * settings.hcp, settings.bonus + settings.bonus * settings.hcp];
    return settings.players[1] = [settings.refl - settings.refl * settings.hcp, settings.bonus - settings.bonus * settings.hcp];
  }

};

//##################################
preload = function() {
  qr = loadImage('qr.png');
  return sound = loadSound('key.mp3');
};

windowResized = function() {
  resizeCanvas(innerWidth, innerHeight);
  return diag = sqrt(width * width + height * height);
};

setup = function() {
  var canvas, k, key, len, ref;
  frameRate(FRAMERATE);
  os = navigator.appVersion;
  if (os.indexOf('Linux') >= 0) {
    os = 'Android';
  }
  if (os.indexOf('Windows') >= 0) {
    os = 'Windows';
  }
  if (os.indexOf('Mac') >= 0) {
    os = 'Mac';
  }
  // os = 'Android'
  canvas = createCanvas(innerWidth, innerHeight);
  bodyScrollLock.disableBodyScroll(canvas); // Förhindrar att man kan scrolla canvas på iOS
  if (os === 'Android') {
    textFont('Droid Sans');
  }
  if (os === 'Mac') {
    textFont('Verdana');
  }
  if (os === 'Windows') {
    textFont('Lucida Sans Unicode');
  }
  TOGGLE = os === 'Mac' ? 1 : 0;
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  createState('SClock', SClock);
  createState('SEditor', SEditor);
  settings = loadSettings();
  states.SEditor.uppdatera();
  ref = settings.bits;
  for (k = 0, len = ref.length; k < len; k++) {
    key = ref[k];
    states.SEditor.message(key);
  }
  states.SEditor.uppdatera();
  
  //dump()
  return currState = states.SClock;
};

//checkButtons()
//checkStates()
makeBits = function() {
  var bits, button, key;
  bits = [];
  for (key in states.SEditor.buttons) {
    if (key !== 'ok' && key !== 'cancel') {
      button = states.SEditor.buttons[key];
      if (button.fg === 'yellow') {
        bits.push(key);
      }
    }
  }
  return bits;
};

dump = function() { // log everything
  var button, results, skey, state, tkey, transition;
  results = [];
  for (skey in states) {
    state = states[skey];
    console.log('');
    console.log('State', state);
    results.push((function() {
      var results1;
      results1 = [];
      for (tkey in state.transitions) {
        transition = state.transitions[tkey];
        button = state.buttons[tkey];
        if (transition === void 0) {
          transition = 'nothing';
        }
        results1.push(console.log(' ', tkey, '=>', transition, button));
      }
      return results1;
    })());
  }
  return results;
};

mouseClicked = function() {
  return currState.mouseClicked();
};

draw = function() {
  var aspect;
  if (TOGGLE === 0) {
    scale(width / 100, height / 100); // portrait
  } else {
    rotate(90);
    translate(0, -width);
    scale(height / 100, width / 100); // Landscape
  }
  strokeWeight(100 / height);
  push();
  background('black');
  states.SClock.uppdatera();
  currState.draw();
  pop();
  saveSettings();
  // debug
  aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return text(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
  return debugFunction();
};

debugFunction = function() {
  var oldest;
  rates.push(frameRate());
  if (rates.length > 100) {
    oldest = rates.shift();
  } else {
    oldest = rates[0];
  }
  sumRate += _.last(rates) - oldest;
  // # os = navigator.appVersion
  textSize(2.5);
  //text 'Click QR => Fullscreen',50,12
  return text(Math.round(sumRate), 95, 5);
};

// text currState.name,50,3
// # fill 'green'
// text round3(states.SEditor.bonuses[0]),10,3
// text round3(states.SEditor.clocks[0]),25,3
// text round3(states.SEditor.clocks[1]),75,3
// text round3(states.SEditor.bonuses[1]),90,3

// text states.SClock.paused,30,2.5
// text states.SClock.player,70,2.5

// currState.draw()
loadSettings = function() {
  if (localStorage.settings) {
    settings = JSON.parse(localStorage.settings);
    settings.paused = true;
    console.log('fetching stored settings', settings);
  } else {
    settings = {};
    settings.show = '3m2s';
    settings.bits = ['M1', 'M2', 's2'];
    settings.clocks = [180, 180];
    settings.bonuses = [2, 2];
    settings.sums = [0, 3, 0, 0, 2, 0];
    settings.player = -1;
    settings.timeout = false;
    settings.paused = true;
    console.log('fetching default settings', settings);
    localStorage.settings = JSON.stringify(settings);
  }
  return settings;
};

saveSettings = function() {
  var d;
  d = new Date();
  if (d - lastStorageSave < HEARTBEAT) { // ms
    return;
  }
  lastStorageSave = d;
  settings.bits = makeBits();
  return localStorage.settings = JSON.stringify(settings);
};

// checkButtons = ->
// 	console.log 'checkButtons started'
// 	for bkey of buttons
// 		button = buttons[bkey]
// 		found = false
// 		for skey of states
// 			state = states[skey]
// 			if bkey of state.transitions then found = true
// 		if not found then console.log '  Button',bkey,'not used by any state'
// 	console.log 'checkButtons done!'

// checkStates = ->
// 	console.log 'checkStates started'
// 	for skey of states
// 		state = states[skey]
// 		found = false
// 		for tkey of state.transitions
// 			transition = state.transitions[tkey]
// 			if transition != undefined and transition not of states then console.log transition,'not found'
// 			if tkey of buttons then found = true else info = tkey
// 		if not found then console.log '  State',skey,'Transition',tkey, 'not defined'
// 	console.log 'checkStates done!'

// arr = []
// for i in range 60
// 	arr.push "#{i} #{Math.round((60+i)/(60-i)*1000)/1000}"
// console.log arr.join "\n"

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNxRjs7QUFBQSxJQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxLQUFBLEVBQUEsV0FBQSxFQUFBLFNBQUEsRUFBQSxFQUFBLEVBQUEsYUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLGNBQUEsRUFBQSxHQUFBLEVBQUEsZUFBQSxFQUFBLFlBQUEsRUFBQSxRQUFBLEVBQUEsWUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLFVBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxhQUFBO0VBQUE7O0FBRXJGLEdBQUEsR0FBTTs7QUFDTixJQUFBLEdBQU87O0FBQ1AsTUFBQSxHQUFTOztBQUVULE1BQUEsR0FBUyxFQU40RTs7QUFPckYsU0FBQSxHQUFZLEtBUHlFOztBQVNyRixTQUFBLEdBQVksR0FUeUU7O0FBV3JGLFFBQUEsR0FBVyxDQUFBOztBQUNYLE1BQUEsR0FBUzs7QUFDVCxNQUFBLEdBQVMsQ0FBQTs7QUFFVCxFQUFBLEdBQUs7O0FBQ0wsU0FBQSxHQUFZOztBQUNaLEVBQUEsR0FBSzs7QUFDTCxLQUFBLEdBQVE7O0FBQ1IsZUFBQSxHQUFrQixJQUFJLElBQUosQ0FBQTs7QUFFbEIsS0FBQSxHQUFROztBQUNSLE9BQUEsR0FB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SUFBSSxJQUFKLENBQUE7RUFDSixJQUFHLENBQUEsR0FBSSxlQUFKLEdBQXNCLFNBQXpCO0FBQXdDLFdBQXhDOztFQUNBLGVBQUEsR0FBa0I7RUFDbEIsUUFBUSxDQUFDLElBQVQsR0FBZ0IsUUFBQSxDQUFBO1NBQ2hCLFlBQVksQ0FBQyxRQUFiLEdBQXdCLElBQUksQ0FBQyxTQUFMLENBQWUsUUFBZjtBQUxWOztBQXRpQnNFIiwic291cmNlc0NvbnRlbnQiOlsiIyBUT0RPXHJcbiMgRsO2cnPDpG1yaW5nIGF2IGZyYW1lUmF0ZSBpbnRyw6RmZmFyIG9tIG1hbiBnw6VyIGZyw6VuIGZ1bGxzY3JlZW4gdGlsbCBub3JtYWwgcMOlIEFuZHJvaWRcclxuXHJcbkhDUCA9IDFcclxuSE9VUiA9IDM2MDBcclxuTUlOVVRFID0gNjBcclxuXHJcblRPR0dMRSA9IDEgIyAwPXBvcnRyw6R0dCAoQW5kcm9pZCkgMT1sYW5kc2thcCAoTWFjKVxyXG5IRUFSVEJFQVQgPSAxMDAwICMgbXMgdXBkYXRlcyBvZiBsb2NhbFN0b3JhZ2VcclxuXHJcbkZSQU1FUkFURSA9IDMwICMgMTBcclxuXHJcbnNldHRpbmdzID0ge31cclxuYmFja3VwID0gbnVsbFxyXG5zdGF0ZXMgPSB7fVxyXG5cclxucXIgPSBudWxsXHJcbmN1cnJTdGF0ZSA9IG51bGxcclxub3MgPSAnJ1xyXG5zb3VuZCA9IG51bGxcclxubGFzdFN0b3JhZ2VTYXZlID0gbmV3IERhdGUoKVxyXG5cclxucmF0ZXMgPSBbXVxyXG5zdW1SYXRlID0gMFxyXG5cclxuZGlhZyA9IDAgXHJcblxyXG5cclxuZ2V0TG9jYWxDb29yZHMgPSAtPiAjIHRhciAzIG1pY3Jvc2VrdW5kZXJcclxuXHRtYXRyaXggPSBkcmF3aW5nQ29udGV4dC5nZXRUcmFuc2Zvcm0oKVxyXG5cdHBkID0gcGl4ZWxEZW5zaXR5KClcclxuXHRtYXRyaXguaW52ZXJzZSgpLnRyYW5zZm9ybVBvaW50IG5ldyBET01Qb2ludCBtb3VzZVggKiBwZCxtb3VzZVkgKiBwZFxyXG5cclxuY3JlYXRlU3RhdGUgPSAoa2V5LGtsYXNzKSAtPiBzdGF0ZXNba2V5XSA9IG5ldyBrbGFzcyBrZXlcclxuXHJcbnRydW5jMyA9ICh4KSAtPiBNYXRoLnRydW5jKHgqMTAwMCkvMTAwMFxyXG5jb25zb2xlLmFzc2VydCB0cnVuYzMoMTIuMzQ1Njc4KT09MTIuMzQ1XHJcblxyXG5wcmV0dHkgPSAodG90KSAtPlxyXG5cdHMgPSB0b3QgJSA2MFxyXG5cdHRvdCA9ICh0b3QgLSBzKSAvIDYwXHJcblx0bSA9IHRvdCAlIDYwXHJcblx0dG90ID0gKHRvdCAtIG0pIC8gNjBcclxuXHRoID0gdG90ICUgNjBcclxuXHRoZWFkZXIgPSAnJ1xyXG5cdGlmIHRydW5jMyhoKT4wIHRoZW4gaGVhZGVyICs9IHRydW5jMyhoKSArICdoJ1xyXG5cdGlmIHRydW5jMyhtKT4wIHRoZW4gaGVhZGVyICs9IHRydW5jMyhtKSArICdtJ1xyXG5cdGlmIHRydW5jMyhzKT4wIHRoZW4gaGVhZGVyICs9IHRydW5jMyhzKSArICdzJ1xyXG5cdGhlYWRlclxyXG5jb25zb2xlLmFzc2VydCBwcmV0dHkoMzYwMSkgPT0gJzFoMXMnXHJcbmNvbnNvbGUuYXNzZXJ0IHByZXR0eSgxMjMpID09ICcybTNzJ1xyXG5cclxucHJldHR5UGFpciA9IChhLGIpIC0+XHJcblx0c2VwYXJhdG9yID0gaWYgcHJldHR5KGIpICE9ICcnIHRoZW4gJyArICcgZWxzZSAnJ1xyXG5cdHByZXR0eShhKSArIHNlcGFyYXRvciArIHByZXR0eShiKVxyXG5jb25zb2xlLmFzc2VydCBwcmV0dHlQYWlyKDM2MDEsMTIzKSA9PSAnMWgxcyArIDJtM3MnXHJcblxyXG5kMiA9ICh4KSAtPlxyXG5cdHggPSBNYXRoLnRydW5jIHhcclxuXHRpZiB4IDwgMTAgdGhlbiAnMCcreCBlbHNlIHhcclxuY29uc29sZS5hc3NlcnQgZDIoMykgPT0gJzAzJ1xyXG5cclxuaG1zID0gKHgpIC0+XHJcblx0b3JpZyA9IHhcclxuXHRzID0geCAlJSA2MFxyXG5cdHggPSB4IC8vIDYwXHJcblx0bSA9IHggJSUgNjBcclxuXHR4ID0geCAvLyA2MFxyXG5cdGggPSB4XHJcblx0aWYgb3JpZyA8IDEwIHRoZW4gcyA9IE1hdGgudHJ1bmMocyoxMCkvMTAgXHJcblx0W2gsbSxzXSBcclxuY2hhaS5hc3NlcnQuZGVlcEVxdWFsIGhtcygxODApLCBbMCwzLDBdXHJcbmNoYWkuYXNzZXJ0LmRlZXBFcXVhbCBobXMoMTgwLjUpLCBbMCwzLDAuNV1cclxuXHJcbmNsb25lID0gKHgpIC0+IEpTT04ucGFyc2UgSlNPTi5zdHJpbmdpZnkgeFxyXG5cclxuY2xhc3MgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoQHgsQHksQHcsQGgsQHRleHQ9JycsQGJnPSd3aGl0ZScsQGZnPSdibGFjaycpIC0+XHJcblx0XHRAdmlzaWJsZSA9IHRydWVcclxuXHRcdEB4ID0gTWF0aC5yb3VuZCBAeFxyXG5cdFx0QHkgPSBNYXRoLnJvdW5kIEB5XHJcblx0XHRAdyA9IE1hdGgucm91bmQgQHdcclxuXHRcdEBoID0gTWF0aC5yb3VuZCBAaFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0aWYgQHZpc2libGVcclxuXHRcdFx0ZmlsbCBAYmdcclxuXHRcdFx0cmVjdCBAeCxAeSxAdyxAaFxyXG5cdFx0XHR0ZXh0U2l6ZSA0XHJcblx0XHRcdGZpbGwgQGZnXHJcblx0XHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHRpbnNpZGUgOiAoeCx5KSAtPiAtQHcvMiA8PSB4LUB4IDw9IEB3LzIgYW5kIC1AaC8yIDw9IHktQHkgPD0gQGgvMlxyXG5cclxuY2xhc3MgQlBhdXNlIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LHc9MCxoPTAsQGJnPSd3aGl0ZScsQGZnPSdibGFjaycpIC0+XHJcblx0XHRzdXBlciB4LHksdyxoXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRpZiBub3Qgc2V0dGluZ3MucGF1c2VkXHJcblx0XHRcdGZpbGwgQGZnXHJcblx0XHRcdHJlY3QgQHgtMS43NSxAeSwzLDZcclxuXHRcdFx0cmVjdCBAeCsxLjc1LEB5LDMsNlxyXG5cclxuY2xhc3MgQlNldHRpbmdzIGV4dGVuZHMgQnV0dG9uICMgS3VnZ2hqdWxcclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksdz0wLGg9MCxAYmc9J3doaXRlJyxAZmc9J2JsYWNrJykgLT5cclxuXHRcdHN1cGVyIHgseSx3LGhcclxuXHRkcmF3IDogLT5cclxuXHRcdGlmIHNldHRpbmdzLnBhdXNlZFxyXG5cdFx0XHRwdXNoKClcclxuXHRcdFx0dHJhbnNsYXRlIEB4LEB5XHJcblx0XHRcdHNjYWxlIFtoZWlnaHQvd2lkdGgsd2lkdGgvaGVpZ2h0XVtUT0dHTEVdLDFcclxuXHRcdFx0ZmlsbCBAZmdcclxuXHRcdFx0Y2lyY2xlIDAsMCw2XHJcblx0XHRcdGZpbGwgQGJnXHJcblx0XHRcdGNpcmNsZSAwLDAsM1xyXG5cdFx0XHRmaWxsIEBmZ1xyXG5cdFx0XHRmb3IgdiBpbiByYW5nZSAwLDM2MCw0NVxyXG5cdFx0XHRcdHB1c2goKVxyXG5cdFx0XHRcdHJvdGF0ZSB2XHJcblx0XHRcdFx0dHJhbnNsYXRlIDMsMFxyXG5cdFx0XHRcdHN0cm9rZSBAZmdcclxuXHRcdFx0XHRyZWN0IDAsMCwxLDFcclxuXHRcdFx0XHRwb3AoKVxyXG5cdFx0XHRwb3AoKVxyXG5cclxuY2xhc3MgQkltYWdlIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LHcsaCxAaW1hZ2UpIC0+XHJcblx0XHRzdXBlciB4LHksdyxoXHJcblx0ZHJhdyA6ICAtPlxyXG5cdFx0aWYgQGltYWdlXHJcblx0XHRcdHcgPSBAaCAqIFtoZWlnaHQvd2lkdGgsd2lkdGgvaGVpZ2h0XVtUT0dHTEVdXHJcblx0XHRcdGltYWdlIEBpbWFnZSxAeC13LzIsIDAuMDc1K0B5LUBoLzIsIHcsIEBoXHJcblxyXG5jbGFzcyBCUm90YXRlIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LHcsaCxAZGVncmVlcyxiZyxmZyxAcGxheWVyKSAtPiBcclxuXHRcdHN1cGVyIHgseSx3LGgsJycsYmcsZmdcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRzZWNzID0gc2V0dGluZ3MuY2xvY2tzW0BwbGF5ZXJdXHJcblx0XHRbaCxtLHNdID0gaG1zIHNlY3NcclxuXHRcdGlmIGggPj0gMSB0aGVuIHNzID0gaCArICdoJyArIGQyIG1cclxuXHRcdGVsc2Ugc3MgPSBtICsgJzonICsgaWYgc2VjcyA8IDEwICB0aGVuIHMudG9GaXhlZCAxIGVsc2UgZDIgc1xyXG5cdFx0bm9TdHJva2UoKVxyXG5cdFx0cHVzaCgpXHJcblx0XHR0cmFuc2xhdGUgQHgsQHlcclxuXHRcdHJvdGF0ZSBAZGVncmVlc1xyXG5cclxuXHRcdGlmIHNldHRpbmdzLnRpbWVvdXQgYW5kIHNldHRpbmdzLnBsYXllciA9PSBAcGxheWVyXHJcblx0XHRcdEBiZyA9ICdyZWQnXHJcblx0XHRcdEBmZyA9ICdibGFjaydcclxuXHJcblx0XHRmaWxsIEBiZ1xyXG5cdFx0cmVjdCAwLDAsQHcsQGhcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0U2l6ZSAxOCs5XHJcblx0XHR0ZXh0IHNzLDAsLTJcclxuXHRcdHRleHRTaXplIDUrM1xyXG5cclxuXHRcdCN0ZXh0IChpZiBoPT0wIHRoZW4gJ206c3MnIGVsc2UgJ2g6bW0nKSwwLDE3XHJcblx0XHRpZiBzZXR0aW5ncy5ib251c2VzW0BwbGF5ZXJdID4gMFxyXG5cdFx0XHR0ZXh0ICcrJyArIHByZXR0eShzZXR0aW5ncy5ib251c2VzW0BwbGF5ZXJdKSwwLDE3XHJcblxyXG5cdFx0cG9wKClcclxuXHJcbmNsYXNzIEJFZGl0IGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LHcsaCx0ZXh0LGZnPSdncmF5JykgLT4gXHJcblx0XHRzdXBlciB4LHksdyxoLHRleHQsJ2JsYWNrJyxmZ1xyXG5cdGRyYXcgOiAtPlxyXG5cdFx0dGV4dFNpemUgNVxyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHJcbmNsYXNzIEJEZWFkIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LHRleHQsZmc9J2xpZ2h0Z3JheScpIC0+IFxyXG5cdFx0c3VwZXIgeCx5LDAsMCx0ZXh0LCdibGFjaycsZmdcclxuXHRkcmF3IDogLT5cclxuXHRcdHRleHRTaXplIDRcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblx0XHRcclxuY2xhc3MgQlNob3cgZXh0ZW5kcyBCRGVhZFxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSxmZz0nbGlnaHRncmF5JykgLT4gXHJcblx0XHRzdXBlciB4LHksMCwwLCcnLCdibGFjaycsZmdcclxuXHRkcmF3IDogLT5cclxuXHRcdEB0ZXh0ID0gc2V0dGluZ3Muc2hvd1xyXG5cdFx0c3VwZXIoKVxyXG5cclxuY2xhc3MgQkNvbG9yIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LEBmZykgLT4gc3VwZXIgeCx5LDAsMFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0cHVzaCgpXHJcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdFx0dGV4dFNpemUgNFxyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHRcdHBvcCgpXHJcblxyXG5jbGFzcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG5cdFx0QGJ1dHRvbnMgPSB7fVxyXG5cdFx0QHRyYW5zaXRpb25zID0ge31cclxuXHRcdEBtYWtlQnV0dG9ucygpXHJcblxyXG5cdGNyZWF0ZVRyYW5zIDogKHQpIC0+XHJcblx0XHR0YXJnZXQgPSB1bmRlZmluZWRcclxuXHRcdGFyciA9IHQuc3BsaXQgJyAnXHJcblx0XHRmb3Igd29yZCBpbiBhcnJcclxuXHRcdFx0aWYgd29yZCA9PSAnPT4nIHRoZW4gdGFyZ2V0ID0gdW5kZWZpbmVkXHJcblx0XHRcdGVsc2UgaWYgd29yZC5pbmRleE9mKCc9PicpID09IDAgdGhlbiB0YXJnZXQgPSB3b3JkLnNsaWNlIDJcclxuXHRcdFx0ZWxzZSBAdHJhbnNpdGlvbnNbd29yZF0gPSB0YXJnZXRcclxuXHJcblx0bWVzc2FnZSA6IChrZXkpIC0+XHJcblx0XHRjb25zb2xlLmxvZyBcImNsaWNrZWQgI3tAbmFtZX0uI3trZXl9ID0+ICN7QHRyYW5zaXRpb25zW2tleV19XCJcclxuXHRcdGN1cnJTdGF0ZSA9IHN0YXRlc1tAdHJhbnNpdGlvbnNba2V5XV1cclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRmb3IgdGtleSBvZiBAdHJhbnNpdGlvbnNcclxuXHRcdFx0aWYgdGtleSBvZiBAYnV0dG9uc1xyXG5cdFx0XHRcdEBidXR0b25zW3RrZXldLmRyYXcoKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0Y29uc29sZS5sb2cgJ21pc3NpbmcnLHRrZXlcclxuXHJcblx0bW91c2VDbGlja2VkIDogLT5cclxuXHRcdHt4LHl9ID0gZ2V0TG9jYWxDb29yZHMoKVxyXG5cdFx0Zm9yIGtleSBvZiBAdHJhbnNpdGlvbnNcclxuXHRcdFx0aWYgQHRyYW5zaXRpb25zW2tleV0gPT0gdW5kZWZpbmVkIHRoZW4gY29udGludWVcclxuXHRcdFx0YnV0dG9uID0gQGJ1dHRvbnNba2V5XVxyXG5cdFx0XHRpZiBidXR0b24udmlzaWJsZSBhbmQgYnV0dG9uLmluc2lkZSB4LCB5XHJcblx0XHRcdFx0QG1lc3NhZ2Uga2V5XHJcblx0XHRcdFx0YnJlYWtcclxuXHJcbmNsYXNzIFNDbG9jayBleHRlbmRzIFN0YXRlXHJcblxyXG5cdGNvbnN0cnVjdG9yIDogKG5hbWUpIC0+XHJcblx0XHRzdXBlciBuYW1lXHJcblx0XHRAY3JlYXRlVHJhbnMgJz0+U0Nsb2NrIGxlZnQgcGF1c2UgcXIgcmlnaHQgPT5TRWRpdG9yIGVkaXQgPT4gc2hvdydcclxuXHRcdHNldHRpbmdzLnBhdXNlZCA9IHRydWVcclxuXHRcdHNldHRpbmdzLnBsYXllciA9IC0xXHJcblxyXG5cdG1ha2VCdXR0b25zIDogLT5cclxuXHRcdEBidXR0b25zLmxlZnQgID0gbmV3IEJSb3RhdGUgNTAsIDIyLCAxMDAsIDQ0LCAxODAsICdvcmFuZ2UnLCAnd2hpdGUnLCAwICMgZWcgdXBcclxuXHRcdEBidXR0b25zLnJpZ2h0ID0gbmV3IEJSb3RhdGUgNTAsIDc4LCAxMDAsIDQ0LCAgIDAsICdncmVlbicsICAnd2hpdGUnLCAxICMgZWcgZG93blxyXG5cclxuXHRcdEBidXR0b25zLnNob3cgID0gbmV3IEJTaG93ICAgICAyMiwgNTAsICdibGFjaydcclxuXHRcdEBidXR0b25zLnFyICAgID0gbmV3IEJJbWFnZSAgICA1MCwgNTAsIDMzLCAxMiwgcXJcclxuXHRcdEBidXR0b25zLnBhdXNlID0gbmV3IEJQYXVzZSAgICA2NywgNTAsIDE3LCAxMiwgJ3doaXRlJywgJ2JsYWNrJ1xyXG5cdFx0QGJ1dHRvbnMuZWRpdCAgPSBuZXcgQlNldHRpbmdzIDgzLCA1MCwgMTcsIDEyLCAnd2hpdGUnLCAnYmxhY2snXHJcblxyXG5cdHVwcGRhdGVyYSA6IC0+XHJcblx0XHRpZiBzZXR0aW5ncy5wYXVzZWQgdGhlbiByZXR1cm5cclxuXHRcdGNsb2NrID0gc2V0dGluZ3MuY2xvY2tzW3NldHRpbmdzLnBsYXllcl1cclxuXHRcdGlmIGNsb2NrID4gMCB0aGVuIGNsb2NrIC09IDEvZnJhbWVSYXRlKClcclxuXHRcdGlmIGNsb2NrIDw9IDBcclxuXHRcdFx0Y2xvY2sgPSAwXHJcblx0XHRcdHNldHRpbmdzLnRpbWVvdXQgPSB0cnVlXHJcblx0XHRcdHNldHRpbmdzLnBhdXNlZCA9IHRydWVcclxuXHJcblx0XHRzZXR0aW5ncy5jbG9ja3Nbc2V0dGluZ3MucGxheWVyXSA9IGNsb2NrXHJcblxyXG5cdG1lc3NhZ2UgOiAoa2V5KSAtPlxyXG5cdFx0aWYga2V5ID09ICdsZWZ0J1xyXG5cdFx0XHRpZiBzZXR0aW5ncy50aW1lb3V0IHRoZW4gcmV0dXJuXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpZiBzZXR0aW5ncy5wbGF5ZXIgaW4gWy0xLDBdXHJcblx0XHRcdFx0XHRzb3VuZC5wbGF5KClcclxuXHRcdFx0XHRcdHNldHRpbmdzLmNsb2Nrc1swXSArPSBzZXR0aW5ncy5ib251c2VzWzBdXHJcblx0XHRcdFx0c2V0dGluZ3MucGF1c2VkID0gZmFsc2VcclxuXHRcdFx0XHRzZXR0aW5ncy5wbGF5ZXIgPSAxXHJcblx0XHRcdFx0QGJ1dHRvbnMubGVmdC5mZyA9ICdibGFjaydcclxuXHRcdFx0XHRAYnV0dG9ucy5yaWdodC5mZyA9ICd3aGl0ZSdcclxuXHJcblx0XHRpZiBrZXkgPT0gJ3JpZ2h0J1xyXG5cdFx0XHRpZiBzZXR0aW5ncy50aW1lb3V0IHRoZW4gcmV0dXJuXHJcblx0XHRcdGVsc2VcclxuXHRcdFx0XHRpZiBzZXR0aW5ncy5wbGF5ZXIgaW4gWy0xLDFdXHJcblx0XHRcdFx0XHRzb3VuZC5wbGF5KClcclxuXHRcdFx0XHRcdHNldHRpbmdzLmNsb2Nrc1sxXSArPSBzZXR0aW5ncy5ib251c2VzWzFdXHJcblx0XHRcdFx0c2V0dGluZ3MucGF1c2VkID0gZmFsc2VcclxuXHRcdFx0XHRzZXR0aW5ncy5wbGF5ZXIgPSAwXHJcblx0XHRcdFx0QGJ1dHRvbnMubGVmdC5mZyA9ICd3aGl0ZSdcclxuXHRcdFx0XHRAYnV0dG9ucy5yaWdodC5mZyA9ICdibGFjaydcclxuXHJcblx0XHRpZiBrZXkgPT0gJ3BhdXNlJ1xyXG5cdFx0XHRzZXR0aW5ncy5wYXVzZWQgPSB0cnVlXHJcblx0XHRcdEBidXR0b25zLmxlZnQuZmcgPSBpZiBzZXR0aW5ncy5wbGF5ZXIgPT0gMCB0aGVuICd3aGl0ZScgZWxzZSAnYmxhY2snXHJcblx0XHRcdEBidXR0b25zLnJpZ2h0LmZnID0gaWYgc2V0dGluZ3MucGxheWVyID09IDAgdGhlbiAnYmxhY2snIGVsc2UgJ3doaXRlJ1xyXG5cclxuXHRcdGlmIGtleSA9PSAncXInXHJcblx0XHRcdGZ1bGxzY3JlZW4gdHJ1ZVxyXG5cdFx0XHRyZXNpemVDYW52YXMgaW5uZXJXaWR0aCwgaW5uZXJIZWlnaHRcclxuXHJcblx0XHRpZiBrZXkgPT0gJ2VkaXQnXHJcblx0XHRcdGJhY2t1cCA9IGNsb25lIHNldHRpbmdzICMgdG8gYmUgdXNlZCBieSBjYW5jZWxcclxuXHRcdFx0Y29uc29sZS5sb2cgJ2JhY2t1cCBza2FwYWQnLGJhY2t1cFxyXG5cclxuXHRcdHNhdmVTZXR0aW5ncygpXHJcblx0XHRzdXBlciBrZXlcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRiYWNrZ3JvdW5kICd3aGl0ZSdcclxuXHRcdHN1cGVyKClcclxuXHJcbiMgPT5TQ2xvY2sgb2sgPT4gb3JhbmdlIHdoaXRlIGdyZWVuIHJlZmxlY3Rpb24gYm9udXMgaGNwIGEgYiBjIGQgZSBmID0+U0VkaXRvciBhMCBhMSBhMiBhMyBhNCBhNSBiMCBiMSBiMiBiMyBiNCBiNSBjMCBjMSBjMiBjMyBjNCBjNSBkMCBkMSBkMiBkMyBkNCBkNSBlMCBlMSBlMiBlMyBlNCBlNSBmMCBmMSBmMiBmMyBmNCBmNVxyXG5jbGFzcyBTRWRpdG9yIGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChuYW1lKSAtPlxyXG5cdFx0c3VwZXIgbmFtZVxyXG5cdFx0I3NldHRpbmdzLnN1bXMgPSBbMCwwLDAsMCwwLDBdXHJcblx0XHRhcnIgPSAnPT4gSCBNIFMgbSBzIHQgYm9udXMgZ3JlZW4gaGNwIG9yYW5nZSByZWZsZWN0aW9uIHdoaXRlID0+U0Nsb2NrIGNhbmNlbCBvayA9PlNFZGl0b3InLnNwbGl0ICcgJ1xyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgNlxyXG5cdFx0XHRmb3IgaiBpbiByYW5nZSA2XHJcblx0XHRcdFx0YXJyLnB1c2ggJ0hNU21zdCdbaV0gKyBbMSwyLDQsOCwxNSwzMF1bal1cclxuXHRcdEBjcmVhdGVUcmFucyBhcnIuam9pbiAnICdcclxuXHJcblx0bWFrZUJ1dHRvbnMgOiAtPlxyXG5cclxuXHRcdEBidXR0b25zLmNhbmNlbCAgICAgPSBuZXcgQnV0dG9uIDMzLDkzLCAyMiw4LCAnY2FuY2VsJ1xyXG5cdFx0QGJ1dHRvbnMub2sgICAgICAgICA9IG5ldyBCdXR0b24gNjcsOTMsIDIyLDgsICdvaydcclxuXHRcdEBidXR0b25zLm9yYW5nZSAgICAgPSBuZXcgQkNvbG9yIDUwLCAzLCdvcmFuZ2UnXHJcblx0XHRAYnV0dG9ucy53aGl0ZSAgICAgID0gbmV3IEJDb2xvciA1MCwgOSwnd2hpdGUnXHJcblx0XHRAYnV0dG9ucy5ncmVlbiAgICAgID0gbmV3IEJDb2xvciA1MCwxNSwnZ3JlZW4nXHJcblx0XHRAYnV0dG9ucy5yZWZsZWN0aW9uID0gbmV3IEJEZWFkICAyNSwyMSwncmVmbGVjdGlvbidcclxuXHRcdEBidXR0b25zLmJvbnVzICAgICAgPSBuZXcgQkRlYWQgIDY2LDIxLCdib251cydcclxuXHRcdEBidXR0b25zLmhjcCAgICAgICAgPSBuZXcgQkRlYWQgIDkyLDIxLCdoY3AnXHJcblx0XHRAbWFrZUVkaXRCdXR0b25zKClcclxuXHJcblx0bWFrZUVkaXRCdXR0b25zIDogLT5cclxuXHRcdGZvciBpIGluIHJhbmdlIDZcclxuXHRcdFx0bGV0dGVyID0gJ0hNU21zdCdbaV1cclxuXHRcdFx0eHNpemUgPSAxMDAvNlxyXG5cdFx0XHR5c2l6ZSA9IDEwMC8xMFxyXG5cdFx0XHR4b2ZmID0geHNpemUvMlxyXG5cdFx0XHR5b2ZmID0gMzMrMlxyXG5cdFx0XHRAYnV0dG9uc1tsZXR0ZXJdID0gbmV3IEJEZWFkIHhvZmYreHNpemUqaSwgMjYrMiwgJ0hNU21zdCdbaV1cclxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgNlxyXG5cdFx0XHRcdG51bWJlciA9IFsxLDIsNCw4LDE1LDMwXVtqXVxyXG5cdFx0XHRcdG5hbWUgPSBsZXR0ZXIgKyBudW1iZXJcclxuXHRcdFx0XHRAYnV0dG9uc1tuYW1lXSA9IG5ldyBCRWRpdCB4b2ZmK3hzaXplKmksIHlvZmYreXNpemUqaiwgeHNpemUsIHlzaXplLCBudW1iZXIsICdncmF5J1xyXG5cclxuXHRtZXNzYWdlIDogKGtleSkgLT5cclxuXHJcblx0XHRpZiBrZXkgPT0gJ2NhbmNlbCdcclxuXHRcdFx0c2V0dGluZ3MgPSBjbG9uZSBiYWNrdXAgIyDDhXRlcnN0w6RsbCBhbGx0IHNvbSBiZWjDtnZzXHJcblx0XHRcdEBjbGVhck1hdHJpeCgpICMgTm9sbHN0w6RsbCA2eDYtbWF0cmlzZW5cclxuXHRcdFx0QGJ1dHRvbnNbbmFtZV0uZmcgPSAneWVsbG93JyBmb3IgbmFtZSBpbiBzZXR0aW5ncy5iaXRzICMgVMOkbmQgYWt0dWVsbGEgc2lmZnJvclxyXG5cdFx0XHRzZXR0aW5ncy5zdW1zID0gQGNhbGNTdW1zKClcclxuXHJcblx0XHRlbHNlIGlmIGtleSA9PSAnb2snXHJcblx0XHRcdHNldHRpbmdzLmNsb2NrcyAgPSBbc2V0dGluZ3MucGxheWVyc1swXVswXSwgc2V0dGluZ3MucGxheWVyc1sxXVswXV1cclxuXHRcdFx0c2V0dGluZ3MuYm9udXNlcyA9IFtzZXR0aW5ncy5wbGF5ZXJzWzBdWzFdLCBzZXR0aW5ncy5wbGF5ZXJzWzFdWzFdXVxyXG5cclxuXHRcdGVsc2UgIyA2IHggNiBlZGl0IGJ1dHRvbnNcclxuXHRcdFx0bGV0dGVyID0ga2V5WzBdXHJcblx0XHRcdGNvbCA9ICdITVNtc3QnLmluZGV4T2YgbGV0dGVyXHJcblx0XHRcdG51bWJlciA9IHBhcnNlSW50IGtleS5zbGljZSAxXHJcblx0XHRcdEBidXR0b25zW2tleV0uZmcgPSBpZiBAYnV0dG9uc1trZXldLmZnID09ICdncmF5JyB0aGVuICd5ZWxsb3cnIGVsc2UgJ2dyYXknXHJcblx0XHRcdHNldHRpbmdzLnN1bXMgPSBAY2FsY1N1bXMoKVxyXG5cdFx0XHRAYnV0dG9ucy5vay52aXNpYmxlID0gc2V0dGluZ3Muc3Vtc1swXSArIHNldHRpbmdzLnN1bXNbMV0gKyBzZXR0aW5ncy5zdW1zWzJdID4gMCBhbmQgc2V0dGluZ3Muc3Vtc1s1XSA8IDYwXHJcblxyXG5cdFx0QHVwcGRhdGVyYSgpXHJcblx0XHRzdXBlciBrZXlcclxuXHJcblx0Y2xlYXJNYXRyaXggOiAtPlxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgNlxyXG5cdFx0XHRsZXR0ZXIgPSAnSE1TbXN0J1tpXVxyXG5cdFx0XHRmb3IgaiBpbiByYW5nZSA2XHJcblx0XHRcdFx0bnVtYmVyID0gWzEsMiw0LDgsMTUsMzBdW2pdXHJcblx0XHRcdFx0bmFtZSA9IGxldHRlciArIG51bWJlclxyXG5cdFx0XHRcdEBidXR0b25zW25hbWVdLmZnID0gJ2dyYXknXHJcblxyXG5cdGNhbGNTdW1zIDogLT5cclxuXHRcdHJlcyA9IFswLDAsMCwwLDAsMF1cclxuXHRcdGZvciBpIGluIHJhbmdlIDZcclxuXHRcdFx0bGV0dGVyID0gJ0hNU21zdCdbaV1cclxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgNlxyXG5cdFx0XHRcdG51bWJlciA9IFsxLDIsNCw4LDE1LDMwXVtqXVxyXG5cdFx0XHRcdG5hbWUgPSBsZXR0ZXIgKyBudW1iZXJcclxuXHRcdFx0XHRpZiBAYnV0dG9uc1tuYW1lXS5mZyA9PSAneWVsbG93JyB0aGVuIHJlc1tpXSArPSBudW1iZXJcclxuXHRcdHJlc1xyXG5cclxuXHR1cHBkYXRlcmEgOiAtPlxyXG5cclxuXHRcdHNldHRpbmdzLnN1bXMgPSBAY2FsY1N1bXMoKVxyXG5cdFx0c2V0dGluZ3Muc2hvdyA9IEBjb21wYWN0KClcclxuXHRcdEBidXR0b25zLndoaXRlLnRleHQgPSBzZXR0aW5ncy5zaG93XHJcblx0XHRcclxuXHRcdEBoYW5kaWNhcCgpXHJcblx0XHRpZiBzZXR0aW5ncy5oY3AgPT0gMFxyXG5cdFx0XHRAYnV0dG9ucy5vcmFuZ2UudGV4dCA9ICcnXHJcblx0XHRcdEBidXR0b25zLmdyZWVuLnRleHQgID0gJydcclxuXHRcdGVsc2VcclxuXHRcdFx0QGJ1dHRvbnMub3JhbmdlLnRleHQgPSBwcmV0dHlQYWlyIHNldHRpbmdzLnBsYXllcnNbMF1bMF0sIHNldHRpbmdzLnBsYXllcnNbMF1bMV1cclxuXHRcdFx0QGJ1dHRvbnMuZ3JlZW4udGV4dCAgPSBwcmV0dHlQYWlyIHNldHRpbmdzLnBsYXllcnNbMV1bMF0sIHNldHRpbmdzLnBsYXllcnNbMV1bMV1cclxuXHJcblx0Y29tcGFjdCA6IC0+XHJcblx0XHRoZWFkZXJzID0gJ2htc21zJ1xyXG5cdFx0aGVhZGVyMCA9ICcnXHJcblx0XHRoZWFkZXIxID0gJydcclxuXHRcdGZvciBpIGluIHJhbmdlIDAsM1xyXG5cdFx0XHRpZiBzZXR0aW5ncy5zdW1zW2ldPjAgdGhlbiBoZWFkZXIwICs9IHNldHRpbmdzLnN1bXNbaV0gKyBoZWFkZXJzW2ldXHJcblx0XHRmb3IgaSBpbiByYW5nZSAzLDVcclxuXHRcdFx0aWYgc2V0dGluZ3Muc3Vtc1tpXT4wIHRoZW4gaGVhZGVyMSArPSBzZXR0aW5ncy5zdW1zW2ldICsgaGVhZGVyc1tpXVxyXG5cdFx0aGVhZGVyID0gaGVhZGVyMFxyXG5cdFx0aWYgaGVhZGVyMS5sZW5ndGggPiAwIHRoZW4gaGVhZGVyICs9ICcrJyArIGhlYWRlcjFcclxuXHRcdGlmIHNldHRpbmdzLnN1bXNbNV0gPiAwIHRoZW4gaGVhZGVyICs9ICdcXG4nICsgc2V0dGluZ3Muc3Vtc1s1XVxyXG5cdFx0aGVhZGVyXHJcblxyXG5cdGhhbmRpY2FwIDogLT5cclxuXHRcdHNldHRpbmdzLmhjcCA9IHNldHRpbmdzLnN1bXNbNV0gLyAoSENQICogNjApICMgMC4wIC4uIDEuMFxyXG5cdFx0c2V0dGluZ3MucmVmbCA9IEhPVVIgKiBzZXR0aW5ncy5zdW1zWzBdICsgTUlOVVRFICogc2V0dGluZ3Muc3Vtc1sxXSArIHNldHRpbmdzLnN1bXNbMl0gIyBzZWt1bmRlclxyXG5cdFx0c2V0dGluZ3MuYm9udXMgPSAgICAgICAgICAgICAgICAgICAgICAgICAgTUlOVVRFICogc2V0dGluZ3Muc3Vtc1szXSArIHNldHRpbmdzLnN1bXNbNF0gIyBzZWt1bmRlclxyXG5cdFx0c2V0dGluZ3MucGxheWVycyA9IFtdXHJcblx0XHRzZXR0aW5ncy5wbGF5ZXJzWzBdID0gW3NldHRpbmdzLnJlZmwgKyBzZXR0aW5ncy5yZWZsKnNldHRpbmdzLmhjcCwgc2V0dGluZ3MuYm9udXMgKyBzZXR0aW5ncy5ib251cypzZXR0aW5ncy5oY3BdXHJcblx0XHRzZXR0aW5ncy5wbGF5ZXJzWzFdID0gW3NldHRpbmdzLnJlZmwgLSBzZXR0aW5ncy5yZWZsKnNldHRpbmdzLmhjcCwgc2V0dGluZ3MuYm9udXMgLSBzZXR0aW5ncy5ib251cypzZXR0aW5ncy5oY3BdXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxucHJlbG9hZCA9IC0+XHJcblx0cXIgPSBsb2FkSW1hZ2UgJ3FyLnBuZydcclxuXHRzb3VuZCA9IGxvYWRTb3VuZCAna2V5Lm1wMydcclxuXHJcbndpbmRvd1Jlc2l6ZWQgPSAtPlxyXG5cdHJlc2l6ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG5cdGRpYWcgPSBzcXJ0IHdpZHRoKndpZHRoICsgaGVpZ2h0KmhlaWdodFxyXG5cclxuc2V0dXAgPSAtPlxyXG5cclxuXHRmcmFtZVJhdGUgRlJBTUVSQVRFXHJcblx0b3MgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvblxyXG5cdGlmIG9zLmluZGV4T2YoJ0xpbnV4JykgPj0gMCB0aGVuIG9zID0gJ0FuZHJvaWQnXHJcblx0aWYgb3MuaW5kZXhPZignV2luZG93cycpID49IDAgdGhlbiBvcyA9ICdXaW5kb3dzJ1xyXG5cdGlmIG9zLmluZGV4T2YoJ01hYycpID49IDAgdGhlbiBvcyA9ICdNYWMnXHJcblxyXG5cdCMgb3MgPSAnQW5kcm9pZCdcclxuXHJcblx0Y2FudmFzID0gY3JlYXRlQ2FudmFzIGlubmVyV2lkdGgsaW5uZXJIZWlnaHRcclxuXHRib2R5U2Nyb2xsTG9jay5kaXNhYmxlQm9keVNjcm9sbCBjYW52YXMgIyBGw7ZyaGluZHJhciBhdHQgbWFuIGthbiBzY3JvbGxhIGNhbnZhcyBww6UgaU9TXHJcblxyXG5cdGlmIG9zID09ICdBbmRyb2lkJyB0aGVuIHRleHRGb250ICdEcm9pZCBTYW5zJ1xyXG5cdGlmIG9zID09ICdNYWMnIHRoZW4gdGV4dEZvbnQgJ1ZlcmRhbmEnXHJcblx0aWYgb3MgPT0gJ1dpbmRvd3MnIHRoZW4gdGV4dEZvbnQgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnXHJcblxyXG5cdFRPR0dMRSA9IGlmIG9zID09ICdNYWMnIHRoZW4gMSBlbHNlIDBcclxuXHJcblx0ZGlhZyA9IHNxcnQgd2lkdGgqd2lkdGggKyBoZWlnaHQqaGVpZ2h0XHJcblxyXG5cdGJhY2tncm91bmQgJ2JsYWNrJ1xyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0cmVjdE1vZGUgQ0VOVEVSXHJcblx0YW5nbGVNb2RlIERFR1JFRVNcclxuXHJcblx0Y3JlYXRlU3RhdGUgJ1NDbG9jaycsIFNDbG9jayBcclxuXHRjcmVhdGVTdGF0ZSAnU0VkaXRvcicsU0VkaXRvclxyXG5cclxuXHRzZXR0aW5ncyA9IGxvYWRTZXR0aW5ncygpXHJcblxyXG5cdHN0YXRlcy5TRWRpdG9yLnVwcGRhdGVyYSgpXHJcblx0Zm9yIGtleSBpbiBzZXR0aW5ncy5iaXRzXHJcblx0XHRzdGF0ZXMuU0VkaXRvci5tZXNzYWdlIGtleVxyXG5cdHN0YXRlcy5TRWRpdG9yLnVwcGRhdGVyYSgpXHJcblx0XHJcblx0I2R1bXAoKVxyXG5cdGN1cnJTdGF0ZSA9IHN0YXRlcy5TQ2xvY2tcclxuXHJcblx0I2NoZWNrQnV0dG9ucygpXHJcblx0I2NoZWNrU3RhdGVzKClcclxuXHJcbm1ha2VCaXRzID0gLT5cclxuXHRiaXRzID0gW11cclxuXHRmb3Iga2V5IG9mIHN0YXRlcy5TRWRpdG9yLmJ1dHRvbnNcclxuXHRcdGlmIGtleSBub3QgaW4gWydvaycsJ2NhbmNlbCddXHJcblx0XHRcdGJ1dHRvbiA9IHN0YXRlcy5TRWRpdG9yLmJ1dHRvbnNba2V5XVxyXG5cdFx0XHRpZiBidXR0b24uZmcgPT0gJ3llbGxvdycgdGhlbiBiaXRzLnB1c2gga2V5XHJcblx0Yml0c1xyXG5cclxuZHVtcCA9IC0+ICMgbG9nIGV2ZXJ5dGhpbmdcclxuXHRmb3Igc2tleSBvZiBzdGF0ZXMgXHJcblx0XHRzdGF0ZSA9IHN0YXRlc1tza2V5XVxyXG5cdFx0Y29uc29sZS5sb2cgJydcclxuXHRcdGNvbnNvbGUubG9nICdTdGF0ZScsc3RhdGVcclxuXHRcdGZvciB0a2V5IG9mIHN0YXRlLnRyYW5zaXRpb25zXHJcblx0XHRcdHRyYW5zaXRpb24gPSBzdGF0ZS50cmFuc2l0aW9uc1t0a2V5XVxyXG5cdFx0XHRidXR0b24gPSBzdGF0ZS5idXR0b25zW3RrZXldXHJcblx0XHRcdGlmIHRyYW5zaXRpb24gPT0gdW5kZWZpbmVkIHRoZW4gdHJhbnNpdGlvbiA9ICdub3RoaW5nJ1xyXG5cdFx0XHRjb25zb2xlLmxvZyAnICcsdGtleSwnPT4nLHRyYW5zaXRpb24sYnV0dG9uXHJcblxyXG5tb3VzZUNsaWNrZWQgPSAtPiBjdXJyU3RhdGUubW91c2VDbGlja2VkKClcclxuXHJcbmRyYXcgPSAtPlxyXG5cclxuXHRpZiBUT0dHTEUgPT0gMFxyXG5cdFx0c2NhbGUgd2lkdGgvMTAwLGhlaWdodC8xMDAgIyBwb3J0cmFpdFxyXG5cdGVsc2VcclxuXHRcdHJvdGF0ZSA5MFxyXG5cdFx0dHJhbnNsYXRlIDAsLXdpZHRoXHJcblx0XHRzY2FsZSBoZWlnaHQvMTAwLHdpZHRoLzEwMCAjIExhbmRzY2FwZVxyXG5cclxuXHRzdHJva2VXZWlnaHQgMTAwL2hlaWdodFxyXG5cdHB1c2goKVxyXG5cdGJhY2tncm91bmQgJ2JsYWNrJ1xyXG5cdHN0YXRlcy5TQ2xvY2sudXBwZGF0ZXJhKClcclxuXHRjdXJyU3RhdGUuZHJhdygpXHJcblx0cG9wKClcclxuXHJcblx0c2F2ZVNldHRpbmdzKClcclxuXHJcblx0IyBkZWJ1Z1xyXG5cdGFzcGVjdCA9ICh3LGgseSkgLT5cclxuXHRcdGlmIHc8aCB0aGVuIFt3LGhdID0gW2gsd11cclxuXHRcdHRleHQgXCIje3d9ICN7KHcvaCkudG9GaXhlZCgzKX0gI3tofVwiLCA1MCx5XHJcblxyXG5cdGRlYnVnRnVuY3Rpb24oKVxyXG5cclxuZGVidWdGdW5jdGlvbiA9IC0+XHJcblx0cmF0ZXMucHVzaCBmcmFtZVJhdGUoKVxyXG5cdGlmIHJhdGVzLmxlbmd0aCA+IDEwMCB0aGVuIG9sZGVzdCA9IHJhdGVzLnNoaWZ0KCkgZWxzZSBvbGRlc3QgPSByYXRlc1swXVxyXG5cdHN1bVJhdGUgKz0gXy5sYXN0KHJhdGVzKSAtIG9sZGVzdFxyXG5cclxuXHQjICMgb3MgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvblxyXG5cdHRleHRTaXplIDIuNVxyXG5cdCN0ZXh0ICdDbGljayBRUiA9PiBGdWxsc2NyZWVuJyw1MCwxMlxyXG5cdHRleHQgTWF0aC5yb3VuZChzdW1SYXRlKSw5NSw1XHJcblxyXG5cdCMgdGV4dCBjdXJyU3RhdGUubmFtZSw1MCwzXHJcblx0IyAjIGZpbGwgJ2dyZWVuJ1xyXG5cdCMgdGV4dCByb3VuZDMoc3RhdGVzLlNFZGl0b3IuYm9udXNlc1swXSksMTAsM1xyXG5cdCMgdGV4dCByb3VuZDMoc3RhdGVzLlNFZGl0b3IuY2xvY2tzWzBdKSwyNSwzXHJcblx0IyB0ZXh0IHJvdW5kMyhzdGF0ZXMuU0VkaXRvci5jbG9ja3NbMV0pLDc1LDNcclxuXHQjIHRleHQgcm91bmQzKHN0YXRlcy5TRWRpdG9yLmJvbnVzZXNbMV0pLDkwLDNcclxuXHJcblx0IyB0ZXh0IHN0YXRlcy5TQ2xvY2sucGF1c2VkLDMwLDIuNVxyXG5cdCMgdGV4dCBzdGF0ZXMuU0Nsb2NrLnBsYXllciw3MCwyLjVcclxuXHJcblx0IyBjdXJyU3RhdGUuZHJhdygpXHJcblxyXG5sb2FkU2V0dGluZ3MgPSAtPlxyXG5cdGlmIGxvY2FsU3RvcmFnZS5zZXR0aW5nc1xyXG5cdFx0c2V0dGluZ3MgPSBKU09OLnBhcnNlIGxvY2FsU3RvcmFnZS5zZXR0aW5nc1xyXG5cdFx0c2V0dGluZ3MucGF1c2VkID0gdHJ1ZVxyXG5cdFx0Y29uc29sZS5sb2cgJ2ZldGNoaW5nIHN0b3JlZCBzZXR0aW5ncycsc2V0dGluZ3NcclxuXHRlbHNlIFxyXG5cdFx0c2V0dGluZ3MgPSB7fVxyXG5cdFx0c2V0dGluZ3Muc2hvdyA9ICczbTJzJ1xyXG5cdFx0c2V0dGluZ3MuYml0cyA9IFsnTTEnLCdNMicsJ3MyJ11cclxuXHRcdHNldHRpbmdzLmNsb2NrcyA9IFsxODAsMTgwXVxyXG5cdFx0c2V0dGluZ3MuYm9udXNlcz0gWzIsMl1cclxuXHRcdHNldHRpbmdzLnN1bXMgPSBbMCwzLDAsMCwyLDBdXHJcblx0XHRzZXR0aW5ncy5wbGF5ZXIgPSAtMSBcclxuXHRcdHNldHRpbmdzLnRpbWVvdXQgPSBmYWxzZVxyXG5cdFx0c2V0dGluZ3MucGF1c2VkID0gdHJ1ZVxyXG5cdFx0Y29uc29sZS5sb2cgJ2ZldGNoaW5nIGRlZmF1bHQgc2V0dGluZ3MnLHNldHRpbmdzXHJcblx0XHRsb2NhbFN0b3JhZ2Uuc2V0dGluZ3MgPSBKU09OLnN0cmluZ2lmeSBzZXR0aW5nc1xyXG5cdHNldHRpbmdzXHJcblxyXG5zYXZlU2V0dGluZ3MgPSAtPlxyXG5cdGQgPSBuZXcgRGF0ZSgpXHJcblx0aWYgZCAtIGxhc3RTdG9yYWdlU2F2ZSA8IEhFQVJUQkVBVCB0aGVuIHJldHVybiAjIG1zXHJcblx0bGFzdFN0b3JhZ2VTYXZlID0gZFxyXG5cdHNldHRpbmdzLmJpdHMgPSBtYWtlQml0cygpXHJcblx0bG9jYWxTdG9yYWdlLnNldHRpbmdzID0gSlNPTi5zdHJpbmdpZnkgc2V0dGluZ3NcclxuXHJcbiMgY2hlY2tCdXR0b25zID0gLT5cclxuIyBcdGNvbnNvbGUubG9nICdjaGVja0J1dHRvbnMgc3RhcnRlZCdcclxuIyBcdGZvciBia2V5IG9mIGJ1dHRvbnNcclxuIyBcdFx0YnV0dG9uID0gYnV0dG9uc1tia2V5XVxyXG4jIFx0XHRmb3VuZCA9IGZhbHNlXHJcbiMgXHRcdGZvciBza2V5IG9mIHN0YXRlc1xyXG4jIFx0XHRcdHN0YXRlID0gc3RhdGVzW3NrZXldXHJcbiMgXHRcdFx0aWYgYmtleSBvZiBzdGF0ZS50cmFuc2l0aW9ucyB0aGVuIGZvdW5kID0gdHJ1ZVxyXG4jIFx0XHRpZiBub3QgZm91bmQgdGhlbiBjb25zb2xlLmxvZyAnICBCdXR0b24nLGJrZXksJ25vdCB1c2VkIGJ5IGFueSBzdGF0ZSdcclxuIyBcdGNvbnNvbGUubG9nICdjaGVja0J1dHRvbnMgZG9uZSEnXHJcblxyXG4jIGNoZWNrU3RhdGVzID0gLT5cclxuIyBcdGNvbnNvbGUubG9nICdjaGVja1N0YXRlcyBzdGFydGVkJ1xyXG4jIFx0Zm9yIHNrZXkgb2Ygc3RhdGVzXHJcbiMgXHRcdHN0YXRlID0gc3RhdGVzW3NrZXldXHJcbiMgXHRcdGZvdW5kID0gZmFsc2VcclxuIyBcdFx0Zm9yIHRrZXkgb2Ygc3RhdGUudHJhbnNpdGlvbnNcclxuIyBcdFx0XHR0cmFuc2l0aW9uID0gc3RhdGUudHJhbnNpdGlvbnNbdGtleV1cclxuIyBcdFx0XHRpZiB0cmFuc2l0aW9uICE9IHVuZGVmaW5lZCBhbmQgdHJhbnNpdGlvbiBub3Qgb2Ygc3RhdGVzIHRoZW4gY29uc29sZS5sb2cgdHJhbnNpdGlvbiwnbm90IGZvdW5kJ1xyXG4jIFx0XHRcdGlmIHRrZXkgb2YgYnV0dG9ucyB0aGVuIGZvdW5kID0gdHJ1ZSBlbHNlIGluZm8gPSB0a2V5XHJcbiMgXHRcdGlmIG5vdCBmb3VuZCB0aGVuIGNvbnNvbGUubG9nICcgIFN0YXRlJyxza2V5LCdUcmFuc2l0aW9uJyx0a2V5LCAnbm90IGRlZmluZWQnXHJcbiMgXHRjb25zb2xlLmxvZyAnY2hlY2tTdGF0ZXMgZG9uZSEnXHJcblxyXG4jIGFyciA9IFtdXHJcbiMgZm9yIGkgaW4gcmFuZ2UgNjBcclxuIyBcdGFyci5wdXNoIFwiI3tpfSAje01hdGgucm91bmQoKDYwK2kpLyg2MC1pKSoxMDAwKS8xMDAwfVwiXHJcbiMgY29uc29sZS5sb2cgYXJyLmpvaW4gXCJcXG5cIiJdfQ==
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee