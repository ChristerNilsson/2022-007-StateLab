// Generated by CoffeeScript 2.5.1
  // TODO
  // Försämring av frameRate inträffar om man går från fullscreen till normal på Android
var B960, BAdv, BAdv960, BBasic, BCogwheel, BColor, BDead, BImage, BNumber, BPause, BRotate, BRounded, BShow, Button, CSettings, FRAMERATE, HCP, HEARTBEAT, HOUR, MINUTE, S960, SAdv, SBasic, SClock, State, TOGGLE, backup, chess, clone, createState, currState, d2, debugFunction, diag, draw, dump, getLocalCoords, hms, lastStorageSave, mouseClicked, os, preload, pretty, prettyPair, qr, rates, settings, setup, sound, states, sumRate, trunc3, windowResized,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

HCP = 1;

HOUR = 3600;

MINUTE = 60;

TOGGLE = 1; // 0=porträtt (Android) 1=landskap (Mac)

HEARTBEAT = 1000; // ms updates of localStorage

FRAMERATE = 30; // 10

settings = {};

backup = null;

states = {};

qr = null;

chess = {};

currState = null;

os = '';

sound = null;

lastStorageSave = new Date();

rates = [];

sumRate = 0;

diag = 0;

getLocalCoords = function() { // tar 3 microsekunder
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

trunc3 = function(x) {
  return Math.trunc(x * 1000) / 1000;
};

console.assert(trunc3(12.345678) === 12.345);

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (trunc3(h) > 0) {
    header += trunc3(h) + 'h';
  }
  if (trunc3(m) > 0) {
    header += trunc3(m) + 'm';
  }
  if (trunc3(s) > 0) {
    header += trunc3(s) + 's';
  }
  return header;
};

console.assert(pretty(3601) === '1h1s');

console.assert(pretty(123) === '2m3s');

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

console.assert(prettyPair(3601, 123) === '1h1s + 2m3s');

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.assert(d2(3) === '03');

hms = function(x) {
  var h, m, orig, s;
  orig = x;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  if (orig < 10) {
    s = Math.trunc(s * 10) / 10;
  }
  return [h, m, s];
};

chai.assert.deepEqual(hms(180), [0, 3, 0]);

chai.assert.deepEqual(hms(180.5), [0, 3, 0.5]);

clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

CSettings = class CSettings {
  constructor() {
    if (localStorage.settings) {
      Object.assign(this, JSON.parse(localStorage.settings));
      console.log("load");
    } else {
      console.log("default");
    }
    this.bits960 || (this.bits960 = ['R480', 'R30', 'R8']);
    this.number || (this.number = 518);
    this.chess960 || (this.chess960 = 'RNBQKBNR');
    this.sums960 || (this.sums960 = {
      R: 518
    });
    this.show || (this.show = '3m2s');
    this.bits || (this.bits = ['M1', 'M2', 's2']);
    this.clocks || (this.clocks = [180, 180]);
    this.bonuses || (this.bonuses = [2, 2]);
    this.sums || (this.sums = [
      {
        H: 0,
        M: 3,
        S: 0,
        m: 0,
        S: 2,
        t: 0
      }
    ]);
    this.player || (this.player = -1);
    this.timeout || (this.timeout = false);
    this.paused = true;
    this.handicap();
    this.save();
  }

  // random960 : ->
  // 	res = []
  // 	all = [0,1,2,3,4,5,6,7]
  // 	place = (lst,piece) ->
  // 		p = lst[_.random lst.length-1]
  // 		_.remove all, (value) -> value == p
  // 		res[p] = piece
  // 	place [0,2,4,6],'B'
  // 	place [1,3,5,7],'B'
  // 	place all,'Q'
  // 	place all,'N'
  // 	place all,'N'
  // 	[R0,K,R1] = all
  // 	res[R0] = 'R'
  // 	res[K] = 'K'
  // 	res[R1] = 'R'
  // 	res.join ''
  tick() {
    var c;
    if (this.paused) {
      return;
    }
    c = this.clocks[this.player];
    if (c > 0) {
      c -= 1 / frameRate();
    }
    if (c <= 0) {
      c = 0;
      this.timeout = true;
      this.paused = true;
    }
    return this.clocks[this.player] = c;
  }

  save() {
    var d;
    d = new Date();
    if (d - lastStorageSave < HEARTBEAT) { // ms
      return;
    }
    lastStorageSave = d;
    localStorage.settings = JSON.stringify(this);
    return console.log('save'); //,JSON.stringify @
  }

  flip(key) {
    if (indexOf.call(this.bits, key) >= 0) {
      _.remove(this.bits, function(n) {
        return n === key;
      });
    } else {
      this.bits.push(key);
    }
    this.sums = this.calcSums();
    return this.show = this.compact();
  }

  flip960(key) {
    if (indexOf.call(this.bits960, key) >= 0) {
      _.remove(this.bits960, function(n) {
        return n === key;
      });
    } else {
      this.bits960.push(key);
    }
    this.sums960 = this.calcSums960();
    this.number = this.sums960.R;
    return this.chess960 = chess960(this.number);
  }

  calcSums() {
    var k, key, len, letter, number, ref, res;
    res = {
      H: 0,
      M: 0,
      S: 0,
      m: 0,
      s: 0,
      t: 0
    };
    ref = settings.bits;
    for (k = 0, len = ref.length; k < len; k++) {
      key = ref[k];
      letter = key[0];
      number = parseInt(key.slice(1));
      res[letter] += number;
    }
    return res;
  }

  calcSums960() {
    var k, key, len, letter, number, ref, res;
    res = {
      R: 0
    };
    ref = settings.bits960;
    for (k = 0, len = ref.length; k < len; k++) {
      key = ref[k];
      letter = key[0];
      number = parseInt(key.slice(1));
      res[letter] += number;
    }
    return res;
  }

  compact() {
    var header, header0, header1, headers, i, k, key, keys, l, len, len1, ref, ref1;
    keys = 'HMSms';
    headers = 'hmsms';
    header0 = '';
    header1 = '';
    ref = [0, 1, 2];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      key = keys[i];
      if (this.sums[key] > 0) {
        header0 += this.sums[key] + headers[i];
      }
    }
    ref1 = [3, 4];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      key = keys[i];
      if (this.sums[key] > 0) {
        header1 += this.sums[key] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += '+' + header1;
    }
    if (this.sums.t > 0) {
      header += '\n' + this.sums.t;
    }
    return header;
  }

  handicap() {
    this.hcp = this.sums.t / (HCP * 60); // 0.0 .. 1.0
    this.refl = HOUR * this.sums.H + MINUTE * this.sums.M + this.sums.S; // sekunder
    this.bonus = MINUTE * this.sums.m + this.sums.s; // sekunder
    this.players = [];
    this.players[0] = [this.refl + this.refl * this.hcp, this.bonus + this.bonus * this.hcp];
    return this.players[1] = [this.refl - this.refl * this.hcp, this.bonus - this.bonus * this.hcp];
  }

  ok() {
    this.sums = this.calcSums();
    this.handicap();
    this.clocks = [this.players[0][0], this.players[1][0]];
    this.bonuses = [this.players[0][1], this.players[1][1]];
    this.timeout = false;
    return this.paused = true;
  }

  cancel() {
    Object.assign(this, backup);
    return this.paused = true;
  }

};

Button = class Button {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'white', fg1 = 'black') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.bg);
      rect(this.x, this.y, this.w, this.h);
      textSize(4);
      fill(this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

  inside(x, y) {
    var ref, ref1;
    return (-this.w / 2 <= (ref = x - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

BNumber = class BNumber extends Button {
  constructor(x, y) {
    super(x, y, 0, 0);
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
  }

  draw() {
    push();
    textSize(4);
    fill('white');
    text(settings.sums960.R, this.x, this.y);
    return pop();
  }

};

B960 = class B960 extends Button {
  constructor(x, y, w, h) {
    super(x, y, w, h);
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
    this.visible = true;
  }

  draw() {
    var dx, i, k, len, ref, results, w, xoff;
    if (this.visible) {
      dx = 12;
      w = this.h * [height / width, width / height][TOGGLE];
      xoff = this.x + (dx - w) / 2;
      ref = range(8);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(image(chess[settings.chess960[i]], xoff + (i - 4) * dx, this.y + 8, w, this.h));
      }
      return results;
    }
  }

};

BRounded = class BRounded extends Button {
  constructor(x, y, w, h, text = '', disabled = false, bg = 'white', fg = 'black') {
    super(x, y, w, h, text, bg, fg);
    this.disabled = disabled;
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.disabled ? "gray" : this.bg);
      rect(this.x, this.y, this.w, this.h, this.h / 2);
      textSize(4);
      fill(this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

};

BPause = class BPause extends Button {
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    if (!settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

BCogwheel = class BCogwheel extends Button { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    var k, len, ref, v;
    if (settings.paused) {
      push();
      translate(this.x, this.y);
      scale([height / width, width / height][TOGGLE], 1);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      for (k = 0, len = ref.length; k < len; k++) {
        v = ref[k];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        pop();
      }
      return pop();
    }
  }

};

BImage = class BImage extends Button {
  constructor(x, y, w, h, image1) {
    super(x, y, w, h);
    this.image = image1;
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

BRotate = class BRotate extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player1) {
    super(x, y, w, h, '', bg, fg);
    this.degrees = degrees;
    this.player = player1;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = settings.clocks[this.player];
    [h, m, s] = hms(secs);
    if (h >= 1) {
      ss = h + ':' + d2(m);
    } else {
      ss = m + ':' + (secs < 10 ? s.toFixed(1) : d2(s));
    }
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    if (settings.timeout && settings.player === this.player) {
      this.bg = 'red';
      this.fg = 'black';
    }
    fill(this.bg);
    rect(0, 0, this.w, this.h);
    fill(this.fg);
    textSize(18 + 9);
    text(ss, 0, 2);
    textSize(5 + 3);
    //text (if h==0 then 'm:ss' else 'h:mm'),0,17
    if (settings.bonuses[this.player] > 0) {
      text('+' + pretty(settings.bonuses[this.player]), 0, 17);
    }
    return pop();
  }

};

BAdv = class BAdv extends Button {
  constructor(name1, x, y, w, h, text) {
    super(x, y, w, h, text, 'black');
    this.name = name1;
  }

  draw() {
    var ref;
    push();
    translate(this.x, this.y);
    fill((ref = this.name, indexOf.call(settings.bits, ref) >= 0) ? 'yellow' : 'white');
    scale([height / width, width / height][TOGGLE], 1);
    circle(0, 0, 8);
    fill('black');
    textSize(5);
    text(this.text, 0, 0.2);
    return pop();
  }

  inside(x, y) {
    var dx, dy;
    dx = x - this.x;
    dy = y - this.y;
    return sqrt(dx * dx + dy * dy) < 5;
  }

};

BAdv960 = class BAdv960 extends Button {
  constructor(name1, x, y, w, h, text) {
    super(x, y, w, h, text, 'black');
    this.name = name1;
  }

  draw() {
    var ref;
    push();
    translate(this.x, this.y);
    fill((ref = this.name, indexOf.call(settings.bits960, ref) >= 0) ? 'yellow' : 'white');
    scale([height / width, width / height][TOGGLE], 1);
    circle(0, 0, this.w);
    fill('black');
    textSize(5);
    text(this.text, 0, 0.2);
    return pop();
  }

  inside(x, y) {
    var dx, dy;
    dx = x - this.x;
    dy = y - this.y;
    return sqrt(dx * dx + dy * dy) < 5;
  }

};

BBasic = class BBasic extends BAdv {
  constructor(x, y, w, h, text) {
    super('', x, y, w, h, text);
  }

  draw() {
    push();
    translate(this.x, this.y);
    fill('white');
    scale([height / width, width / height][TOGGLE], 1);
    circle(0, 0, this.w);
    fill('black');
    textSize(5);
    text(this.text, 0, 0.2);
    return pop();
  }

};

BDead = class BDead extends Button {
  constructor(x, y, text, fg = 'lightgray') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

BShow = class BShow extends BDead {
  constructor(x, y, fg = 'lightgray') {
    super(x, y, 0, 0, '', 'black', fg);
  }

  draw() {
    this.text = settings.show;
    return super.draw();
  }

};

BColor = class BColor extends Button {
  constructor(x, y, fg1) {
    super(x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    //textAlign CENTER,CENTER
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor(name1) {
    this.name = name1;
    this.buttons = {};
    this.transitions = {};
    this.makeButtons();
  }

  createTrans(t) {
    var arr, k, len, results, target, word;
    target = void 0;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      word = arr[k];
      if (word === '=>') {
        results.push(target = void 0);
      } else if (word.indexOf('=>') === 0) {
        results.push(target = word.slice(2));
      } else {
        results.push(this.transitions[word] = target);
      }
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    return currState = states[this.transitions[key]];
  }

  draw() {
    var results, tkey;
    results = [];
    for (tkey in this.transitions) {
      if (tkey in this.buttons) {
        results.push(this.buttons[tkey].draw());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  mouseClicked() {
    var button, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.transitions) {
      if (this.transitions[key] === void 0) {
        continue;
      }
      button = this.buttons[key];
      if (button.visible && button.inside(x, y)) {
        this.message(key);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

SClock = class SClock extends State {
  constructor(name) {
    super(name);
    this.createTrans('=>SClock left pause qr right =>SBasic edit => show chess960');
    settings.paused = true;
    settings.player = -1;
  }

  makeButtons() {
    this.buttons.left = new BRotate(50, 22, 100, 44, 180, 'orange', 'white', 0); // eg up
    this.buttons.right = new BRotate(50, 78, 100, 44, 0, 'green', 'white', 1); // eg down
    this.buttons.show = new BShow(22, 50, 'black');
    this.buttons.qr = new BImage(50, 50, 33, 12, qr);
    this.buttons.pause = new BPause(67, 50, 17, 12, 'white', 'black');
    return this.buttons.edit = new BCogwheel(83, 50, 17, 12, 'white', 'black');
  }

  //@buttons.chess960 = new B960 50,50,6,6
  handlePlayer(player) {
    var ref;
    if ((ref = settings.player) === (-1) || ref === player) {
      sound.play();
      settings.clocks[player] += settings.bonuses[player];
    }
    settings.paused = false;
    settings.player = 1 - player;
    this.buttons.left.fg = ['black', 'white'][player];
    return this.buttons.right.fg = ['white', 'black'][player];
  }

  message(key) {
    if (key === 'left') {
      if (settings.timeout) {
        return;
      } else {
        this.handlePlayer(0);
      }
    } else if (key === 'right') {
      if (settings.timeout) {
        return;
      } else {
        this.handlePlayer(1);
      }
    } else if (key === 'pause') {
      settings.paused = true;
      this.buttons.left.fg = settings.player === 0 ? 'white' : 'black';
      this.buttons.right.fg = settings.player === 0 ? 'black' : 'white';
    } else if (key === 'qr') {
      fullscreen(true);
      resizeCanvas(innerWidth, innerHeight);
    } else if (key === 'edit') {
      backup = clone(settings); // to be used by cancel
      console.log('backup skapad', backup);
    }
    settings.save();
    return super.message(key);
  }

  draw() {
    background('white');
    return super.draw();
  }

};

SBasic = class SBasic extends State {
  constructor(name) {
    var arr;
    super(name);
    arr = '=> bonus green hcp orange reflection white M s =>SClock cancel ok =>S960 b960 =>SAdv adv =>SBasic basic M1 M2 M3 M5 M10 M90 s0 s1 s2 s3 s5 s10 s30'.split(' ');
    this.createTrans(arr.join(' '));
  }

  makeButtons() {
    var h, w, x, y;
    x = [100 / 3, 200 / 3];
    y = [32, 41, 50, 59, 68, 77, 86, 95];
    w = 8;
    h = 6;
    this.buttons.orange = states.SAdv.buttons.orange;
    this.buttons.white = states.SAdv.buttons.white;
    this.buttons.green = states.SAdv.buttons.green;
    this.buttons.reflection = new BDead(x[0], 20, 'reflection');
    this.buttons.bonus = new BDead(x[1], 20, 'bonus');
    this.buttons.M = new BDead(x[0], 25, 'M');
    this.buttons.M1 = new BBasic(x[0], y[1], w, h, '1');
    this.buttons.M2 = new BBasic(x[0], y[2], w, h, '2');
    this.buttons.M3 = new BBasic(x[0], y[3], w, h, '3');
    this.buttons.M5 = new BBasic(x[0], y[4], w, h, '5');
    this.buttons.M10 = new BBasic(x[0], y[5], w, h, '10');
    this.buttons.M90 = new BBasic(x[0], y[6], w, h, '90');
    this.buttons.s = new BDead(x[1], 25, 's');
    this.buttons.s0 = new BBasic(x[1], y[0], w, h, '0');
    this.buttons.s1 = new BBasic(x[1], y[1], w, h, '1');
    this.buttons.s2 = new BBasic(x[1], y[2], w, h, '2');
    this.buttons.s3 = new BBasic(x[1], y[3], w, h, '3');
    this.buttons.s5 = new BBasic(x[1], y[4], w, h, '5');
    this.buttons.s10 = new BBasic(x[1], y[5], w, h, '10');
    this.buttons.s30 = new BBasic(x[1], y[6], w, h, '30');
    this.buttons.basic = new BRounded(1 * 100 / 10, y[7], 18, 6, 'basic', true);
    this.buttons.adv = new BRounded(3 * 100 / 10, y[7], 18, 6, 'adv');
    this.buttons.b960 = new BRounded(5 * 100 / 10, y[7], 18, 6, '960');
    this.buttons.cancel = new BRounded(7 * 100 / 10, y[7], 18, 6, 'cancel');
    return this.buttons.ok = new BRounded(9 * 100 / 10, y[7], 18, 6, 'ok');
  }

  // @buttons.advanced   = new BRounded 1*100/6,y[7], 26,6, 'advanced'
  // @buttons.cancel     = new BRounded 3*100/6,y[7], 26,6, 'cancel'
  // @buttons.ok         = new BRounded 5*100/6,y[7], 26,6, 'ok'
  message(key) {
    var st;
    if (key === 'adv') {

    } else if (key === 'basic') {

    //else if key == 's960'
    } else if (key === 'cancel') {
      settings.cancel();
    } else if (key === 'ok') {
      settings.ok(); // 6+7 shortcut buttons
    } else {
      st = settings;
      if (key[0] === 'M') {
        st.bits = st.bits.filter(function(value) {
          var ref;
          return ref = value[0], indexOf.call('MHS', ref) < 0;
        });
      }
      if (key[0] === 's') {
        st.bits = st.bits.filter(function(value) {
          var ref;
          return ref = value[0], indexOf.call('ms', ref) < 0;
        });
      }
      console.log('filter', st.bits);
      states.SAdv.message(key);
      this.buttons.ok.visible = st.sums.H + st.sums.M + st.sums.S > 0 && st.sums.t < 60;
    }
    return super.message(key);
  }

};

SAdv = class SAdv extends State {
  constructor(name) {
    var arr, k, l, len, len1, letter, number, ref, ref1;
    super(name);
    arr = '=> green white orange reflection bonus hcp H M S m s t =>SBasic basic =>SAdv adv =>S960 b960 =>SClock cancel ok =>SBasic basic =>SAdv'.split(' ');
    ref = 'HMSmst';
    for (k = 0, len = ref.length; k < len; k++) {
      letter = ref[k];
      ref1 = [1, 2, 4, 8, 15, 30];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        number = ref1[l];
        arr.push(letter + number);
      }
    }
    this.createTrans(arr.join(' '));
    this.uppdatera();
  }

  makeButtons() {
    var y;
    this.buttons.orange = new BColor(50, 3, 'orange');
    this.buttons.white = new BColor(50, 9, 'white');
    this.buttons.green = new BColor(50, 15, 'green');
    this.buttons.reflection = new BDead(25, 21, 'reflection');
    this.buttons.bonus = new BDead(66, 21, 'bonus');
    this.buttons.hcp = new BDead(92, 21, 'hcp');
    y = 95;
    this.buttons.basic = new BRounded(1 * 100 / 10, y, 18, 6, 'basic');
    this.buttons.adv = new BRounded(3 * 100 / 10, y, 18, 6, 'adv', true);
    this.buttons.b960 = new BRounded(5 * 100 / 10, y, 18, 6, '960');
    this.buttons.cancel = new BRounded(7 * 100 / 10, y, 18, 6, 'cancel');
    this.buttons.ok = new BRounded(9 * 100 / 10, y, 18, 6, 'ok');
    return this.makeEditButtons();
  }

  makeEditButtons() {
    var i, j, k, len, letter, name, number, ref, results, xoff, xsize, yoff, ysize;
    ref = range(6);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      xsize = 100 / 6;
      ysize = 100 / 10;
      xoff = xsize / 2;
      yoff = 33 + 2;
      this.buttons[letter] = new BDead(xoff + xsize * i, 26 + 2, 'HMSmst'[i]);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(6);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30][j];
          name = letter + number;
          results1.push(this.buttons[name] = new BAdv(name, xoff + xsize * i, yoff + ysize * j, xsize, ysize, number));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  message(key) {
    var hash, k, len, msg, ref, st;
    if (key === 'basic') {

    } else if (key === 'advanced') {

    } else if (key === 'cancel') {
      settings.cancel();
    } else if (key === 'ok') {
      settings.ok();
    } else {
      hash = {
        'M3': 'M1 M2',
        'M5': 'M1 M4',
        'M10': 'M2 M8',
        'M90': 'H1 M30',
        's0': '',
        's3': 's1 s2',
        's5': 's1 s4',
        's10': 's2 s8'
      };
      if (key in hash) {
        ref = hash[key].split(' ');
        for (k = 0, len = ref.length; k < len; k++) {
          msg = ref[k];
          if (msg !== '') {
            this.message(msg); // 6 x 6 edit buttons
          }
        }
      } else {
        st = settings;
        st.flip(key);
        this.buttons.ok.visible = st.sums.H + st.sums.M + st.sums.S > 0 && st.sums.t < 60;
      }
    }
    this.uppdatera();
    return super.message(key);
  }

  uppdatera() {
    var sp;
    this.buttons.white.text = settings.show;
    settings.handicap();
    sp = settings.players;
    this.buttons.orange.text = settings.hcp === 0 ? '' : prettyPair(sp[0][0], sp[0][1]);
    return this.buttons.green.text = settings.hcp === 0 ? '' : prettyPair(sp[1][0], sp[1][1]);
  }

};

S960 = class S960 extends State {
  constructor(name) {
    var arr;
    super(name);
    arr = '=> B960 BNumber =>SClock cancel ok =>SAdv adv =>SBasic basic =>S960 b960 random R1 R2 R4 R8 R15 R30 R60 R120 R240 R480'.split(' ');
    this.createTrans(arr.join(' '));
    this.makeButtons();
  }

  makeButtons() {
    var h, w, x, y;
    x = [100 / 4, 200 / 4, 300 / 4];
    y = [-5, 40, 52, 64, 76, 78, 90, 95];
    w = 11;
    h = 10;
    this.buttons.B960 = new B960(50, y[0], 100, 10);
    this.buttons.BNumber = new BNumber(50, 20);
    this.buttons.R1 = new BAdv960('R1', x[0], y[1], w, h, '1');
    this.buttons.R2 = new BAdv960('R2', x[0], y[2], w, h, '2');
    this.buttons.R4 = new BAdv960('R4', x[0], y[3], w, h, '4');
    this.buttons.R8 = new BAdv960('R8', x[0], y[4], w, h, '8');
    this.buttons.R15 = new BAdv960('R15', x[1], y[1], w, h, '15');
    this.buttons.R30 = new BAdv960('R30', x[1], y[2], w, h, '30');
    this.buttons.R60 = new BAdv960('R60', x[1], y[3], w, h, '60');
    this.buttons.R120 = new BAdv960('R120', x[2], y[1], w, h, '120');
    this.buttons.R240 = new BAdv960('R240', x[2], y[2], w, h, '240');
    this.buttons.R480 = new BAdv960('R480', x[2], y[3], w, h, '480');
    this.buttons.random = new BRounded((x[1] + x[2]) / 2, y[4], 18, 6, 'random');
    this.buttons.basic = new BRounded(1 * 100 / 10, y[7], 18, 6, 'basic');
    this.buttons.adv = new BRounded(3 * 100 / 10, y[7], 18, 6, 'adv');
    this.buttons.b960 = new BRounded(5 * 100 / 10, y[7], 18, 6, '960', true);
    this.buttons.cancel = new BRounded(7 * 100 / 10, y[7], 18, 6, 'cancel');
    return this.buttons.ok = new BRounded(9 * 100 / 10, y[7], 18, 6, 'ok');
  }

  message(key) {
    var k, len, nr, ref, value;
    if (key === 'adv') {

    } else if (key === 'basic') {

    } else if (key === 'b960') {

    } else if (key === 'cancel') {
      settings.cancel();
    } else if (key === 'ok') {
      settings.ok();
    } else if (key[0] === 'R') {
      settings.flip960(key); // 10 buttons
      console.log(settings.number);
      this.buttons.B960.visible = settings.number < 960;
    } else if (key === 'random') {
      nr = _.random(0, 959);
      settings.number = nr;
      settings.bits960 = [];
      ref = [480, 240, 120, 60, 30, 15, 8, 4, 2, 1];
      for (k = 0, len = ref.length; k < len; k++) {
        value = ref[k];
        if (nr >= value) {
          nr -= value;
          settings.flip960('R' + value);
        }
      }
      this.buttons.B960.visible = settings.number < 960;
    }
    return super.message(key);
  }

};

//##################################
preload = function() {
  var k, len, ltr, ref, results;
  qr = loadImage('qr.png');
  sound = loadSound('key.mp3');
  ref = "KQRBN";
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    ltr = ref[k];
    results.push(chess[ltr] = loadImage(`chess\\${ltr}.png`));
  }
  return results;
};

windowResized = function() {
  resizeCanvas(innerWidth, innerHeight);
  return diag = sqrt(width * width + height * height);
};

setup = function() {
  var canvas;
  settings = new CSettings();
  frameRate(FRAMERATE);
  os = navigator.appVersion;
  if (os.indexOf('Linux') >= 0) {
    os = 'Android';
  }
  if (os.indexOf('Windows') >= 0) {
    os = 'Windows';
  }
  if (os.indexOf('Mac') >= 0) {
    os = 'Mac';
  }
  canvas = createCanvas(innerWidth, innerHeight);
  bodyScrollLock.disableBodyScroll(canvas); // Förhindrar att man kan scrolla canvas på iOS
  if (os === 'Android') {
    textFont('Droid Sans');
  }
  if (os === 'Mac') {
    textFont('Verdana');
  }
  if (os === 'Windows') {
    textFont('Lucida Sans Unicode');
  }
  TOGGLE = os === 'Mac' ? 1 : 0;
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  createState('SClock', SClock);
  createState('SAdv', SAdv);
  createState('SBasic', SBasic);
  createState('S960', S960);
  
  //dump()
  return currState = states.SClock;
};

dump = function() { // log everything
  var button, results, skey, state, tkey, transition;
  results = [];
  for (skey in states) {
    state = states[skey];
    console.log('');
    console.log('State', state);
    results.push((function() {
      var results1;
      results1 = [];
      for (tkey in state.transitions) {
        transition = state.transitions[tkey];
        button = state.buttons[tkey];
        if (transition === void 0) {
          transition = 'nothing';
        }
        results1.push(console.log(' ', tkey, '=>', transition, button));
      }
      return results1;
    })());
  }
  return results;
};

mouseClicked = function() {
  return currState.mouseClicked();
};

draw = function() {
  var aspect;
  if (TOGGLE === 0) {
    scale(width / 100, height / 100); // portrait
  } else {
    rotate(90);
    translate(0, -width);
    scale(height / 100, width / 100); // Landscape
  }
  strokeWeight(100 / height);
  push();
  background('black');
  settings.tick();
  currState.draw();
  pop();
  settings.save();
  // debug
  aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return text(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
  return debugFunction();
};

debugFunction = function() {};

// rates.push frameRate()
// if rates.length > 100 then oldest = rates.shift() else oldest = rates[0]
// sumRate += _.last(rates) - oldest
//textSize 3
// text Math.round(sumRate),50,40
//text settings.chess960,50,60

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee