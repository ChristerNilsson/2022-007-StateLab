// Generated by CoffeeScript 2.5.1
  // TODO
  // Försämring av frameRate inträffar om man går från fullscreen till normal på Android
  // Ta bort S och m ?
var BBasic, BColor, BDead, BEdit, BImage, BPause, BRotate, BRounded, BSettings, BShow, Button, FRAMERATE, HCP, HEARTBEAT, HOUR, MINUTE, SAdvanced, SBasic, SClock, State, TOGGLE, backup, clone, createState, currState, d2, debugFunction, diag, draw, dump, getLocalCoords, hms, lastStorageSave, loadSettings, mouseClicked, os, preload, pretty, prettyPair, qr, rates, saveSettings, settings, setup, sound, states, sumRate, trunc3, windowResized,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

HCP = 1;

HOUR = 3600;

MINUTE = 60;

TOGGLE = 1; // 0=porträtt (Android) 1=landskap (Mac)

HEARTBEAT = 1000; // ms updates of localStorage

FRAMERATE = 30; // 10

settings = {};

backup = null;

states = {};

qr = null;

currState = null;

os = '';

sound = null;

lastStorageSave = new Date();

rates = [];

sumRate = 0;

diag = 0;

getLocalCoords = function() { // tar 3 microsekunder
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

trunc3 = function(x) {
  return Math.trunc(x * 1000) / 1000;
};

console.assert(trunc3(12.345678) === 12.345);

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (trunc3(h) > 0) {
    header += trunc3(h) + 'h';
  }
  if (trunc3(m) > 0) {
    header += trunc3(m) + 'm';
  }
  if (trunc3(s) > 0) {
    header += trunc3(s) + 's';
  }
  return header;
};

console.assert(pretty(3601) === '1h1s');

console.assert(pretty(123) === '2m3s');

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

console.assert(prettyPair(3601, 123) === '1h1s + 2m3s');

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.assert(d2(3) === '03');

hms = function(x) {
  var h, m, orig, s;
  orig = x;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  if (orig < 10) {
    s = Math.trunc(s * 10) / 10;
  }
  return [h, m, s];
};

chai.assert.deepEqual(hms(180), [0, 3, 0]);

chai.assert.deepEqual(hms(180.5), [0, 3, 0.5]);

clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

Button = class Button {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'white', fg1 = 'black') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.bg);
      rect(this.x, this.y, this.w, this.h);
      textSize(4);
      fill(this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

  inside(x, y) {
    var ref, ref1;
    return (-this.w / 2 <= (ref = x - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

BRounded = class BRounded extends Button {
  constructor(x, y, w, h, text = '', bg = 'white', fg = 'black') {
    super(x, y, w, h, text, bg, fg);
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.bg);
      rect(this.x, this.y, this.w, this.h, this.h / 2);
      textSize(4);
      fill(this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

};

BPause = class BPause extends Button {
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    if (!settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

BSettings = class BSettings extends Button { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    var k, len, ref, v;
    if (settings.paused) {
      push();
      translate(this.x, this.y);
      scale([height / width, width / height][TOGGLE], 1);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      for (k = 0, len = ref.length; k < len; k++) {
        v = ref[k];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        pop();
      }
      return pop();
    }
  }

};

BImage = class BImage extends Button {
  constructor(x, y, w, h, image1) {
    super(x, y, w, h);
    this.image = image1;
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

BRotate = class BRotate extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player1) {
    super(x, y, w, h, '', bg, fg);
    this.degrees = degrees;
    this.player = player1;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = settings.clocks[this.player];
    [h, m, s] = hms(secs);
    if (h >= 1) {
      ss = h + ':' + d2(m);
    } else {
      ss = m + ':' + (secs < 10 ? s.toFixed(1) : d2(s));
    }
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    if (settings.timeout && settings.player === this.player) {
      this.bg = 'red';
      this.fg = 'black';
    }
    fill(this.bg);
    rect(0, 0, this.w, this.h);
    fill(this.fg);
    textSize(18 + 9);
    text(ss, 0, -2);
    textSize(5 + 3);
    //text (if h==0 then 'm:ss' else 'h:mm'),0,17
    if (settings.bonuses[this.player] > 0) {
      text('+' + pretty(settings.bonuses[this.player]), 0, 17);
    }
    return pop();
  }

};

BEdit = class BEdit extends Button {
  constructor(name1, x, y, w, h, text) {
    super(x, y, w, h, text, 'black');
    this.name = name1;
  }

  draw() {
    var ref;
    push();
    translate(this.x, this.y);
    fill((ref = this.name, indexOf.call(settings.bits, ref) >= 0) ? 'yellow' : 'white');
    scale([height / width, width / height][TOGGLE], 1);
    circle(0, 0, 8);
    fill('black');
    textSize(5);
    text(this.text, 0, 0.2);
    return pop();
  }

  inside(x, y) {
    var dx, dy;
    dx = x - this.x;
    dy = y - this.y;
    return sqrt(dx * dx + dy * dy) < 5;
  }

};

BBasic = class BBasic extends BEdit {
  constructor(x, y, w, h, text) {
    super('', x, y, w, h, text);
  }

  draw() {
    push();
    translate(this.x, this.y);
    fill('white');
    scale([height / width, width / height][TOGGLE], 1);
    circle(0, 0, 8);
    fill('black');
    textSize(5);
    text(this.text, 0, 0.2);
    return pop();
  }

};

BDead = class BDead extends Button {
  constructor(x, y, text, fg = 'lightgray') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

BShow = class BShow extends BDead {
  constructor(x, y, fg = 'lightgray') {
    super(x, y, 0, 0, '', 'black', fg);
  }

  draw() {
    this.text = settings.show;
    return super.draw();
  }

};

BColor = class BColor extends Button {
  constructor(x, y, fg1) {
    super(x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor(name1) {
    this.name = name1;
    this.buttons = {};
    this.transitions = {};
    this.makeButtons();
  }

  createTrans(t) {
    var arr, k, len, results, target, word;
    target = void 0;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      word = arr[k];
      if (word === '=>') {
        results.push(target = void 0);
      } else if (word.indexOf('=>') === 0) {
        results.push(target = word.slice(2));
      } else {
        results.push(this.transitions[word] = target);
      }
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    return currState = states[this.transitions[key]];
  }

  draw() {
    var results, tkey;
    results = [];
    for (tkey in this.transitions) {
      if (tkey in this.buttons) {
        results.push(this.buttons[tkey].draw());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  mouseClicked() {
    var button, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.transitions) {
      if (this.transitions[key] === void 0) {
        continue;
      }
      button = this.buttons[key];
      if (button.visible && button.inside(x, y)) {
        this.message(key);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

SClock = class SClock extends State {
  constructor(name) {
    super(name);
    this.createTrans('=>SClock left pause qr right =>SBasic edit => show');
    settings.paused = true;
    settings.player = -1;
  }

  makeButtons() {
    this.buttons.left = new BRotate(50, 22, 100, 44, 180, 'orange', 'white', 0); // eg up
    this.buttons.right = new BRotate(50, 78, 100, 44, 0, 'green', 'white', 1); // eg down
    this.buttons.show = new BShow(22, 50, 'black');
    this.buttons.qr = new BImage(50, 50, 33, 12, qr);
    this.buttons.pause = new BPause(67, 50, 17, 12, 'white', 'black');
    return this.buttons.edit = new BSettings(83, 50, 17, 12, 'white', 'black');
  }

  uppdatera() {
    var clock;
    if (settings.paused) {
      return;
    }
    clock = settings.clocks[settings.player];
    if (clock > 0) {
      clock -= 1 / frameRate();
    }
    if (clock <= 0) {
      clock = 0;
      settings.timeout = true;
      settings.paused = true;
    }
    return settings.clocks[settings.player] = clock;
  }

  handlePlayer(player) {
    var ref;
    if ((ref = settings.player) === (-1) || ref === player) {
      sound.play();
      settings.clocks[player] += settings.bonuses[player];
    }
    settings.paused = false;
    settings.player = 1 - player;
    this.buttons.left.fg = ['black', 'white'][player];
    return this.buttons.right.fg = ['white', 'black'][player];
  }

  message(key) {
    if (key === 'left') {
      if (settings.timeout) {
        return;
      } else {
        this.handlePlayer(0);
      }
    } else if (key === 'right') {
      if (settings.timeout) {
        return;
      } else {
        this.handlePlayer(1);
      }
    } else if (key === 'pause') {
      settings.paused = true;
      this.buttons.left.fg = settings.player === 0 ? 'white' : 'black';
      this.buttons.right.fg = settings.player === 0 ? 'black' : 'white';
    } else if (key === 'qr') {
      fullscreen(true);
      resizeCanvas(innerWidth, innerHeight);
    } else if (key === 'edit') {
      backup = clone(settings); // to be used by cancel
      console.log('backup skapad', backup);
    }
    saveSettings();
    return super.message(key);
  }

  draw() {
    background('white');
    return super.draw();
  }

};

SBasic = class SBasic extends State {
  constructor(name) {
    var arr;
    super(name);
    arr = '=> bonus green hcp orange reflection white M s =>SClock cancel ok =>SAdvanced advanced =>SBasic M1 M2 M3 M5 M10 M90 s0 s1 s2 s3 s5 s10 s30'.split(' ');
    this.createTrans(arr.join(' '));
  }

  makeButtons() {
    var h, w, x, y;
    x = [100 / 3, 200 / 3];
    y = [32, 41, 50, 59, 68, 77, 86, 95];
    w = 10;
    h = 7;
    this.buttons.orange = states.SAdvanced.buttons.orange;
    this.buttons.white = states.SAdvanced.buttons.white;
    this.buttons.green = states.SAdvanced.buttons.green;
    this.buttons.reflection = new BDead(x[0], 20, 'reflection');
    this.buttons.bonus = new BDead(x[1], 20, 'bonus');
    this.buttons.M = new BDead(x[0], 25, 'M');
    this.buttons.M1 = new BBasic(x[0], y[1], w, h, '1');
    this.buttons.M2 = new BBasic(x[0], y[2], w, h, '2');
    this.buttons.M3 = new BBasic(x[0], y[3], w, h, '3');
    this.buttons.M5 = new BBasic(x[0], y[4], w, h, '5');
    this.buttons.M10 = new BBasic(x[0], y[5], w, h, '10');
    this.buttons.M90 = new BBasic(x[0], y[6], w, h, '90');
    this.buttons.s = new BDead(x[1], 25, 's');
    this.buttons.s0 = new BBasic(x[1], y[0], w, h, '0');
    this.buttons.s1 = new BBasic(x[1], y[1], w, h, '1');
    this.buttons.s2 = new BBasic(x[1], y[2], w, h, '2');
    this.buttons.s3 = new BBasic(x[1], y[3], w, h, '3');
    this.buttons.s5 = new BBasic(x[1], y[4], w, h, '5');
    this.buttons.s10 = new BBasic(x[1], y[5], w, h, '10');
    this.buttons.s30 = new BBasic(x[1], y[6], w, h, '30');
    this.buttons.advanced = new BRounded(1 * 100 / 6, y[7], 26, 6, 'advanced');
    this.buttons.cancel = new BRounded(3 * 100 / 6, y[7], 26, 6, 'cancel');
    return this.buttons.ok = new BRounded(5 * 100 / 6, y[7], 26, 6, 'ok');
  }

  message(key) {
    var st;
    if (key === 'advanced') {

    } else if (key === 'basic') {

    } else if (key === 'cancel') {
      settings = clone(backup); // Återställ allt som behövs
    //settings.sums = states.SAdvanced.calcSums()
    } else if (key === 'ok') {
      settings.clocks = [settings.players[0][0], settings.players[1][0]];
      settings.bonuses = [settings.players[0][1], settings.players[1][1]];
      settings.timeout = false; // 6+7 shortcut buttons
    } else {
      st = settings;
      st.bits = st.bits.filter(function(value, index, arr) {
        return value[0] !== key[0];
      });
      if (key[0] === 'M') {
        st.bits = st.bits.filter(function(value, index, arr) {
          return value[0] !== 'H';
        });
      }
      console.log('filter', st.bits);
      states.SAdvanced.message(key);
      st.sums = states.SAdvanced.calcSums();
      this.buttons.ok.visible = true; //st.sums.H + st.sums.M + st.sums.S > 0 and st.sums.t < 60
    }
    return super.message(key);
  }

};

SAdvanced = class SAdvanced extends State {
  constructor(name) {
    var arr, k, l, len, len1, letter, number, ref, ref1;
    super(name);
    arr = '=> green white orange reflection bonus hcp H M S m s t =>SClock cancel ok =>SBasic basic =>SAdvanced'.split(' ');
    ref = 'HMSmst';
    for (k = 0, len = ref.length; k < len; k++) {
      letter = ref[k];
      ref1 = [1, 2, 4, 8, 15, 30];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        number = ref1[l];
        arr.push(letter + number);
      }
    }
    this.createTrans(arr.join(' '));
    this.uppdatera();
  }

  makeButtons() {
    this.buttons.orange = new BColor(50, 3, 'orange');
    this.buttons.white = new BColor(50, 9, 'white');
    this.buttons.green = new BColor(50, 15, 'green');
    this.buttons.reflection = new BDead(25, 21, 'reflection');
    this.buttons.bonus = new BDead(66, 21, 'bonus');
    this.buttons.hcp = new BDead(92, 21, 'hcp');
    this.buttons.basic = new BRounded(1 * 100 / 6, 95, 26, 6, 'basic');
    this.buttons.cancel = new BRounded(3 * 100 / 6, 95, 26, 6, 'cancel');
    this.buttons.ok = new BRounded(5 * 100 / 6, 95, 26, 6, 'ok');
    return this.makeEditButtons();
  }

  makeEditButtons() {
    var i, j, k, len, letter, name, number, ref, results, xoff, xsize, yoff, ysize;
    ref = range(6);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      xsize = 100 / 6;
      ysize = 100 / 10;
      xoff = xsize / 2;
      yoff = 33 + 2;
      this.buttons[letter] = new BDead(xoff + xsize * i, 26 + 2, 'HMSmst'[i]);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(6);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30][j];
          name = letter + number;
          results1.push(this.buttons[name] = new BEdit(name, xoff + xsize * i, yoff + ysize * j, xsize, ysize, number));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  message(key) {
    var hash, k, len, msg, ref, st;
    if (key === 'basic') {

    } else if (key === 'advanced') {

    } else if (key === 'cancel') {
      settings = clone(backup); // Återställ allt som behövs
    } else if (key === 'ok') {
      settings.clocks = [settings.players[0][0], settings.players[1][0]];
      settings.bonuses = [settings.players[0][1], settings.players[1][1]];
      settings.timeout = false;
    } else {
      hash = {
        'M3': 'M1 M2',
        'M5': 'M1 M4',
        'M10': 'M2 M8',
        'M90': 'H1 M30',
        's0': '',
        's3': 's1 s2',
        's5': 's1 s4',
        's10': 's2 s8'
      };
      if (key in hash) {
        ref = hash[key].split(' ');
        for (k = 0, len = ref.length; k < len; k++) {
          msg = ref[k];
          if (msg !== '') {
            this.message(msg); // 6 x 6 edit buttons
          }
        }
      } else {
        st = settings;
        st.bits = this.flip(st.bits, key);
        st.sums = this.calcSums();
        this.buttons.ok.visible = st.sums.H + st.sums.M + st.sums.S > 0 && st.sums.t < 60;
      }
    }
    this.uppdatera();
    return super.message(key);
  }

  flip(arr, key) {
    if (indexOf.call(arr, key) >= 0) {
      _.remove(arr, function(n) {
        return n === key;
      });
    } else {
      arr.push(key);
    }
    return arr;
  }

  calcSums() {
    var k, key, len, letter, number, ref, res;
    res = {
      H: 0,
      M: 0,
      S: 0,
      m: 0,
      s: 0,
      t: 0
    };
    ref = settings.bits;
    for (k = 0, len = ref.length; k < len; k++) {
      key = ref[k];
      letter = key[0];
      number = parseInt(key.slice(1));
      res[letter] += number;
    }
    return res;
  }

  uppdatera() {
    var sp;
    settings.sums = this.calcSums();
    settings.show = this.compact();
    this.buttons.white.text = settings.show;
    this.handicap();
    sp = settings.players;
    this.buttons.orange.text = settings.hcp === 0 ? '' : prettyPair(sp[0][0], sp[0][1]);
    return this.buttons.green.text = settings.hcp === 0 ? '' : prettyPair(sp[1][0], sp[1][1]);
  }

  compact() {
    var header, header0, header1, headers, i, k, key, keys, l, len, len1, ref, ref1;
    keys = 'HMSms';
    headers = 'hmsms';
    header0 = '';
    header1 = '';
    ref = [0, 1, 2];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      key = keys[i];
      if (settings.sums[key] > 0) {
        header0 += settings.sums[key] + headers[i];
      }
    }
    ref1 = [3, 4];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      key = keys[i];
      if (settings.sums[key] > 0) {
        header1 += settings.sums[key] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += '+' + header1;
    }
    if (settings.sums.t > 0) {
      header += '\n' + settings.sums.t;
    }
    return header;
  }

  handicap() {
    var st;
    st = settings;
    st.hcp = st.sums.t / (HCP * 60); // 0.0 .. 1.0
    st.refl = HOUR * st.sums.H + MINUTE * st.sums.M + st.sums.S; // sekunder
    st.bonus = MINUTE * st.sums.m + st.sums.s; // sekunder
    st.players = [];
    st.players[0] = [st.refl + st.refl * st.hcp, st.bonus + st.bonus * st.hcp];
    return st.players[1] = [st.refl - st.refl * st.hcp, st.bonus - st.bonus * st.hcp];
  }

};

//##################################
preload = function() {
  qr = loadImage('qr.png');
  return sound = loadSound('key.mp3');
};

windowResized = function() {
  resizeCanvas(innerWidth, innerHeight);
  return diag = sqrt(width * width + height * height);
};

setup = function() {
  var canvas;
  frameRate(FRAMERATE);
  os = navigator.appVersion;
  if (os.indexOf('Linux') >= 0) {
    os = 'Android';
  }
  if (os.indexOf('Windows') >= 0) {
    os = 'Windows';
  }
  if (os.indexOf('Mac') >= 0) {
    os = 'Mac';
  }
  canvas = createCanvas(innerWidth, innerHeight);
  bodyScrollLock.disableBodyScroll(canvas); // Förhindrar att man kan scrolla canvas på iOS
  if (os === 'Android') {
    textFont('Droid Sans');
  }
  if (os === 'Mac') {
    textFont('Verdana');
  }
  if (os === 'Windows') {
    textFont('Lucida Sans Unicode');
  }
  TOGGLE = os === 'Mac' ? 1 : 0;
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  settings = loadSettings();
  createState('SClock', SClock);
  createState('SAdvanced', SAdvanced);
  createState('SBasic', SBasic);
  
  //dump()
  return currState = states.SClock;
};

dump = function() { // log everything
  var button, results, skey, state, tkey, transition;
  results = [];
  for (skey in states) {
    state = states[skey];
    console.log('');
    console.log('State', state);
    results.push((function() {
      var results1;
      results1 = [];
      for (tkey in state.transitions) {
        transition = state.transitions[tkey];
        button = state.buttons[tkey];
        if (transition === void 0) {
          transition = 'nothing';
        }
        results1.push(console.log(' ', tkey, '=>', transition, button));
      }
      return results1;
    })());
  }
  return results;
};

mouseClicked = function() {
  return currState.mouseClicked();
};

draw = function() {
  var aspect;
  if (TOGGLE === 0) {
    scale(width / 100, height / 100); // portrait
  } else {
    rotate(90);
    translate(0, -width);
    scale(height / 100, width / 100); // Landscape
  }
  strokeWeight(100 / height);
  push();
  background('black');
  states.SClock.uppdatera();
  currState.draw();
  pop();
  saveSettings();
  // debug
  aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return text(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
  return debugFunction();
};

debugFunction = function() {
  var oldest;
  rates.push(frameRate());
  if (rates.length > 100) {
    oldest = rates.shift();
  } else {
    oldest = rates[0];
  }
  sumRate += _.last(rates) - oldest;
  textSize(2.5);
  return text(Math.round(sumRate), 95, 5);
};

loadSettings = function() {
  if (localStorage.settings) {
    settings = JSON.parse(localStorage.settings);
    settings.paused = true;
  } else {
    settings = {};
    settings.show = '3m2s';
    settings.bits = ['M1', 'M2', 's2'];
    settings.clocks = [180, 180];
    settings.bonuses = [2, 2];
    settings.sums = [
      {
        H: 0,
        M: 3,
        S: 0,
        m: 0,
        S: 2,
        t: 0
      }
    ];
    settings.player = -1;
    settings.timeout = false;
    settings.paused = true;
    localStorage.settings = JSON.stringify(settings);
  }
  console.log('loadSettings', settings);
  return settings;
};

saveSettings = function() {
  var d;
  d = new Date();
  if (d - lastStorageSave < HEARTBEAT) { // ms
    return;
  }
  lastStorageSave = d;
  localStorage.settings = JSON.stringify(settings);
  return console.log('saveSettings', localStorage.settings);
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVtQjs7O0FBQUEsSUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxPQUFBLEVBQUEsUUFBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUEsRUFBQSxHQUFBLEVBQUEsU0FBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLGFBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxjQUFBLEVBQUEsR0FBQSxFQUFBLGVBQUEsRUFBQSxZQUFBLEVBQUEsWUFBQSxFQUFBLEVBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLFVBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsRUFBQSxRQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxhQUFBO0VBQUE7OztBQUVuQixHQUFBLEdBQU07O0FBQ04sSUFBQSxHQUFPOztBQUNQLE1BQUEsR0FBUzs7QUFFVCxNQUFBLEdBQVMsRUFOVTs7QUFPbkIsU0FBQSxHQUFZLEtBUE87O0FBU25CLFNBQUEsR0FBWSxHQVRPOztBQVduQixRQUFBLEdBQVcsQ0FBQTs7QUFDWCxNQUFBLEdBQVM7O0FBQ1QsTUFBQSxHQUFTLENBQUE7O0FBRVQsRUFBQSxHQUFLOztBQUNMLFNBQUEsR0FBWTs7QUFDWixFQUFBLEdBQUs7O0FBQ0wsS0FBQSxHQUFROztBQUNSLGVBQUEsR0FBa0IsSUFBSSxJQUFKLENBQUE7O0FBRWxCLEtBQUEs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QUM7SUFFL0MsSUFBQyxDQUFBLE9BQU8sQ0FBQyxVQUFULEdBQXNCLElBQUksS0FBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsRUFBaEIsRUFBbUIsWUFBbkI7SUFDdEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFULEdBQXNCLElBQUksS0FBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsRUFBaEIsRUFBbUIsT0FBbkI7SUFFdEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxDQUFULEdBQXNCLElBQUksS0FBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBaUIsRUFBakIsRUFBcUIsR0FBckI7SUFFdEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULEdBQW1CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsR0FBM0I7SUFDbkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULEdBQW1CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsR0FBM0I7SUFDbkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULEdBQW1CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsR0FBM0I7SUFDbkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULEdBQW1CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsR0FBM0I7SUFDbkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxHQUFULEdBQW9CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsSUFBM0I7SUFDcEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxHQUFULEdBQW9CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsSUFBM0I7SUFFcEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxDQUFULEdBQXNCLElBQUksS0FBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBaUIsRUFBakIsRUFBcUIsR0FBckI7SUFFdEIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULEdBQW1CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsR0FBM0I7SUFDbkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULEdBQW1CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsR0FBM0I7SUFDbkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULEdBQW1CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsR0FBM0I7SUFDbkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULEdBQW1CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxDQUFELENBQVosRUFBZ0IsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBc0IsQ0FBdEIsRUFBd0IsQ0FBeEIsRUFBMkIsR0FBM0I7SUFDbkIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULEdBQW1CLElBQUksTUFBSixDQUFXLENBQUMsQ0FBQyxD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SUFJQyxRQUFBLEdBQVcsQ0FBQTtJQUNYLFFBQVEsQ0FBQyxJQUFULEdBQWdCO0lBQ2hCLFFBQVEsQ0FBQyxJQUFULEdBQWdCLENBQUMsSUFBRCxFQUFNLElBQU4sRUFBVyxJQUFYO0lBQ2hCLFFBQVEsQ0FBQyxNQUFULEdBQWtCLENBQUMsR0FBRCxFQUFLLEdBQUw7SUFDbEIsUUFBUSxDQUFDLE9BQVQsR0FBa0IsQ0FBQyxDQUFELEVBQUcsQ0FBSDtJQUNsQixRQUFRLENBQUMsSUFBVCxHQUFnQjtNQUFDO1FBQUEsQ0FBQSxFQUFFLENBQUY7UUFBSSxDQUFBLEVBQUUsQ0FBTjtRQUFRLENBQUEsRUFBRSxDQUFWO1FBQVksQ0FBQSxFQUFFLENBQWQ7UUFBZ0IsQ0FBQSxFQUFFLENBQWxCO1FBQW9CLENBQUEsRUFBRTtNQUF0QixDQUFEOztJQUNoQixRQUFRLENBQUMsTUFBVCxHQUFrQixDQUFDO0lBQ25CLFFBQVEsQ0FBQyxPQUFULEdBQW1CO0lBQ25CLFFBQVEsQ0FBQyxNQUFULEdBQWtCO0lBQ2xCLFlBQVksQ0FBQyxRQUFiLEdBQXdCLElBQUksQ0FBQyxTQUFMLENBQWUsUUFBZixFQWJ6Qjs7RUFjQSxPQUFPLENBQUMsR0FBUixDQUFZLGNBQVosRUFBNEIsUUFBNUI7U0FDQTtBQWhCYzs7QUFrQmYsWUFBQSxHQUFlLFFBQUEsQ0FBQSxDQUFBO0FBQ2YsTUFBQTtFQUFDLENBQUEsR0FBSSxJQUFJLElBQUosQ0FBQTtFQUNKLElBQUcsQ0FBQSxHQUFJLGVBQUosR0FBc0IsU0FBekI7QUFBd0MsV0FBeEM7O0VBQ0EsZUFBQSxHQUFrQjtFQUNsQixZQUFZLENBQUMsUUFBYixHQUF3QixJQUFJLENBQUMsU0FBTCxDQUFlLFFBQWY7U0FDeEIsT0FBTyxDQUFDLEdBQVIsQ0FBWSxjQUFaLEVBQTJCLFlBQVksQ0FBQyxRQUF4QztBQUxjIiwic291cmNlc0NvbnRlbnQiOlsiIyBUT0RPXHJcbiMgRsO2cnPDpG1yaW5nIGF2IGZyYW1lUmF0ZSBpbnRyw6RmZmFyIG9tIG1hbiBnw6VyIGZyw6VuIGZ1bGxzY3JlZW4gdGlsbCBub3JtYWwgcMOlIEFuZHJvaWRcclxuIyBUYSBib3J0IFMgb2NoIG0gP1xyXG5cclxuSENQID0gMVxyXG5IT1VSID0gMzYwMFxyXG5NSU5VVEUgPSA2MFxyXG5cclxuVE9HR0xFID0gMSAjIDA9cG9ydHLDpHR0IChBbmRyb2lkKSAxPWxhbmRza2FwIChNYWMpXHJcbkhFQVJUQkVBVCA9IDEwMDAgIyBtcyB1cGRhdGVzIG9mIGxvY2FsU3RvcmFnZVxyXG5cclxuRlJBTUVSQVRFID0gMzAgIyAxMFxyXG5cclxuc2V0dGluZ3MgPSB7fVxyXG5iYWNrdXAgPSBudWxsXHJcbnN0YXRlcyA9IHt9XHJcblxyXG5xciA9IG51bGxcclxuY3VyclN0YXRlID0gbnVsbFxyXG5vcyA9ICcnXHJcbnNvdW5kID0gbnVsbFxyXG5sYXN0U3RvcmFnZVNhdmUgPSBuZXcgRGF0ZSgpXHJcblxyXG5yYXRlcyA9IFtdXHJcbnN1bVJhdGUgPSAwXHJcblxyXG5kaWFnID0gMCBcclxuXHJcbmdldExvY2FsQ29vcmRzID0gLT4gIyB0YXIgMyBtaWNyb3Nla3VuZGVyXHJcblx0bWF0cml4ID0gZHJhd2luZ0NvbnRleHQuZ2V0VHJhbnNmb3JtKClcclxuXHRwZCA9IHBpeGVsRGVuc2l0eSgpXHJcblx0bWF0cml4LmludmVyc2UoKS50cmFuc2Zvcm1Qb2ludCBuZXcgRE9NUG9pbnQgbW91c2VYICogcGQsbW91c2VZICogcGRcclxuXHJcbmNyZWF0ZVN0YXRlID0gKGtleSxrbGFzcykgLT4gc3RhdGVzW2tleV0gPSBuZXcga2xhc3Mga2V5XHJcblxyXG50cnVuYzMgPSAoeCkgLT4gTWF0aC50cnVuYyh4KjEwMDApLzEwMDBcclxuY29uc29sZS5hc3NlcnQgdHJ1bmMzKDEyLjM0NTY3OCk9PTEyLjM0NVxyXG5cclxucHJldHR5ID0gKHRvdCkgLT5cclxuXHRzID0gdG90ICUgNjBcclxuXHR0b3QgPSAodG90IC0gcykgLyA2MFxyXG5cdG0gPSB0b3QgJSA2MFxyXG5cdHRvdCA9ICh0b3QgLSBtKSAvIDYwXHJcblx0aCA9IHRvdCAlIDYwXHJcblx0aGVhZGVyID0gJydcclxuXHRpZiB0cnVuYzMoaCk+MCB0aGVuIGhlYWRlciArPSB0cnVuYzMoaCkgKyAnaCdcclxuXHRpZiB0cnVuYzMobSk+MCB0aGVuIGhlYWRlciArPSB0cnVuYzMobSkgKyAnbSdcclxuXHRpZiB0cnVuYzMocyk+MCB0aGVuIGhlYWRlciArPSB0cnVuYzMocykgKyAncydcclxuXHRoZWFkZXJcclxuY29uc29sZS5hc3NlcnQgcHJldHR5KDM2MDEpID09ICcxaDFzJ1xyXG5jb25zb2xlLmFzc2VydCBwcmV0dHkoMTIzKSA9PSAnMm0zcydcclxuXHJcbnByZXR0eVBhaXIgPSAoYSxiKSAtPlxyXG5cdHNlcGFyYXRvciA9IGlmIHByZXR0eShiKSAhPSAnJyB0aGVuICcgKyAnIGVsc2UgJydcclxuXHRwcmV0dHkoYSkgKyBzZXBhcmF0b3IgKyBwcmV0dHkoYilcclxuY29uc29sZS5hc3NlcnQgcHJldHR5UGFpcigzNjAxLDEyMykgPT0gJzFoMXMgKyAybTNzJ1xyXG5cclxuZDIgPSAoeCkgLT5cclxuXHR4ID0gTWF0aC50cnVuYyB4XHJcblx0aWYgeCA8IDEwIHRoZW4gJzAnK3ggZWxzZSB4XHJcbmNvbnNvbGUuYXNzZXJ0IGQyKDMpID09ICcwMydcclxuXHJcbmhtcyA9ICh4KSAtPlxyXG5cdG9yaWcgPSB4XHJcblx0cyA9IHggJSUgNjBcclxuXHR4ID0geCAvLyA2MFxyXG5cdG0gPSB4ICUlIDYwXHJcblx0eCA9IHggLy8gNjBcclxuXHRoID0geFxyXG5cdGlmIG9yaWcgPCAxMCB0aGVuIHMgPSBNYXRoLnRydW5jKHMqMTApLzEwIFxyXG5cdFtoLG0sc10gXHJcbmNoYWkuYXNzZXJ0LmRlZXBFcXVhbCBobXMoMTgwKSwgWzAsMywwXVxyXG5jaGFpLmFzc2VydC5kZWVwRXF1YWwgaG1zKDE4MC41KSwgWzAsMywwLjVdXHJcblxyXG5jbG9uZSA9ICh4KSAtPiBKU09OLnBhcnNlIEpTT04uc3RyaW5naWZ5IHhcclxuXHJcbmNsYXNzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5LEB3LEBoLEB0ZXh0PScnLEBiZz0nd2hpdGUnLEBmZz0nYmxhY2snKSAtPlxyXG5cdFx0QHZpc2libGUgPSB0cnVlXHJcblx0XHRAeCA9IE1hdGgucm91bmQgQHhcclxuXHRcdEB5ID0gTWF0aC5yb3VuZCBAeVxyXG5cdFx0QHcgPSBNYXRoLnJvdW5kIEB3XHJcblx0XHRAaCA9IE1hdGgucm91bmQgQGhcclxuXHRkcmF3IDogLT5cclxuXHRcdGlmIEB2aXNpYmxlXHJcblx0XHRcdHB1c2goKVxyXG5cdFx0XHRmaWxsIEBiZ1xyXG5cdFx0XHRyZWN0IEB4LEB5LEB3LEBoXHJcblx0XHRcdHRleHRTaXplIDRcclxuXHRcdFx0ZmlsbCBAZmdcclxuXHRcdFx0dGV4dCBAdGV4dCxAeCxAeVxyXG5cdFx0XHRwb3AoKVxyXG5cdGluc2lkZSA6ICh4LHkpIC0+IC1Ady8yIDw9IHgtQHggPD0gQHcvMiBhbmQgLUBoLzIgPD0geS1AeSA8PSBAaC8yXHJcblxyXG5jbGFzcyBCUm91bmRlZCBleHRlbmRzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSx3LGgsdGV4dD0nJyxiZz0nd2hpdGUnLGZnPSdibGFjaycpIC0+XHJcblx0XHRzdXBlciB4LHksdyxoLHRleHQsYmcsZmdcclxuXHRkcmF3IDogLT5cclxuXHRcdGlmIEB2aXNpYmxlXHJcblx0XHRcdHB1c2goKVxyXG5cdFx0XHRmaWxsIEBiZ1xyXG5cdFx0XHRyZWN0IEB4LEB5LEB3LEBoLEBoLzJcclxuXHRcdFx0dGV4dFNpemUgNFxyXG5cdFx0XHRmaWxsIEBmZ1xyXG5cdFx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblx0XHRcdHBvcCgpXHJcblxyXG5jbGFzcyBCUGF1c2UgZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksdz0wLGg9MCxAYmc9J3doaXRlJyxAZmc9J2JsYWNrJykgLT5cclxuXHRcdHN1cGVyIHgseSx3LGhcclxuXHRkcmF3IDogLT5cclxuXHRcdGlmIG5vdCBzZXR0aW5ncy5wYXVzZWRcclxuXHRcdFx0ZmlsbCBAZmdcclxuXHRcdFx0cmVjdCBAeC0xLjc1LEB5LDMsNlxyXG5cdFx0XHRyZWN0IEB4KzEuNzUsQHksMyw2XHJcblxyXG5jbGFzcyBCU2V0dGluZ3MgZXh0ZW5kcyBCdXR0b24gIyBLdWdnaGp1bFxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSx3PTAsaD0wLEBiZz0nd2hpdGUnLEBmZz0nYmxhY2snKSAtPlxyXG5cdFx0c3VwZXIgeCx5LHcsaFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0aWYgc2V0dGluZ3MucGF1c2VkXHJcblx0XHRcdHB1c2goKVxyXG5cdFx0XHR0cmFuc2xhdGUgQHgsQHlcclxuXHRcdFx0c2NhbGUgW2hlaWdodC93aWR0aCx3aWR0aC9oZWlnaHRdW1RPR0dMRV0sMVxyXG5cdFx0XHRmaWxsIEBmZ1xyXG5cdFx0XHRjaXJjbGUgMCwwLDZcclxuXHRcdFx0ZmlsbCBAYmdcclxuXHRcdFx0Y2lyY2xlIDAsMCwzXHJcblx0XHRcdGZpbGwgQGZnXHJcblx0XHRcdGZvciB2IGluIHJhbmdlIDAsMzYwLDQ1XHJcblx0XHRcdFx0cHVzaCgpXHJcblx0XHRcdFx0cm90YXRlIHZcclxuXHRcdFx0XHR0cmFuc2xhdGUgMywwXHJcblx0XHRcdFx0c3Ryb2tlIEBmZ1xyXG5cdFx0XHRcdHJlY3QgMCwwLDEsMVxyXG5cdFx0XHRcdHBvcCgpXHJcblx0XHRcdHBvcCgpXHJcblxyXG5jbGFzcyBCSW1hZ2UgZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksdyxoLEBpbWFnZSkgLT5cclxuXHRcdHN1cGVyIHgseSx3LGhcclxuXHRkcmF3IDogIC0+XHJcblx0XHRpZiBAaW1hZ2VcclxuXHRcdFx0dyA9IEBoICogW2hlaWdodC93aWR0aCx3aWR0aC9oZWlnaHRdW1RPR0dMRV1cclxuXHRcdFx0aW1hZ2UgQGltYWdlLEB4LXcvMiwgMC4wNzUrQHktQGgvMiwgdywgQGhcclxuXHJcbmNsYXNzIEJSb3RhdGUgZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksdyxoLEBkZWdyZWVzLGJnLGZnLEBwbGF5ZXIpIC0+IFxyXG5cdFx0c3VwZXIgeCx5LHcsaCwnJyxiZyxmZ1xyXG5cclxuXHRkcmF3IDogLT5cclxuXHRcdHNlY3MgPSBzZXR0aW5ncy5jbG9ja3NbQHBsYXllcl1cclxuXHRcdFtoLG0sc10gPSBobXMgc2Vjc1xyXG5cdFx0aWYgaCA+PSAxIHRoZW4gc3MgPSBoICsgJzonICsgZDIgbVxyXG5cdFx0ZWxzZSBzcyA9IG0gKyAnOicgKyBpZiBzZWNzIDwgMTAgIHRoZW4gcy50b0ZpeGVkIDEgZWxzZSBkMiBzXHJcblx0XHRub1N0cm9rZSgpXHJcblx0XHRwdXNoKClcclxuXHRcdHRyYW5zbGF0ZSBAeCxAeVxyXG5cdFx0cm90YXRlIEBkZWdyZWVzXHJcblxyXG5cdFx0aWYgc2V0dGluZ3MudGltZW91dCBhbmQgc2V0dGluZ3MucGxheWVyID09IEBwbGF5ZXJcclxuXHRcdFx0QGJnID0gJ3JlZCdcclxuXHRcdFx0QGZnID0gJ2JsYWNrJ1xyXG5cclxuXHRcdGZpbGwgQGJnXHJcblx0XHRyZWN0IDAsMCxAdyxAaFxyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHRTaXplIDE4KzlcclxuXHRcdHRleHQgc3MsMCwtMlxyXG5cdFx0dGV4dFNpemUgNSszXHJcblxyXG5cdFx0I3RleHQgKGlmIGg9PTAgdGhlbiAnbTpzcycgZWxzZSAnaDptbScpLDAsMTdcclxuXHRcdGlmIHNldHRpbmdzLmJvbnVzZXNbQHBsYXllcl0gPiAwXHJcblx0XHRcdHRleHQgJysnICsgcHJldHR5KHNldHRpbmdzLmJvbnVzZXNbQHBsYXllcl0pLDAsMTdcclxuXHJcblx0XHRwb3AoKVxyXG5cclxuY2xhc3MgQkVkaXQgZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSx4LHksdyxoLHRleHQpIC0+IFxyXG5cdFx0c3VwZXIgeCx5LHcsaCx0ZXh0LCdibGFjaydcclxuXHRkcmF3IDogLT5cclxuXHRcdHB1c2goKVxyXG5cdFx0dHJhbnNsYXRlIEB4LEB5XHJcblx0XHRmaWxsIGlmIEBuYW1lIGluIHNldHRpbmdzLmJpdHMgdGhlbiAneWVsbG93JyBlbHNlICd3aGl0ZSdcclxuXHRcdHNjYWxlIFtoZWlnaHQvd2lkdGgsd2lkdGgvaGVpZ2h0XVtUT0dHTEVdLDFcclxuXHRcdGNpcmNsZSAwLDAsOFxyXG5cdFx0ZmlsbCAnYmxhY2snXHJcblx0XHR0ZXh0U2l6ZSA1XHJcblx0XHR0ZXh0IEB0ZXh0LDAsMC4yXHJcblx0XHRwb3AoKVxyXG5cdGluc2lkZSA6ICh4LHkpIC0+XHJcblx0XHRkeCA9IHgtQHhcclxuXHRcdGR5ID0geS1AeVxyXG5cdFx0c3FydChkeCpkeCArIGR5KmR5KSA8IDVcclxuXHJcbmNsYXNzIEJCYXNpYyBleHRlbmRzIEJFZGl0XHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LHcsaCx0ZXh0KSAtPiBcclxuXHRcdHN1cGVyICcnLHgseSx3LGgsdGV4dFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0cHVzaCgpXHJcblx0XHR0cmFuc2xhdGUgQHgsQHlcclxuXHRcdGZpbGwgJ3doaXRlJ1xyXG5cdFx0c2NhbGUgW2hlaWdodC93aWR0aCx3aWR0aC9oZWlnaHRdW1RPR0dMRV0sMVxyXG5cdFx0Y2lyY2xlIDAsMCw4XHJcblx0XHRmaWxsICdibGFjaydcclxuXHRcdHRleHRTaXplIDVcclxuXHRcdHRleHQgQHRleHQsMCwwLjJcclxuXHRcdHBvcCgpXHJcblxyXG5jbGFzcyBCRGVhZCBleHRlbmRzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSx0ZXh0LGZnPSdsaWdodGdyYXknKSAtPiBcclxuXHRcdHN1cGVyIHgseSwwLDAsdGV4dCwnYmxhY2snLGZnXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRwdXNoKClcclxuXHRcdHRleHRTaXplIDRcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblx0XHRwb3AoKVxyXG5cdFx0XHJcbmNsYXNzIEJTaG93IGV4dGVuZHMgQkRlYWRcclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksZmc9J2xpZ2h0Z3JheScpIC0+IFxyXG5cdFx0c3VwZXIgeCx5LDAsMCwnJywnYmxhY2snLGZnXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRAdGV4dCA9IHNldHRpbmdzLnNob3dcclxuXHRcdHN1cGVyKClcclxuXHJcbmNsYXNzIEJDb2xvciBleHRlbmRzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSxAZmcpIC0+IHN1cGVyIHgseSwwLDBcclxuXHRkcmF3IDogLT5cclxuXHRcdHB1c2goKVxyXG5cdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRcdHRleHRTaXplIDRcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblx0XHRwb3AoKVxyXG5cclxuY2xhc3MgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdEBidXR0b25zID0ge31cclxuXHRcdEB0cmFuc2l0aW9ucyA9IHt9XHJcblx0XHRAbWFrZUJ1dHRvbnMoKVxyXG5cclxuXHRjcmVhdGVUcmFucyA6ICh0KSAtPlxyXG5cdFx0dGFyZ2V0ID0gdW5kZWZpbmVkXHJcblx0XHRhcnIgPSB0LnNwbGl0ICcgJ1xyXG5cdFx0Zm9yIHdvcmQgaW4gYXJyXHJcblx0XHRcdGlmIHdvcmQgPT0gJz0+JyB0aGVuIHRhcmdldCA9IHVuZGVmaW5lZFxyXG5cdFx0XHRlbHNlIGlmIHdvcmQuaW5kZXhPZignPT4nKSA9PSAwIHRoZW4gdGFyZ2V0ID0gd29yZC5zbGljZSAyXHJcblx0XHRcdGVsc2UgQHRyYW5zaXRpb25zW3dvcmRdID0gdGFyZ2V0XHJcblxyXG5cdG1lc3NhZ2UgOiAoa2V5KSAtPlxyXG5cdFx0Y29uc29sZS5sb2cgXCJjbGlja2VkICN7QG5hbWV9LiN7a2V5fSA9PiAje0B0cmFuc2l0aW9uc1trZXldfVwiXHJcblx0XHRjdXJyU3RhdGUgPSBzdGF0ZXNbQHRyYW5zaXRpb25zW2tleV1dXHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0Zm9yIHRrZXkgb2YgQHRyYW5zaXRpb25zXHJcblx0XHRcdGlmIHRrZXkgb2YgQGJ1dHRvbnNcclxuXHRcdFx0XHRAYnV0dG9uc1t0a2V5XS5kcmF3KClcclxuXHJcblx0bW91c2VDbGlja2VkIDogLT5cclxuXHRcdHt4LHl9ID0gZ2V0TG9jYWxDb29yZHMoKVxyXG5cdFx0Zm9yIGtleSBvZiBAdHJhbnNpdGlvbnNcclxuXHRcdFx0aWYgQHRyYW5zaXRpb25zW2tleV0gPT0gdW5kZWZpbmVkIHRoZW4gY29udGludWVcclxuXHRcdFx0YnV0dG9uID0gQGJ1dHRvbnNba2V5XVxyXG5cdFx0XHRpZiBidXR0b24udmlzaWJsZSBhbmQgYnV0dG9uLmluc2lkZSB4LCB5XHJcblx0XHRcdFx0QG1lc3NhZ2Uga2V5XHJcblx0XHRcdFx0YnJlYWtcclxuXHJcbmNsYXNzIFNDbG9jayBleHRlbmRzIFN0YXRlXHJcblxyXG5cdGNvbnN0cnVjdG9yIDogKG5hbWUpIC0+XHJcblx0XHRzdXBlciBuYW1lXHJcblx0XHRAY3JlYXRlVHJhbnMgJz0+U0Nsb2NrIGxlZnQgcGF1c2UgcXIgcmlnaHQgPT5TQmFzaWMgZWRpdCA9PiBzaG93J1xyXG5cdFx0c2V0dGluZ3MucGF1c2VkID0gdHJ1ZVxyXG5cdFx0c2V0dGluZ3MucGxheWVyID0gLTFcclxuXHJcblx0bWFrZUJ1dHRvbnMgOiAtPlxyXG5cdFx0QGJ1dHRvbnMubGVmdCAgPSBuZXcgQlJvdGF0ZSA1MCwgMjIsIDEwMCwgNDQsIDE4MCwgJ29yYW5nZScsICd3aGl0ZScsIDAgIyBlZyB1cFxyXG5cdFx0QGJ1dHRvbnMucmlnaHQgPSBuZXcgQlJvdGF0ZSA1MCwgNzgsIDEwMCwgNDQsICAgMCwgJ2dyZWVuJywgICd3aGl0ZScsIDEgIyBlZyBkb3duXHJcblxyXG5cdFx0QGJ1dHRvbnMuc2hvdyAgPSBuZXcgQlNob3cgICAgIDIyLCA1MCwgJ2JsYWNrJ1xyXG5cdFx0QGJ1dHRvbnMucXIgICAgPSBuZXcgQkltYWdlICAgIDUwLCA1MCwgMzMsIDEyLCBxclxyXG5cdFx0QGJ1dHRvbnMucGF1c2UgPSBuZXcgQlBhdXNlICAgIDY3LCA1MCwgMTcsIDEyLCAnd2hpdGUnLCAnYmxhY2snXHJcblx0XHRAYnV0dG9ucy5lZGl0ICA9IG5ldyBCU2V0dGluZ3MgODMsIDUwLCAxNywgMTIsICd3aGl0ZScsICdibGFjaydcclxuXHJcblx0dXBwZGF0ZXJhIDogLT5cclxuXHRcdGlmIHNldHRpbmdzLnBhdXNlZCB0aGVuIHJldHVyblxyXG5cdFx0Y2xvY2sgPSBzZXR0aW5ncy5jbG9ja3Nbc2V0dGluZ3MucGxheWVyXVxyXG5cdFx0aWYgY2xvY2sgPiAwIHRoZW4gY2xvY2sgLT0gMS9mcmFtZVJhdGUoKVxyXG5cdFx0aWYgY2xvY2sgPD0gMFxyXG5cdFx0XHRjbG9jayA9IDBcclxuXHRcdFx0c2V0dGluZ3MudGltZW91dCA9IHRydWVcclxuXHRcdFx0c2V0dGluZ3MucGF1c2VkID0gdHJ1ZVxyXG5cclxuXHRcdHNldHRpbmdzLmNsb2Nrc1tzZXR0aW5ncy5wbGF5ZXJdID0gY2xvY2tcclxuXHJcblx0aGFuZGxlUGxheWVyIDogKHBsYXllcikgLT5cclxuXHRcdGlmIHNldHRpbmdzLnBsYXllciBpbiBbLTEscGxheWVyXVxyXG5cdFx0XHRzb3VuZC5wbGF5KClcclxuXHRcdFx0c2V0dGluZ3MuY2xvY2tzW3BsYXllcl0gKz0gc2V0dGluZ3MuYm9udXNlc1twbGF5ZXJdXHJcblx0XHRzZXR0aW5ncy5wYXVzZWQgPSBmYWxzZVxyXG5cdFx0c2V0dGluZ3MucGxheWVyID0gMS1wbGF5ZXJcclxuXHRcdEBidXR0b25zLmxlZnQuZmcgID0gWydibGFjaycsJ3doaXRlJ11bcGxheWVyXVxyXG5cdFx0QGJ1dHRvbnMucmlnaHQuZmcgPSBbJ3doaXRlJywnYmxhY2snXVtwbGF5ZXJdXHJcblxyXG5cdG1lc3NhZ2UgOiAoa2V5KSAtPlxyXG5cdFx0aWYga2V5ID09ICdsZWZ0J1xyXG5cdFx0XHRpZiBzZXR0aW5ncy50aW1lb3V0IHRoZW4gcmV0dXJuIGVsc2UgQGhhbmRsZVBsYXllciAwXHJcblxyXG5cdFx0ZWxzZSBpZiBrZXkgPT0gJ3JpZ2h0J1xyXG5cdFx0XHRpZiBzZXR0aW5ncy50aW1lb3V0IHRoZW4gcmV0dXJuIGVsc2UgQGhhbmRsZVBsYXllciAxXHJcblxyXG5cdFx0ZWxzZSBpZiBrZXkgPT0gJ3BhdXNlJ1xyXG5cdFx0XHRzZXR0aW5ncy5wYXVzZWQgPSB0cnVlXHJcblx0XHRcdEBidXR0b25zLmxlZnQuZmcgPSBpZiBzZXR0aW5ncy5wbGF5ZXIgPT0gMCB0aGVuICd3aGl0ZScgZWxzZSAnYmxhY2snXHJcblx0XHRcdEBidXR0b25zLnJpZ2h0LmZnID0gaWYgc2V0dGluZ3MucGxheWVyID09IDAgdGhlbiAnYmxhY2snIGVsc2UgJ3doaXRlJ1xyXG5cclxuXHRcdGVsc2UgaWYga2V5ID09ICdxcidcclxuXHRcdFx0ZnVsbHNjcmVlbiB0cnVlXHJcblx0XHRcdHJlc2l6ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG5cclxuXHRcdGVsc2UgaWYga2V5ID09ICdlZGl0J1xyXG5cdFx0XHRiYWNrdXAgPSBjbG9uZSBzZXR0aW5ncyAjIHRvIGJlIHVzZWQgYnkgY2FuY2VsXHJcblx0XHRcdGNvbnNvbGUubG9nICdiYWNrdXAgc2thcGFkJyxiYWNrdXBcclxuXHJcblx0XHRzYXZlU2V0dGluZ3MoKVxyXG5cdFx0c3VwZXIga2V5XHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0YmFja2dyb3VuZCAnd2hpdGUnXHJcblx0XHRzdXBlcigpXHJcblxyXG5jbGFzcyBTQmFzaWMgZXh0ZW5kcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogKG5hbWUpIC0+XHJcblx0XHRzdXBlciBuYW1lXHJcblx0XHRhcnIgPSAnPT4gYm9udXMgZ3JlZW4gaGNwIG9yYW5nZSByZWZsZWN0aW9uIHdoaXRlIE0gcyA9PlNDbG9jayBjYW5jZWwgb2sgPT5TQWR2YW5jZWQgYWR2YW5jZWQgPT5TQmFzaWMgTTEgTTIgTTMgTTUgTTEwIE05MCBzMCBzMSBzMiBzMyBzNSBzMTAgczMwJy5zcGxpdCAnICdcclxuXHRcdEBjcmVhdGVUcmFucyBhcnIuam9pbiAnICdcclxuXHJcblx0bWFrZUJ1dHRvbnMgOiAtPlxyXG5cclxuXHRcdHggPSBbMTAwLzMsMjAwLzNdXHJcblx0XHR5ID0gWzMyLDQxLDUwLDU5LDY4LDc3LDg2LDk1XVxyXG5cdFx0dyA9IDEwXHJcblx0XHRoID0gN1xyXG5cclxuXHRcdEBidXR0b25zLm9yYW5nZSAgICAgPSBzdGF0ZXMuU0FkdmFuY2VkLmJ1dHRvbnMub3JhbmdlXHJcblx0XHRAYnV0dG9ucy53aGl0ZSAgICAgID0gc3RhdGVzLlNBZHZhbmNlZC5idXR0b25zLndoaXRlXHJcblx0XHRAYnV0dG9ucy5ncmVlbiAgICAgID0gc3RhdGVzLlNBZHZhbmNlZC5idXR0b25zLmdyZWVuXHJcblxyXG5cdFx0QGJ1dHRvbnMucmVmbGVjdGlvbiA9IG5ldyBCRGVhZCAgeFswXSwyMCwncmVmbGVjdGlvbidcclxuXHRcdEBidXR0b25zLmJvbnVzICAgICAgPSBuZXcgQkRlYWQgIHhbMV0sMjAsJ2JvbnVzJ1xyXG5cclxuXHRcdEBidXR0b25zLk0gICAgICAgICAgPSBuZXcgQkRlYWQgIHhbMF0sIDI1LCAnTSdcclxuXHJcblx0XHRAYnV0dG9ucy5NMSAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzBdLHlbMV0sIHcsaCwgJzEnXHJcblx0XHRAYnV0dG9ucy5NMiAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzBdLHlbMl0sIHcsaCwgJzInXHJcblx0XHRAYnV0dG9ucy5NMyAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzBdLHlbM10sIHcsaCwgJzMnXHJcblx0XHRAYnV0dG9ucy5NNSAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzBdLHlbNF0sIHcsaCwgJzUnXHJcblx0XHRAYnV0dG9ucy5NMTAgICBcdFx0XHQ9IG5ldyBCQmFzaWMgeFswXSx5WzVdLCB3LGgsICcxMCdcclxuXHRcdEBidXR0b25zLk05MCAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzBdLHlbNl0sIHcsaCwgJzkwJ1xyXG5cclxuXHRcdEBidXR0b25zLnMgICAgICAgICAgPSBuZXcgQkRlYWQgIHhbMV0sIDI1LCAncydcclxuXHJcblx0XHRAYnV0dG9ucy5zMCAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzFdLHlbMF0sIHcsaCwgJzAnXHJcblx0XHRAYnV0dG9ucy5zMSAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzFdLHlbMV0sIHcsaCwgJzEnXHJcblx0XHRAYnV0dG9ucy5zMiAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzFdLHlbMl0sIHcsaCwgJzInXHJcblx0XHRAYnV0dG9ucy5zMyAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzFdLHlbM10sIHcsaCwgJzMnXHJcblx0XHRAYnV0dG9ucy5zNSAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzFdLHlbNF0sIHcsaCwgJzUnXHJcblx0XHRAYnV0dG9ucy5zMTAgICBcdFx0XHQ9IG5ldyBCQmFzaWMgeFsxXSx5WzVdLCB3LGgsICcxMCdcclxuXHRcdEBidXR0b25zLnMzMCAgIFx0XHRcdD0gbmV3IEJCYXNpYyB4WzFdLHlbNl0sIHcsaCwgJzMwJ1xyXG5cclxuXHRcdEBidXR0b25zLmFkdmFuY2VkICAgPSBuZXcgQlJvdW5kZWQgMSoxMDAvNix5WzddLCAyNiw2LCAnYWR2YW5jZWQnXHJcblx0XHRAYnV0dG9ucy5jYW5jZWwgICAgID0gbmV3IEJSb3VuZGVkIDMqMTAwLzYseVs3XSwgMjYsNiwgJ2NhbmNlbCdcclxuXHRcdEBidXR0b25zLm9rICAgICAgICAgPSBuZXcgQlJvdW5kZWQgNSoxMDAvNix5WzddLCAyNiw2LCAnb2snXHJcblxyXG5cdG1lc3NhZ2UgOiAoa2V5KSAtPlxyXG5cclxuXHRcdGlmIGtleSA9PSAnYWR2YW5jZWQnXHJcblx0XHRlbHNlIGlmIGtleSA9PSAnYmFzaWMnXHJcblx0XHRlbHNlIGlmIGtleSA9PSAnY2FuY2VsJ1xyXG5cdFx0XHRzZXR0aW5ncyA9IGNsb25lIGJhY2t1cCAjIMOFdGVyc3TDpGxsIGFsbHQgc29tIGJlaMO2dnNcclxuXHRcdFx0I3NldHRpbmdzLnN1bXMgPSBzdGF0ZXMuU0FkdmFuY2VkLmNhbGNTdW1zKClcclxuXHJcblx0XHRlbHNlIGlmIGtleSA9PSAnb2snXHJcblx0XHRcdHNldHRpbmdzLmNsb2NrcyAgPSBbc2V0dGluZ3MucGxheWVyc1swXVswXSwgc2V0dGluZ3MucGxheWVyc1sxXVswXV1cclxuXHRcdFx0c2V0dGluZ3MuYm9udXNlcyA9IFtzZXR0aW5ncy5wbGF5ZXJzWzBdWzFdLCBzZXR0aW5ncy5wbGF5ZXJzWzFdWzFdXVxyXG5cdFx0XHRzZXR0aW5ncy50aW1lb3V0ID0gZmFsc2UgXHJcblxyXG5cdFx0ZWxzZSAjIDYrNyBzaG9ydGN1dCBidXR0b25zXHJcblx0XHRcdHN0ID0gc2V0dGluZ3NcclxuXHRcdFx0c3QuYml0cyA9IHN0LmJpdHMuZmlsdGVyICh2YWx1ZSwgaW5kZXgsIGFycikgLT4gdmFsdWVbMF0gIT0ga2V5WzBdXHJcblx0XHRcdGlmIGtleVswXT09J00nIHRoZW4gc3QuYml0cyA9IHN0LmJpdHMuZmlsdGVyICh2YWx1ZSwgaW5kZXgsIGFycikgLT4gdmFsdWVbMF0gIT0gJ0gnXHJcblx0XHRcdGNvbnNvbGUubG9nICdmaWx0ZXInLHN0LmJpdHNcclxuXHRcdFx0c3RhdGVzLlNBZHZhbmNlZC5tZXNzYWdlIGtleVxyXG5cdFx0XHRzdC5zdW1zID0gc3RhdGVzLlNBZHZhbmNlZC5jYWxjU3VtcygpXHJcblx0XHRcdEBidXR0b25zLm9rLnZpc2libGUgPSB0cnVlICNzdC5zdW1zLkggKyBzdC5zdW1zLk0gKyBzdC5zdW1zLlMgPiAwIGFuZCBzdC5zdW1zLnQgPCA2MFxyXG5cclxuXHRcdHN1cGVyIGtleVxyXG5cclxuY2xhc3MgU0FkdmFuY2VkIGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChuYW1lKSAtPlxyXG5cdFx0c3VwZXIgbmFtZVxyXG5cdFx0YXJyID0gJz0+IGdyZWVuIHdoaXRlIG9yYW5nZSByZWZsZWN0aW9uIGJvbnVzIGhjcCBIIE0gUyBtIHMgdCA9PlNDbG9jayBjYW5jZWwgb2sgPT5TQmFzaWMgYmFzaWMgPT5TQWR2YW5jZWQnLnNwbGl0ICcgJ1xyXG5cdFx0Zm9yIGxldHRlciBpbiAnSE1TbXN0J1xyXG5cdFx0XHRmb3IgbnVtYmVyIGluIFsxLDIsNCw4LDE1LDMwXVxyXG5cdFx0XHRcdGFyci5wdXNoIGxldHRlciArIG51bWJlclxyXG5cdFx0QGNyZWF0ZVRyYW5zIGFyci5qb2luICcgJ1xyXG5cdFx0QHVwcGRhdGVyYSgpXHJcblxyXG5cdG1ha2VCdXR0b25zIDogLT5cclxuXHJcblx0XHRAYnV0dG9ucy5vcmFuZ2UgICAgID0gbmV3IEJDb2xvciA1MCwgMywnb3JhbmdlJ1xyXG5cdFx0QGJ1dHRvbnMud2hpdGUgICAgICA9IG5ldyBCQ29sb3IgNTAsIDksJ3doaXRlJ1xyXG5cdFx0QGJ1dHRvbnMuZ3JlZW4gICAgICA9IG5ldyBCQ29sb3IgNTAsMTUsJ2dyZWVuJ1xyXG5cclxuXHRcdEBidXR0b25zLnJlZmxlY3Rpb24gPSBuZXcgQkRlYWQgIDI1LDIxLCdyZWZsZWN0aW9uJ1xyXG5cdFx0QGJ1dHRvbnMuYm9udXMgICAgICA9IG5ldyBCRGVhZCAgNjYsMjEsJ2JvbnVzJ1xyXG5cdFx0QGJ1dHRvbnMuaGNwICAgICAgICA9IG5ldyBCRGVhZCAgOTIsMjEsJ2hjcCdcclxuXHJcblx0XHRAYnV0dG9ucy5iYXNpYyAgICAgID0gbmV3IEJSb3VuZGVkIDEqMTAwLzYsOTUsIDI2LDYsICdiYXNpYydcclxuXHRcdEBidXR0b25zLmNhbmNlbCAgICAgPSBuZXcgQlJvdW5kZWQgMyoxMDAvNiw5NSwgMjYsNiwgJ2NhbmNlbCdcclxuXHRcdEBidXR0b25zLm9rICAgICAgICAgPSBuZXcgQlJvdW5kZWQgNSoxMDAvNiw5NSwgMjYsNiwgJ29rJ1xyXG5cclxuXHRcdEBtYWtlRWRpdEJ1dHRvbnMoKVxyXG5cclxuXHRtYWtlRWRpdEJ1dHRvbnMgOiAtPlxyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgNlxyXG5cdFx0XHRsZXR0ZXIgPSAnSE1TbXN0J1tpXVxyXG5cdFx0XHR4c2l6ZSA9IDEwMC82XHJcblx0XHRcdHlzaXplID0gMTAwLzEwXHJcblx0XHRcdHhvZmYgPSB4c2l6ZS8yXHJcblx0XHRcdHlvZmYgPSAzMysyXHJcblx0XHRcdEBidXR0b25zW2xldHRlcl0gPSBuZXcgQkRlYWQgeG9mZit4c2l6ZSppLCAyNisyLCAnSE1TbXN0J1tpXVxyXG5cdFx0XHRmb3IgaiBpbiByYW5nZSA2XHJcblx0XHRcdFx0bnVtYmVyID0gWzEsMiw0LDgsMTUsMzBdW2pdXHJcblx0XHRcdFx0bmFtZSA9IGxldHRlciArIG51bWJlclxyXG5cdFx0XHRcdEBidXR0b25zW25hbWVdID0gbmV3IEJFZGl0IG5hbWUsIHhvZmYreHNpemUqaSwgeW9mZit5c2l6ZSpqLCB4c2l6ZSwgeXNpemUsIG51bWJlclxyXG5cclxuXHRtZXNzYWdlIDogKGtleSkgLT5cclxuXHRcdGlmIGtleSA9PSAnYmFzaWMnXHJcblx0XHRlbHNlIGlmIGtleSA9PSAnYWR2YW5jZWQnXHJcblx0XHRlbHNlIGlmIGtleSA9PSAnY2FuY2VsJ1xyXG5cdFx0XHRzZXR0aW5ncyA9IGNsb25lIGJhY2t1cCAjIMOFdGVyc3TDpGxsIGFsbHQgc29tIGJlaMO2dnNcclxuXHJcblx0XHRlbHNlIGlmIGtleSA9PSAnb2snXHJcblx0XHRcdHNldHRpbmdzLmNsb2NrcyAgPSBbc2V0dGluZ3MucGxheWVyc1swXVswXSwgc2V0dGluZ3MucGxheWVyc1sxXVswXV1cclxuXHRcdFx0c2V0dGluZ3MuYm9udXNlcyA9IFtzZXR0aW5ncy5wbGF5ZXJzWzBdWzFdLCBzZXR0aW5ncy5wbGF5ZXJzWzFdWzFdXVxyXG5cdFx0XHRzZXR0aW5ncy50aW1lb3V0ID0gZmFsc2UgXHJcblx0XHRlbHNlXHJcblx0XHRcdGhhc2ggPSB7J00zJzonTTEgTTInLCAnTTUnOidNMSBNNCcsICdNMTAnOidNMiBNOCcsICdNOTAnOidIMSBNMzAnLCAnczAnOicnLCAnczMnOidzMSBzMicsICdzNSc6J3MxIHM0JywgJ3MxMCc6J3MyIHM4J31cclxuXHRcdFx0aWYga2V5IG9mIGhhc2hcclxuXHRcdFx0XHRmb3IgbXNnIGluIGhhc2hba2V5XS5zcGxpdCAnICdcclxuXHRcdFx0XHRcdGlmIG1zZyAhPSAnJyB0aGVuIEBtZXNzYWdlIG1zZ1xyXG5cdFx0XHRlbHNlICMgNiB4IDYgZWRpdCBidXR0b25zXHJcblx0XHRcdFx0c3QgPSBzZXR0aW5nc1xyXG5cdFx0XHRcdHN0LmJpdHMgPSBAZmxpcCBzdC5iaXRzLCBrZXlcclxuXHRcdFx0XHRzdC5zdW1zID0gQGNhbGNTdW1zKClcclxuXHRcdFx0XHRAYnV0dG9ucy5vay52aXNpYmxlID0gc3Quc3Vtcy5IICsgc3Quc3Vtcy5NICsgc3Quc3Vtcy5TID4gMCBhbmQgc3Quc3Vtcy50IDwgNjBcclxuXHJcblx0XHRAdXBwZGF0ZXJhKClcclxuXHRcdHN1cGVyIGtleVxyXG5cdFx0XHJcblx0ZmxpcCA6IChhcnIsIGtleSkgLT5cclxuXHRcdGlmIGtleSBpbiBhcnIgdGhlbiBfLnJlbW92ZSBhcnIsIChuKSAtPiBuID09IGtleSBlbHNlIGFyci5wdXNoIGtleVxyXG5cdFx0YXJyXHJcblxyXG5cdGNhbGNTdW1zIDogLT5cclxuXHRcdHJlcyA9IHtIOjAsTTowLFM6MCxtOjAsczowLHQ6MH1cclxuXHRcdGZvciBrZXkgaW4gc2V0dGluZ3MuYml0c1xyXG5cdFx0XHRsZXR0ZXIgPSBrZXlbMF1cclxuXHRcdFx0bnVtYmVyID0gcGFyc2VJbnQga2V5LnNsaWNlIDFcclxuXHRcdFx0cmVzW2xldHRlcl0gKz0gbnVtYmVyXHJcblx0XHRyZXNcclxuXHJcblx0dXBwZGF0ZXJhIDogLT5cclxuXHRcdHNldHRpbmdzLnN1bXMgPSBAY2FsY1N1bXMoKVxyXG5cdFx0c2V0dGluZ3Muc2hvdyA9IEBjb21wYWN0KClcclxuXHRcdEBidXR0b25zLndoaXRlLnRleHQgPSBzZXR0aW5ncy5zaG93XHJcblx0XHRcclxuXHRcdEBoYW5kaWNhcCgpXHJcblx0XHRzcCA9IHNldHRpbmdzLnBsYXllcnNcclxuXHRcdEBidXR0b25zLm9yYW5nZS50ZXh0ID0gaWYgc2V0dGluZ3MuaGNwID09IDAgdGhlbiAnJyBlbHNlIHByZXR0eVBhaXIgc3BbMF1bMF0sIHNwWzBdWzFdXHJcblx0XHRAYnV0dG9ucy5ncmVlbi50ZXh0ICA9IGlmIHNldHRpbmdzLmhjcCA9PSAwIHRoZW4gJycgZWxzZSBwcmV0dHlQYWlyIHNwWzFdWzBdLCBzcFsxXVsxXVxyXG5cclxuXHRjb21wYWN0IDogLT5cclxuXHRcdGtleXMgPSAnSE1TbXMnXHJcblx0XHRoZWFkZXJzID0gJ2htc21zJ1xyXG5cdFx0aGVhZGVyMCA9ICcnXHJcblx0XHRoZWFkZXIxID0gJydcclxuXHRcdGZvciBpIGluIFswLDEsMl1cclxuXHRcdFx0a2V5ID0ga2V5c1tpXVxyXG5cdFx0XHRpZiBzZXR0aW5ncy5zdW1zW2tleV0+MCB0aGVuIGhlYWRlcjAgKz0gc2V0dGluZ3Muc3Vtc1trZXldICsgaGVhZGVyc1tpXVxyXG5cdFx0Zm9yIGkgaW4gWzMsNF1cclxuXHRcdFx0a2V5ID0ga2V5c1tpXVxyXG5cdFx0XHRpZiBzZXR0aW5ncy5zdW1zW2tleV0+MCB0aGVuIGhlYWRlcjEgKz0gc2V0dGluZ3Muc3Vtc1trZXldICsgaGVhZGVyc1tpXVxyXG5cdFx0aGVhZGVyID0gaGVhZGVyMFxyXG5cdFx0aWYgaGVhZGVyMS5sZW5ndGggPiAwIHRoZW4gaGVhZGVyICs9ICcrJyArIGhlYWRlcjFcclxuXHRcdGlmIHNldHRpbmdzLnN1bXMudCA+IDAgdGhlbiBoZWFkZXIgKz0gJ1xcbicgKyBzZXR0aW5ncy5zdW1zLnRcclxuXHRcdGhlYWRlclxyXG5cclxuXHRoYW5kaWNhcCA6IC0+XHJcblx0XHRzdCA9IHNldHRpbmdzXHJcblx0XHRzdC5oY3AgPSBzdC5zdW1zLnQgLyAoSENQICogNjApICMgMC4wIC4uIDEuMFxyXG5cdFx0c3QucmVmbCA9IEhPVVIgKiBzdC5zdW1zLkggKyBNSU5VVEUgKiBzdC5zdW1zLk0gKyBzdC5zdW1zLlMgIyBzZWt1bmRlclxyXG5cdFx0c3QuYm9udXMgPSAgICAgICAgICAgICAgICAgICBNSU5VVEUgKiBzdC5zdW1zLm0gKyBzdC5zdW1zLnMgIyBzZWt1bmRlclxyXG5cdFx0c3QucGxheWVycyA9IFtdXHJcblx0XHRzdC5wbGF5ZXJzWzBdID0gW3N0LnJlZmwgKyBzdC5yZWZsKnN0LmhjcCwgc3QuYm9udXMgKyBzdC5ib251cypzdC5oY3BdXHJcblx0XHRzdC5wbGF5ZXJzWzFdID0gW3N0LnJlZmwgLSBzdC5yZWZsKnN0LmhjcCwgc3QuYm9udXMgLSBzdC5ib251cypzdC5oY3BdXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxucHJlbG9hZCA9IC0+XHJcblx0cXIgPSBsb2FkSW1hZ2UgJ3FyLnBuZydcclxuXHRzb3VuZCA9IGxvYWRTb3VuZCAna2V5Lm1wMydcclxuXHJcbndpbmRvd1Jlc2l6ZWQgPSAtPlxyXG5cdHJlc2l6ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG5cdGRpYWcgPSBzcXJ0IHdpZHRoKndpZHRoICsgaGVpZ2h0KmhlaWdodFxyXG5cclxuc2V0dXAgPSAtPlxyXG5cclxuXHRmcmFtZVJhdGUgRlJBTUVSQVRFXHJcblx0b3MgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvblxyXG5cdGlmIG9zLmluZGV4T2YoJ0xpbnV4JykgPj0gMCB0aGVuIG9zID0gJ0FuZHJvaWQnXHJcblx0aWYgb3MuaW5kZXhPZignV2luZG93cycpID49IDAgdGhlbiBvcyA9ICdXaW5kb3dzJ1xyXG5cdGlmIG9zLmluZGV4T2YoJ01hYycpID49IDAgdGhlbiBvcyA9ICdNYWMnXHJcblxyXG5cdGNhbnZhcyA9IGNyZWF0ZUNhbnZhcyBpbm5lcldpZHRoLGlubmVySGVpZ2h0XHJcblx0Ym9keVNjcm9sbExvY2suZGlzYWJsZUJvZHlTY3JvbGwgY2FudmFzICMgRsO2cmhpbmRyYXIgYXR0IG1hbiBrYW4gc2Nyb2xsYSBjYW52YXMgcMOlIGlPU1xyXG5cclxuXHRpZiBvcyA9PSAnQW5kcm9pZCcgdGhlbiB0ZXh0Rm9udCAnRHJvaWQgU2FucydcclxuXHRpZiBvcyA9PSAnTWFjJyB0aGVuIHRleHRGb250ICdWZXJkYW5hJ1xyXG5cdGlmIG9zID09ICdXaW5kb3dzJyB0aGVuIHRleHRGb250ICdMdWNpZGEgU2FucyBVbmljb2RlJ1xyXG5cclxuXHRUT0dHTEUgPSBpZiBvcyA9PSAnTWFjJyB0aGVuIDEgZWxzZSAwXHJcblxyXG5cdGRpYWcgPSBzcXJ0IHdpZHRoKndpZHRoICsgaGVpZ2h0KmhlaWdodFxyXG5cclxuXHRiYWNrZ3JvdW5kICdibGFjaydcclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHJlY3RNb2RlIENFTlRFUlxyXG5cdGFuZ2xlTW9kZSBERUdSRUVTXHJcblxyXG5cdHNldHRpbmdzID0gbG9hZFNldHRpbmdzKClcclxuXHJcblx0Y3JlYXRlU3RhdGUgJ1NDbG9jaycsIFNDbG9jayBcclxuXHRjcmVhdGVTdGF0ZSAnU0FkdmFuY2VkJyxTQWR2YW5jZWRcclxuXHRjcmVhdGVTdGF0ZSAnU0Jhc2ljJyxTQmFzaWNcclxuXHRcclxuXHQjZHVtcCgpXHJcblx0Y3VyclN0YXRlID0gc3RhdGVzLlNDbG9ja1xyXG5cclxuZHVtcCA9IC0+ICMgbG9nIGV2ZXJ5dGhpbmdcclxuXHRmb3Igc2tleSBvZiBzdGF0ZXMgXHJcblx0XHRzdGF0ZSA9IHN0YXRlc1tza2V5XVxyXG5cdFx0Y29uc29sZS5sb2cgJydcclxuXHRcdGNvbnNvbGUubG9nICdTdGF0ZScsc3RhdGVcclxuXHRcdGZvciB0a2V5IG9mIHN0YXRlLnRyYW5zaXRpb25zXHJcblx0XHRcdHRyYW5zaXRpb24gPSBzdGF0ZS50cmFuc2l0aW9uc1t0a2V5XVxyXG5cdFx0XHRidXR0b24gPSBzdGF0ZS5idXR0b25zW3RrZXldXHJcblx0XHRcdGlmIHRyYW5zaXRpb24gPT0gdW5kZWZpbmVkIHRoZW4gdHJhbnNpdGlvbiA9ICdub3RoaW5nJ1xyXG5cdFx0XHRjb25zb2xlLmxvZyAnICcsdGtleSwnPT4nLHRyYW5zaXRpb24sYnV0dG9uXHJcblxyXG5tb3VzZUNsaWNrZWQgPSAtPiBjdXJyU3RhdGUubW91c2VDbGlja2VkKClcclxuXHJcbmRyYXcgPSAtPlxyXG5cclxuXHRpZiBUT0dHTEUgPT0gMFxyXG5cdFx0c2NhbGUgd2lkdGgvMTAwLGhlaWdodC8xMDAgIyBwb3J0cmFpdFxyXG5cdGVsc2VcclxuXHRcdHJvdGF0ZSA5MFxyXG5cdFx0dHJhbnNsYXRlIDAsLXdpZHRoXHJcblx0XHRzY2FsZSBoZWlnaHQvMTAwLHdpZHRoLzEwMCAjIExhbmRzY2FwZVxyXG5cclxuXHRzdHJva2VXZWlnaHQgMTAwL2hlaWdodFxyXG5cdHB1c2goKVxyXG5cdGJhY2tncm91bmQgJ2JsYWNrJ1xyXG5cdHN0YXRlcy5TQ2xvY2sudXBwZGF0ZXJhKClcclxuXHRjdXJyU3RhdGUuZHJhdygpXHJcblx0cG9wKClcclxuXHJcblx0c2F2ZVNldHRpbmdzKClcclxuXHJcblx0IyBkZWJ1Z1xyXG5cdGFzcGVjdCA9ICh3LGgseSkgLT5cclxuXHRcdGlmIHc8aCB0aGVuIFt3LGhdID0gW2gsd11cclxuXHRcdHRleHQgXCIje3d9ICN7KHcvaCkudG9GaXhlZCgzKX0gI3tofVwiLCA1MCx5XHJcblxyXG5cdGRlYnVnRnVuY3Rpb24oKVxyXG5cclxuZGVidWdGdW5jdGlvbiA9IC0+XHJcblx0cmF0ZXMucHVzaCBmcmFtZVJhdGUoKVxyXG5cdGlmIHJhdGVzLmxlbmd0aCA+IDEwMCB0aGVuIG9sZGVzdCA9IHJhdGVzLnNoaWZ0KCkgZWxzZSBvbGRlc3QgPSByYXRlc1swXVxyXG5cdHN1bVJhdGUgKz0gXy5sYXN0KHJhdGVzKSAtIG9sZGVzdFxyXG5cclxuXHR0ZXh0U2l6ZSAyLjVcclxuXHR0ZXh0IE1hdGgucm91bmQoc3VtUmF0ZSksOTUsNVxyXG5cclxubG9hZFNldHRpbmdzID0gLT5cclxuXHRpZiBsb2NhbFN0b3JhZ2Uuc2V0dGluZ3NcclxuXHRcdHNldHRpbmdzID0gSlNPTi5wYXJzZSBsb2NhbFN0b3JhZ2Uuc2V0dGluZ3NcclxuXHRcdHNldHRpbmdzLnBhdXNlZCA9IHRydWVcclxuXHRlbHNlIFxyXG5cdFx0c2V0dGluZ3MgPSB7fVxyXG5cdFx0c2V0dGluZ3Muc2hvdyA9ICczbTJzJ1xyXG5cdFx0c2V0dGluZ3MuYml0cyA9IFsnTTEnLCdNMicsJ3MyJ11cclxuXHRcdHNldHRpbmdzLmNsb2NrcyA9IFsxODAsMTgwXVxyXG5cdFx0c2V0dGluZ3MuYm9udXNlcz0gWzIsMl1cclxuXHRcdHNldHRpbmdzLnN1bXMgPSBbSDowLE06MyxTOjAsbTowLFM6Mix0OjBdXHJcblx0XHRzZXR0aW5ncy5wbGF5ZXIgPSAtMSBcclxuXHRcdHNldHRpbmdzLnRpbWVvdXQgPSBmYWxzZVxyXG5cdFx0c2V0dGluZ3MucGF1c2VkID0gdHJ1ZVxyXG5cdFx0bG9jYWxTdG9yYWdlLnNldHRpbmdzID0gSlNPTi5zdHJpbmdpZnkgc2V0dGluZ3NcclxuXHRjb25zb2xlLmxvZyAnbG9hZFNldHRpbmdzJywgc2V0dGluZ3NcclxuXHRzZXR0aW5nc1xyXG5cclxuc2F2ZVNldHRpbmdzID0gLT5cclxuXHRkID0gbmV3IERhdGUoKVxyXG5cdGlmIGQgLSBsYXN0U3RvcmFnZVNhdmUgPCBIRUFSVEJFQVQgdGhlbiByZXR1cm4gIyBtc1xyXG5cdGxhc3RTdG9yYWdlU2F2ZSA9IGRcclxuXHRsb2NhbFN0b3JhZ2Uuc2V0dGluZ3MgPSBKU09OLnN0cmluZ2lmeSBzZXR0aW5nc1xyXG5cdGNvbnNvbGUubG9nICdzYXZlU2V0dGluZ3MnLGxvY2FsU3RvcmFnZS5zZXR0aW5nc1xyXG4iXX0=
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee