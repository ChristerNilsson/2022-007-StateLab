// Generated by CoffeeScript 2.5.1
var BColor, BDead, BEdit, BImage, BRotate, Button, HCP, HOUR, MINUTE, SClock, SEditor, SWelcome, State, checkButtons, checkStates, createState, currState, d2, diag, draw, hms, mouseClicked, os, pd, ph, pimage, prect, preload, pretty, prettyPair, ptext, ptextSize, ptranslate, pw, qr, setup, states, timeout, toggleFullScreen, trunc3, windowResized,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HCP = 1;

HOUR = 3600;

MINUTE = 60;

states = {};

qr = null;

timeout = false;

currState = null;

os = '';

diag = 0;

toggleFullScreen = function() {
  var doc, docEl, requestFullScreen;
  doc = window.document;
  docEl = doc.documentElement;
  requestFullScreen = docEl.requestFullscreen || docEl.mozRequestFullScreen || docEl.webkitRequestFullScreen || docEl.msRequestFullscreen;
  if (!doc.fullscreenElement && !doc.mozFullScreenElement && !doc.webkitFullscreenElement && !doc.msFullscreenElement) {
    return requestFullScreen.call(docEl);
  }
};

trunc3 = function(x) {
  return Math.trunc(x * 1000) / 1000;
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (trunc3(h) > 0) {
    header += trunc3(h) + 'h';
  }
  if (trunc3(m) > 0) {
    header += trunc3(m) + 'm';
  }
  if (trunc3(s) > 0) {
    header += trunc3(s) + 's';
  }
  return header;
};

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

//console.log d2(3), '03'
hms = function(x) {
  var h, m, orig, s;
  orig = x;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  if (orig < 10) {
    s = Math.trunc(s * 10) / 10;
  }
  return [h, m, s];
};


//console.log hms(180), [0,3,0]
//console.log hms(180.5), [0,3,0.5]

// procentuella versioner:
pw = function(x) {
  return x / 100 * width;
};

ph = function(y) {
  return y / 100 * height;
};

pd = function(s) {
  return s / 100 * sqrt(width * width + height * height);
};

pimage = function(img, x, y, w, h) {
  return image(img, pw(x), ph(y), pw(w), ph(h));
};

prect = function(x, y, w, h) {
  return rect(pw(x), ph(y), pw(w), ph(h));
};

ptext = function(t, x, y) {
  return text(t, pw(x), ph(y));
};

ptextSize = function(s) {
  return textSize(pd(s));
};

ptranslate = function(x, y) {
  return translate(pw(x), ph(y));
};

Button = class Button {
  constructor(text1, x1, y1, w1 = 0, h1 = 0, bg1 = 'white', fg1 = 'black') {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
  }

  draw() {
    if (this.visible) {
      fill(this.bg);
      prect(this.x, this.y, this.w, this.h);
      ptextSize(4);
      fill(this.fg);
      return ptext(this.text, this.x, this.y);
    }
  }

  inside() {
    var ref, ref1;
    return (-this.w / 2 <= (ref = mouseX * 100 / width - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = mouseY * 100 / height - this.y) && ref1 <= this.h / 2);
  }

};

BImage = class BImage extends Button {
  constructor(image1, x, y, w, h) {
    super('', x, y, w, h);
    this.image = image1;
    this.visible = false;
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * height / width; // quadratic qr
      return pimage(this.image, this.x - w / 2, this.y - this.h / 2, w, this.h);
    }
  }

};

BRotate = class BRotate extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super('', x, y, w, h, bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = states.SEditor.clocks[this.player];
    [h, m, s] = hms(secs);
    if (h >= 1) {
      ss = h + ':' + d2(m);
    } else {
      ss = m + ':' + (secs < 10 ? s.toFixed(1) : d2(s));
    }
    push();
    ptranslate(this.x, this.y);
    rotate(this.degrees);
    fill(this.bg);
    prect(0, 0, this.w, this.h);
    fill(this.fg);
    ptextSize(18);
    ptext(ss, 0, 1.7);
    ptextSize(5);
    if (states.SEditor.bonuses[this.player] > 0) {
      ptext('+' + trunc3(states.SEditor.bonuses[this.player]) + 's', 0, 15);
    }
    if (states.SEditor.clocks[this.player] <= 0) {
      this.bg = 'red';
    }
    return pop();
  }

};

BEdit = class BEdit extends Button {
  constructor(text, x, y, w, h, fg = 'gray') {
    super(text, x, y, w, h, 'black', fg);
  }

  draw() {
    ptextSize(5);
    fill(this.fg);
    return ptext(this.text, this.x, this.y);
  }

};

BDead = class BDead extends Button {
  constructor(text, x, y, fg = 'lightgray') {
    super(text, x, y, 0, 0, 'black', fg);
  }

  draw() {
    ptextSize(4);
    fill(this.fg);
    return ptext(this.text, this.x, this.y);
  }

};

BColor = class BColor extends Button {
  constructor(fg1, x, y) {
    super('', x, y);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    ptextSize(4);
    fill(this.fg);
    ptext(this.text, this.x, this.y);
    return pop();
  }

};

// struktur för transitionssträngen:
// =>target0 msg0 msg1 =>target1 msg2 msg3 => msg4
// @transitions[msg0] = target0
// @transitions[msg1] = target0
// @transitions[msg2] = target1
// @transitions[msg3] = target1
// @transitions[msg4] = undefined
State = class State {
  constructor(name1) {
    this.name = name1;
    this.buttons = {};
    this.transitions = {};
    this.makeButtons();
  }

  createTrans(t) {
    var arr, k, len, results, target, word;
    target = void 0;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      word = arr[k];
      if (word === '=>') {
        results.push(target = void 0);
      } else if (word.indexOf('=>') === 0) {
        results.push(target = word.slice(2));
      } else {
        results.push(this.transitions[word] = target);
      }
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    return currState = states[this.transitions[key]];
  }

  draw() {}

};

SWelcome = class SWelcome extends State {
  constructor(name) {
    super(name);
    this.createTrans('=>SClock welcome');
  }

  message(key) {
    if (key === 'welcome') {
      toggleFullScreen();
      console.log('toggle');
      resizeCanvas(windowWidth, windowHeight);
    }
    return super.message();
  }

  makeButtons() {
    return this.buttons.welcome = new Button('Click me!', 50, 50, 100, 100);
  }

};

// =>SClock continue pause left right =>SEditor new
SClock = class SClock extends State {
  constructor(name) {
    super(name);
    this.createTrans('=>SClock continue left pause qr right =>SEditor new');
    this.paused = true;
    this.player = -1;
    this.buttons.pause.visible = false;
    this.buttons.continue.visible = false;
  }

  makeButtons() {
    this.buttons.left = new BRotate(50, 22, 100, 44, 180, 'orange', 'white', 0); // eg up
    this.buttons.right = new BRotate(50, 78, 100, 44, 0, 'green', 'white', 1); // eg down
    this.buttons.pause = new Button('pause', 25, 50, 50, 12);
    this.buttons.continue = new Button('continue', 25, 50, 50, 12);
    this.buttons.new = new Button('new', 75, 50, 50, 12);
    return this.buttons.qr = new BImage(qr, 75, 50, 12, 12);
  }

  uppdatera() {
    var clock;
    //console.log 'uppdatera'
    if (this.paused) {
      return;
    }
    clock = states.SEditor.clocks[this.player];
    if (clock > 0) {
      clock -= 1 / 60;
    }
    if (clock <= 0) {
      clock = 0;
      timeout = true;
    }
    return states.SEditor.clocks[this.player] = clock;
  }

  message(key) {
    if (key === 'left') {
      if (timeout) {
        return;
      } else {
        if (this.player === 0) {
          states.SEditor.clocks[0] += states.SEditor.bonuses[0];
        }
        this.paused = false;
        this.player = 1;
        this.buttons.left.fg = 'black';
        this.buttons.right.fg = 'white';
      }
    }
    if (key === 'right') {
      if (timeout) {
        return;
      } else {
        if (this.player === 1) {
          states.SEditor.clocks[1] += states.SEditor.bonuses[1];
        }
        this.paused = false;
        this.player = 0;
        this.buttons.left.fg = 'white';
        this.buttons.right.fg = 'black';
      }
    }
    if (key === 'pause') {
      this.paused = true;
      if (this.player === 0) {
        this.buttons.left.fg = 'gray';
        this.buttons.right.fg = 'black';
      } else {
        this.buttons.left.fg = 'black';
        this.buttons.right.fg = 'gray';
      }
    }
    if (key === 'continue') {
      this.paused = false;
      if (this.player === 0) {
        this.buttons.left.fg = 'white';
        this.buttons.right.fg = 'black';
      } else {
        this.buttons.left.fg = 'black';
        this.buttons.right.fg = 'white';
      }
    }
    this.buttons.pause.visible = !this.paused;
    this.buttons.qr.visible = !this.paused;
    this.buttons.continue.visible = this.paused;
    this.buttons.new.visible = this.paused;
    return super.message(key);
  }

};

// =>SClock ok => orange white green reflection bonus hcp a b c d e f =>SEditor swap a0 a1 a2 a3 a4 a5 b0 b1 b2 b3 b4 b5 c0 c1 c2 c3 c4 c5 d0 d1 d2 d3 d4 d5 e0 e1 e2 e3 e4 e5 f0 f1 f2 f3 f4 f5
SEditor = class SEditor extends State {
  constructor(name) {
    var arr, i, j, k, l, len, len1, ref, ref1;
    super(name);
    this.sums = [0, 0, 0, 0, 0, 0];
    this.hcpSwap = 1;
    arr = '=> H M S m s t bonus green hcp orange reflection white =>SClock ok =>SEditor swap'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        arr.push('HMSmst'[i] + [1, 2, 4, 8, 15, 30][j]);
      }
    }
    this.createTrans(arr.join(' '));
    // initialisera
    this.message('M1'); // M += 1
    this.message('M2'); // M += 2
    this.message('s2'); // s += 2
    this.message('ok');
  }

  makeButtons() {
    var i, j, k, len, letter, name, number, ref, results, xoff, xsize, yoff, ysize;
    this.buttons.swap = new Button('swap', 33, 93, 22, 8);
    this.buttons.ok = new Button('ok', 67, 93, 22, 8);
    this.buttons.orange = new BColor('orange', 50, 3);
    this.buttons.white = new BColor('white', 50, 9);
    this.buttons.green = new BColor('green', 50, 15);
    this.buttons.reflection = new BDead('reflection', 25, 21);
    this.buttons.bonus = new BDead('bonus', 66, 21);
    this.buttons.hcp = new BDead('hcp', 92, 21);
    ref = range(6);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      xsize = 100 / 6;
      ysize = 100 / 10;
      xoff = xsize / 2;
      yoff = 33;
      //shown = 'H M S m s t'.split ' '
      this.buttons[letter] = new BDead('HMSmst'[i], xoff + xsize * i, 26);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(6);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30][j];
          name = letter + number;
          //factor = if i==5 then HCP else 1
          results1.push(this.buttons[name] = new BEdit(number, xoff + xsize * i, yoff + ysize * j, xsize, ysize, 'gray'));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  message(key) {
    var col, letter, number;
    if (key === 'swap') {
      this.hcpSwap = -this.hcpSwap;
    } else if (key === 'ok') {
      timeout = false;
      states.SClock.buttons.continue.visible = false;
      states.SClock.buttons.pause.visible = true;
      states.SClock.buttons.new.visible = false;
      states.SClock.buttons.qr.visible = true;
      states.SClock.buttons.left.fg = 'white';
      states.SClock.buttons.left.bg = 'orange';
      states.SClock.buttons.right.fg = 'white';
      states.SClock.buttons.right.bg = 'green';
    } else {
      this.buttons[key].fg = this.buttons[key].fg === 'gray' ? 'yellow' : 'gray';
      letter = key[0];
      col = 'HMSmst'.indexOf(letter);
      number = parseInt(key.slice(1));
      this.sums[col] = this.buttons[key].fg === 'gray' ? this.sums[col] - number : this.sums[col] + number;
      this.buttons.ok.visible = this.sums[0] + this.sums[1] + this.sums[2] > 0;
      this.buttons.swap.visible = this.sums[5] > 0;
    }
    this.uppdatera();
    return super.message(key);
  }

  uppdatera() {
    this.buttons.white.text = this.compact();
    this.handicap();
    if (this.hcp === 0) {
      this.buttons.orange.text = '';
      return this.buttons.green.text = '';
    } else {
      this.buttons.orange.text = prettyPair(this.players[0][0], this.players[0][1]);
      return this.buttons.green.text = prettyPair(this.players[1][0], this.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'hmsms';
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (this.sums[i] > 0) {
        header0 += this.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (this.sums[i] > 0) {
        header1 += this.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += ' + ' + header1;
    }
    return header;
  }

  handicap() {
    this.hcp = this.hcpSwap * this.sums[5] / (HCP * 60); // 0.0 .. 1.0
    this.refl = HOUR * this.sums[0] + MINUTE * this.sums[1] + this.sums[2];
    this.bonus = MINUTE * this.sums[3] + this.sums[4];
    this.players = [];
    this.players[0] = [this.refl + this.refl * this.hcp, this.bonus + this.bonus * this.hcp];
    this.players[1] = [this.refl - this.refl * this.hcp, this.bonus - this.bonus * this.hcp];
    this.clocks = [this.players[0][0], this.players[1][0]];
    return this.bonuses = [this.players[0][1], this.players[1][1]];
  }

};

//##################################
preload = function() {
  return qr = loadImage('qr.png');
};

windowResized = function() {
  //resizeCanvas screen.width, screen.height
  resizeCanvas(windowWidth, windowHeight);
  //resizeCanvas displayWidth, displayHeight
  return diag = sqrt(width * width + height * height);
};

checkButtons = function() {
  var bkey, button, found, skey, state;
  console.log('checkButtons started');
  for (bkey in buttons) {
    button = buttons[bkey];
    found = false;
    for (skey in states) {
      state = states[skey];
      if (bkey in state.transitions) {
        found = true;
      }
    }
    if (!found) {
      console.log('  Button', bkey, 'not used by any state');
    }
  }
  return console.log('checkButtons done!');
};

checkStates = function() {
  var found, info, skey, state, tkey, transition;
  console.log('checkStates started');
  for (skey in states) {
    state = states[skey];
    found = false;
    for (tkey in state.transitions) {
      transition = state.transitions[tkey];
      if (transition !== void 0 && !(transition in states)) {
        console.log(transition, 'not found');
      }
      if (tkey in buttons) {
        found = true;
      } else {
        info = tkey;
      }
    }
    if (!found) {
      console.log('  State', skey, 'Transition', tkey, 'not defined');
    }
  }
  return console.log('checkStates done!');
};

setup = function() {
  var button, skey, state, tkey, transition;
  os = navigator.appVersion;
  os = os.indexOf('Linux') >= 0 ? 'Android' : 'Windows';
  if (os === 'Android') {
    createCanvas(screen.width, screen.height);
  } else {
    createCanvas(window.innerWidth, window.innerHeight); // Windows or Mac
  }
  diag = sqrt(width * width + height * height);
  textFont('Lucida Sans Unicode');
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  createState('SWelcome', SWelcome);
  createState('SClock', SClock);
  createState('SEditor', SEditor);
// log everything
  for (skey in states) {
    state = states[skey];
    console.log('');
    console.log('State', state);
    for (tkey in state.transitions) {
      transition = state.transitions[tkey];
      button = state.buttons[tkey];
      if (transition === void 0) {
        transition = 'nothing';
      }
      console.log(' ', tkey, '=>', transition, button);
    }
  }
  return currState = os === 'Android' ? states.SWelcome : states.SClock;
};

//checkButtons()
//checkStates()
draw = function() {
  var aspect, key;
  background('black');
  states.SClock.uppdatera();
  for (key in currState.transitions) {
    currState.buttons[key].draw();
  }
  // debug
  aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return ptext(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
  // # os = navigator.appVersion
  // ptextSize 2.5
  // ptext 'P',50,5
  // ptext os,50,10
  // aspect width, height,15
  // aspect innerWidth, innerHeight,20
  // aspect screen.width, screen.height,25
  // aspect displayWidth, displayHeight,30

  // ptext currState.name,50,3
  // # fill 'green'
  // ptext round3(states.SEditor.bonuses[0]),10,3
  // ptext round3(states.SEditor.clocks[0]),25,3
  // ptext round3(states.SEditor.clocks[1]),75,3
  // ptext round3(states.SEditor.bonuses[1]),90,3

  // ptext states.SClock.paused,30,2.5
  // ptext states.SClock.player,70,2.5
  return currState.draw();
};

mouseClicked = function() {
  var button, key, results;
  results = [];
  for (key in currState.transitions) {
    if (currState.transitions[key] === void 0) {
      continue;
    }
    button = currState.buttons[key];
    if (button.visible && button.inside(mouseX, mouseY)) {
      currState.message(key);
      break;
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee