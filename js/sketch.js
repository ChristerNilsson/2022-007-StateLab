// Generated by CoffeeScript 2.5.1
  // TODO
  // Försämring av frameRate inträffar om man går från fullscreen till normal på Android
  // Ta bort S och m ?
var BColor, BDead, BEdit, BImage, BPause, BRotate, BSettings, BShow, Button, FRAMERATE, HCP, HEARTBEAT, HOUR, MINUTE, SAdvanced, SBasic, SClock, State, TOGGLE, backup, clone, createState, currState, d2, debugFunction, diag, draw, dump, getLocalCoords, hms, lastStorageSave, loadSettings, mouseClicked, os, preload, pretty, prettyPair, qr, rates, saveSettings, settings, setup, sound, states, sumRate, trunc3, windowResized,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf;

HCP = 1;

HOUR = 3600;

MINUTE = 60;

TOGGLE = 1; // 0=porträtt (Android) 1=landskap (Mac)

HEARTBEAT = 1000; // ms updates of localStorage

FRAMERATE = 30; // 10

settings = {};

backup = null;

states = {};

qr = null;

currState = null;

os = '';

sound = null;

lastStorageSave = new Date();

rates = [];

sumRate = 0;

diag = 0;

getLocalCoords = function() { // tar 3 microsekunder
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

trunc3 = function(x) {
  return Math.trunc(x * 1000) / 1000;
};

console.assert(trunc3(12.345678) === 12.345);

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (trunc3(h) > 0) {
    header += trunc3(h) + 'h';
  }
  if (trunc3(m) > 0) {
    header += trunc3(m) + 'm';
  }
  if (trunc3(s) > 0) {
    header += trunc3(s) + 's';
  }
  return header;
};

console.assert(pretty(3601) === '1h1s');

console.assert(pretty(123) === '2m3s');

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

console.assert(prettyPair(3601, 123) === '1h1s + 2m3s');

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.assert(d2(3) === '03');

hms = function(x) {
  var h, m, orig, s;
  orig = x;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  if (orig < 10) {
    s = Math.trunc(s * 10) / 10;
  }
  return [h, m, s];
};

chai.assert.deepEqual(hms(180), [0, 3, 0]);

chai.assert.deepEqual(hms(180.5), [0, 3, 0.5]);

clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

Button = class Button {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'white', fg1 = 'black') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.bg);
      rect(this.x, this.y, this.w, this.h);
      textSize(4);
      fill(this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

  inside(x, y) {
    var ref, ref1;
    return (-this.w / 2 <= (ref = x - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

BPause = class BPause extends Button {
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    if (!settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

BSettings = class BSettings extends Button { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    var k, len, ref, v;
    if (settings.paused) {
      push();
      translate(this.x, this.y);
      scale([height / width, width / height][TOGGLE], 1);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      for (k = 0, len = ref.length; k < len; k++) {
        v = ref[k];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        pop();
      }
      return pop();
    }
  }

};

BImage = class BImage extends Button {
  constructor(x, y, w, h, image1) {
    super(x, y, w, h);
    this.image = image1;
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

BRotate = class BRotate extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super(x, y, w, h, '', bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = settings.clocks[this.player];
    [h, m, s] = hms(secs);
    if (h >= 1) {
      ss = h + ':' + d2(m);
    } else {
      ss = m + ':' + (secs < 10 ? s.toFixed(1) : d2(s));
    }
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    if (settings.timeout && settings.player === this.player) {
      this.bg = 'red';
      this.fg = 'black';
    }
    fill(this.bg);
    rect(0, 0, this.w, this.h);
    fill(this.fg);
    textSize(18 + 9);
    text(ss, 0, -2);
    textSize(5 + 3);
    //text (if h==0 then 'm:ss' else 'h:mm'),0,17
    if (settings.bonuses[this.player] > 0) {
      text('+' + pretty(settings.bonuses[this.player]), 0, 17);
    }
    return pop();
  }

};

BEdit = class BEdit extends Button {
  constructor(name1, x, y, w, h, text) {
    super(x, y, w, h, text, 'black');
    this.name = name1;
  }

  draw() {
    var ref;
    push();
    textSize(5);
    fill((ref = this.name, indexOf.call(settings.bits, ref) >= 0) ? 'yellow' : 'gray');
    text(this.text, this.x, this.y);
    return pop();
  }

};

BDead = class BDead extends Button {
  constructor(x, y, text, fg = 'lightgray') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

BShow = class BShow extends BDead {
  constructor(x, y, fg = 'lightgray') {
    super(x, y, 0, 0, '', 'black', fg);
  }

  draw() {
    this.text = settings.show;
    return super.draw();
  }

};

BColor = class BColor extends Button {
  constructor(x, y, fg1) {
    super(x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor(name1) {
    this.name = name1;
    this.buttons = {};
    this.transitions = {};
    this.makeButtons();
  }

  createTrans(t) {
    var arr, k, len, results, target, word;
    target = void 0;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      word = arr[k];
      if (word === '=>') {
        results.push(target = void 0);
      } else if (word.indexOf('=>') === 0) {
        results.push(target = word.slice(2));
      } else {
        results.push(this.transitions[word] = target);
      }
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    return currState = states[this.transitions[key]];
  }

  draw() {
    var results, tkey;
    results = [];
    for (tkey in this.transitions) {
      if (tkey in this.buttons) {
        results.push(this.buttons[tkey].draw());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  mouseClicked() {
    var button, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.transitions) {
      if (this.transitions[key] === void 0) {
        continue;
      }
      button = this.buttons[key];
      if (button.visible && button.inside(x, y)) {
        this.message(key);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

SClock = class SClock extends State {
  constructor(name) {
    super(name);
    this.createTrans('=>SClock left pause qr right =>SBasic edit => show');
    settings.paused = true;
    settings.player = -1;
  }

  makeButtons() {
    this.buttons.left = new BRotate(50, 22, 100, 44, 180, 'orange', 'white', 0); // eg up
    this.buttons.right = new BRotate(50, 78, 100, 44, 0, 'green', 'white', 1); // eg down
    this.buttons.show = new BShow(22, 50, 'black');
    this.buttons.qr = new BImage(50, 50, 33, 12, qr);
    this.buttons.pause = new BPause(67, 50, 17, 12, 'white', 'black');
    return this.buttons.edit = new BSettings(83, 50, 17, 12, 'white', 'black');
  }

  uppdatera() {
    var clock;
    if (settings.paused) {
      return;
    }
    clock = settings.clocks[settings.player];
    if (clock > 0) {
      clock -= 1 / frameRate();
    }
    if (clock <= 0) {
      clock = 0;
      settings.timeout = true;
      settings.paused = true;
    }
    return settings.clocks[settings.player] = clock;
  }

  message(key) {
    var ref, ref1;
    if (key === 'left') {
      if (settings.timeout) {
        return;
      } else {
        if ((ref = settings.player) === (-1) || ref === 0) {
          sound.play();
          settings.clocks[0] += settings.bonuses[0];
        }
        settings.paused = false;
        settings.player = 1;
        this.buttons.left.fg = 'black';
        this.buttons.right.fg = 'white';
      }
    } else if (key === 'right') {
      if (settings.timeout) {
        return;
      } else {
        if ((ref1 = settings.player) === (-1) || ref1 === 1) {
          sound.play();
          settings.clocks[1] += settings.bonuses[1];
        }
        settings.paused = false;
        settings.player = 0;
        this.buttons.left.fg = 'white';
        this.buttons.right.fg = 'black';
      }
    } else if (key === 'pause') {
      settings.paused = true;
      this.buttons.left.fg = settings.player === 0 ? 'white' : 'black';
      this.buttons.right.fg = settings.player === 0 ? 'black' : 'white';
    } else if (key === 'qr') {
      fullscreen(true);
      resizeCanvas(innerWidth, innerHeight);
    } else if (key === 'edit') {
      backup = clone(settings); // to be used by cancel
      console.log('backup skapad', backup);
    }
    saveSettings();
    return super.message(key);
  }

  draw() {
    background('white');
    return super.draw();
  }

};

SBasic = class SBasic extends State {
  constructor(name) {
    var arr;
    super(name);
    arr = '=> bonus green hcp orange reflection white =>SClock cancel ok =>SAdvanced advanced =>SBasic M1 M2 M3 M5 M10 M90 s0 s1 s2 s3 s5 s10 s30'.split(' ');
    this.createTrans(arr.join(' '));
  }

  makeButtons() {
    var h, w, x, y;
    x = [30, 70];
    y = [28, 36, 44, 52, 60, 68, 76, 93];
    w = 10;
    h = 7;
    this.buttons.orange = states.SAdvanced.buttons.orange;
    this.buttons.white = states.SAdvanced.buttons.white;
    this.buttons.green = states.SAdvanced.buttons.green;
    this.buttons.reflection = new BDead(x[0], 20, 'reflection');
    this.buttons.bonus = new BDead(x[1], 20, 'bonus');
    this.buttons.M1 = new Button(x[0], y[0], w, h, '1m');
    this.buttons.M2 = new Button(x[0], y[1], w, h, '2m');
    this.buttons.M3 = new Button(x[0], y[2], w, h, '3m');
    this.buttons.M5 = new Button(x[0], y[3], w, h, '5m');
    this.buttons.M10 = new Button(x[0], y[4], w, h, '10m');
    this.buttons.M90 = new Button(x[0], y[5], w, h, '90m');
    this.buttons.s0 = new Button(x[1], y[0], w, h, '0s');
    this.buttons.s1 = new Button(x[1], y[1], w, h, '1s');
    this.buttons.s2 = new Button(x[1], y[2], w, h, '2s');
    this.buttons.s3 = new Button(x[1], y[3], w, h, '3s');
    this.buttons.s5 = new Button(x[1], y[4], w, h, '5s');
    this.buttons.s10 = new Button(x[1], y[5], w, h, '10s');
    this.buttons.s30 = new Button(x[1], y[6], w, h, '30s');
    this.buttons.advanced = new Button(1 * 100 / 6, y[7], 30, 8, 'advanced');
    this.buttons.cancel = new Button(3 * 100 / 6, y[7], 30, 8, 'cancel');
    return this.buttons.ok = new Button(5 * 100 / 6, y[7], 30, 8, 'ok');
  }

  message(key) {
    if (key === 'advanced') {

    } else if (key === 'basic') {

    } else if (key === 'cancel') {
      settings = clone(backup); // Återställ allt som behövs
      settings.sums = states.SAdvanced.calcSums();
    } else if (key === 'ok') {
      settings.clocks = [settings.players[0][0], settings.players[1][0]];
      settings.bonuses = [settings.players[0][1], settings.players[1][1]];
      settings.timeout = false; // 6+7 shortcut buttons
    } else {
      settings.bits = settings.bits.filter(function(value, index, arr) {
        return value[0] !== key[0];
      });
      console.log('filter', settings.bits);
      states.SAdvanced.message(key);
      settings.sums = states.SAdvanced.calcSums();
      this.buttons.ok.visible = settings.sums.H + settings.sums.M + settings.sums.S > 0 && settings.sums.t < 60;
    }
    return super.message(key);
  }

};

SAdvanced = class SAdvanced extends State {
  constructor(name) {
    var arr, i, j, k, l, len, len1, ref, ref1;
    super(name);
    arr = '=> green white orange reflection bonus hcp H M S m s t =>SClock cancel ok =>SBasic basic =>SAdvanced'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        arr.push('HMSmst'[i] + [1, 2, 4, 8, 15, 30][j]);
      }
    }
    this.createTrans(arr.join(' '));
    this.uppdatera();
  }

  makeButtons() {
    this.buttons.orange = new BColor(50, 3, 'orange');
    this.buttons.white = new BColor(50, 9, 'white');
    this.buttons.green = new BColor(50, 15, 'green');
    this.buttons.reflection = new BDead(25, 21, 'reflection');
    this.buttons.bonus = new BDead(66, 21, 'bonus');
    this.buttons.hcp = new BDead(92, 21, 'hcp');
    this.buttons.basic = new Button(1 * 100 / 6, 93, 30, 8, 'basic');
    this.buttons.cancel = new Button(3 * 100 / 6, 93, 30, 8, 'cancel');
    this.buttons.ok = new Button(5 * 100 / 6, 93, 30, 8, 'ok');
    return this.makeEditButtons();
  }

  makeEditButtons() {
    var i, j, k, len, letter, name, number, ref, results, xoff, xsize, yoff, ysize;
    ref = range(6);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      xsize = 100 / 6;
      ysize = 100 / 10;
      xoff = xsize / 2;
      yoff = 33 + 2;
      this.buttons[letter] = new BDead(xoff + xsize * i, 26 + 2, 'HMSmst'[i]);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(6);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30][j];
          name = letter + number;
          results1.push(this.buttons[name] = new BEdit(name, xoff + xsize * i, yoff + ysize * j, xsize, ysize, number));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  message(key) {
    var hash, k, len, msg, ref;
    console.log('key', key);
    //if key == undefined then return
    if (key === 'basic') {

    } else if (key === 'advanced') {

    } else if (key === 'cancel') {
      settings = clone(backup); // Återställ allt som behövs
      settings.sums = this.calcSums();
    } else if (key === 'ok') {
      settings.clocks = [settings.players[0][0], settings.players[1][0]];
      settings.bonuses = [settings.players[0][1], settings.players[1][1]];
      settings.timeout = false;
    } else {
      hash = {
        'M3': 'M1 M2',
        'M5': 'M1 M4',
        'M10': 'M2 M8',
        'M90': 'H1 M30',
        's0': '',
        's3': 's1 s2',
        's5': 's1 s4',
        's10': 's2 s8'
      };
      if (key in hash) {
        ref = hash[key].split(' ');
        for (k = 0, len = ref.length; k < len; k++) {
          msg = ref[k];
          if (msg !== '') {
            this.message(msg); // 6 x 6 edit buttons
          }
        }
      } else {
        settings.bits = this.flip(settings.bits, key);
        settings.sums = this.calcSums();
        this.buttons.ok.visible = settings.sums.H + settings.sums.M + settings.sums.S > 0 && settings.sums.t < 60;
      }
    }
    this.uppdatera();
    return super.message(key);
  }

  flip(arr, key) {
    if (indexOf.call(arr, key) >= 0) {
      _.remove(arr, function(n) {
        return n === key;
      });
    } else {
      arr.push(key);
    }
    return arr;
  }

  calcSums() {
    var k, key, len, letter, number, ref, res;
    res = {
      H: 0,
      M: 0,
      S: 0,
      m: 0,
      s: 0,
      t: 0
    };
    ref = settings.bits;
    for (k = 0, len = ref.length; k < len; k++) {
      key = ref[k];
      letter = key[0];
      number = parseInt(key.slice(1));
      res[letter] += number;
    }
    return res;
  }

  uppdatera() {
    settings.sums = this.calcSums();
    settings.show = this.compact();
    this.buttons.white.text = settings.show;
    this.handicap();
    if (settings.hcp === 0) {
      this.buttons.orange.text = '';
      return this.buttons.green.text = '';
    } else {
      this.buttons.orange.text = prettyPair(settings.players[0][0], settings.players[0][1]);
      return this.buttons.green.text = prettyPair(settings.players[1][0], settings.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, key, keys, l, len, len1, ref, ref1;
    keys = 'HMSms';
    headers = 'hmsms';
    header0 = '';
    header1 = '';
    ref = [0, 1, 2];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      key = keys[i];
      if (settings.sums[key] > 0) {
        header0 += settings.sums[key] + headers[i];
      }
    }
    ref1 = [3, 4];
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      key = keys[i];
      if (settings.sums[key] > 0) {
        header1 += settings.sums[key] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += '+' + header1;
    }
    if (settings.sums.t > 0) {
      header += '\n' + settings.sums.t;
    }
    return header;
  }

  handicap() {
    settings.hcp = settings.sums.t / (HCP * 60); // 0.0 .. 1.0
    settings.refl = HOUR * settings.sums.H + MINUTE * settings.sums.M + settings.sums.S; // sekunder
    settings.bonus = MINUTE * settings.sums.m + settings.sums.s; // sekunder
    settings.players = [];
    settings.players[0] = [settings.refl + settings.refl * settings.hcp, settings.bonus + settings.bonus * settings.hcp];
    return settings.players[1] = [settings.refl - settings.refl * settings.hcp, settings.bonus - settings.bonus * settings.hcp];
  }

};

//##################################
preload = function() {
  qr = loadImage('qr.png');
  return sound = loadSound('key.mp3');
};

windowResized = function() {
  resizeCanvas(innerWidth, innerHeight);
  return diag = sqrt(width * width + height * height);
};

setup = function() {
  var canvas;
  frameRate(FRAMERATE);
  os = navigator.appVersion;
  if (os.indexOf('Linux') >= 0) {
    os = 'Android';
  }
  if (os.indexOf('Windows') >= 0) {
    os = 'Windows';
  }
  if (os.indexOf('Mac') >= 0) {
    os = 'Mac';
  }
  // os = 'Android'
  canvas = createCanvas(innerWidth, innerHeight);
  bodyScrollLock.disableBodyScroll(canvas); // Förhindrar att man kan scrolla canvas på iOS
  if (os === 'Android') {
    textFont('Droid Sans');
  }
  if (os === 'Mac') {
    textFont('Verdana');
  }
  if (os === 'Windows') {
    textFont('Lucida Sans Unicode');
  }
  TOGGLE = os === 'Mac' ? 1 : 0;
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  settings = loadSettings();
  createState('SClock', SClock);
  createState('SAdvanced', SAdvanced);
  createState('SBasic', SBasic);
  
  //dump()
  return currState = states.SClock;
};

//checkButtons()
//checkStates()
dump = function() { // log everything
  var button, results, skey, state, tkey, transition;
  results = [];
  for (skey in states) {
    state = states[skey];
    console.log('');
    console.log('State', state);
    results.push((function() {
      var results1;
      results1 = [];
      for (tkey in state.transitions) {
        transition = state.transitions[tkey];
        button = state.buttons[tkey];
        if (transition === void 0) {
          transition = 'nothing';
        }
        results1.push(console.log(' ', tkey, '=>', transition, button));
      }
      return results1;
    })());
  }
  return results;
};

mouseClicked = function() {
  return currState.mouseClicked();
};

draw = function() {
  var aspect;
  if (TOGGLE === 0) {
    scale(width / 100, height / 100); // portrait
  } else {
    rotate(90);
    translate(0, -width);
    scale(height / 100, width / 100); // Landscape
  }
  strokeWeight(100 / height);
  push();
  background('black');
  states.SClock.uppdatera();
  currState.draw();
  pop();
  saveSettings();
  // debug
  aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return text(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
  return debugFunction();
};

debugFunction = function() {
  var oldest;
  rates.push(frameRate());
  if (rates.length > 100) {
    oldest = rates.shift();
  } else {
    oldest = rates[0];
  }
  sumRate += _.last(rates) - oldest;
  // # os = navigator.appVersion
  textSize(2.5);
  return text(Math.round(sumRate), 95, 5);
};

// text currState.name,50,3
// # fill 'green'
// text round3(states.SBasic.bonuses[0]),10,3
// text round3(states.SBasic.clocks[0]),25,3
// text round3(states.SBasic.clocks[1]),75,3
// text round3(states.SBasic.bonuses[1]),90,3

// text states.SClock.paused,30,2.5
// text states.SClock.player,70,2.5

// currState.draw()
loadSettings = function() {
  if (localStorage.settings) {
    settings = JSON.parse(localStorage.settings);
    settings.paused = true;
  } else {
    settings = {};
    settings.show = '3m2s';
    settings.bits = ['M1', 'M2', 's2'];
    settings.clocks = [180, 180];
    settings.bonuses = [2, 2];
    settings.sums = [
      {
        H: 0,
        M: 3,
        S: 0,
        m: 0,
        S: 2,
        t: 0
      }
    ];
    settings.player = -1;
    settings.timeout = false;
    settings.paused = true;
    localStorage.settings = JSON.stringify(settings);
  }
  console.log('settings', settings);
  return settings;
};

saveSettings = function() {
  var d;
  d = new Date();
  if (d - lastStorageSave < HEARTBEAT) { // ms
    return;
  }
  lastStorageSave = d;
  localStorage.settings = JSON.stringify(settings);
  return console.log('saveSettings', localStorage.settings);
};

// checkButtons = ->
// 	console.log 'checkButtons started'
// 	for bkey of buttons
// 		button = buttons[bkey]
// 		found = false
// 		for skey of states
// 			state = states[skey]
// 			if bkey of state.transitions then found = true
// 		if not found then console.log '  Button',bkey,'not used by any state'
// 	console.log 'checkButtons done!'

// checkStates = ->
// 	console.log 'checkStates started'
// 	for skey of states
// 		state = states[skey]
// 		found = false
// 		for tkey of state.transitions
// 			transition = state.transitions[tkey]
// 			if transition != undefined and transition not of states then console.log transition,'not found'
// 			if tkey of buttons then found = true else info = tkey
// 		if not found then console.log '  State',skey,'Transition',tkey, 'not defined'
// 	console.log 'checkStates done!'

// arr = []
// for i in range 60
// 	arr.push "#{i} #{Math.round((60+i)/(60-i)*1000)/1000}"
// console.log arr.join "\n"

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVtQjs7O0FBQUEsSUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxTQUFBLEVBQUEsR0FBQSxFQUFBLFNBQUEsRUFBQSxJQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxXQUFBLEVBQUEsU0FBQSxFQUFBLEVBQUEsRUFBQSxhQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsY0FBQSxFQUFBLEdBQUEsRUFBQSxlQUFBLEVBQUEsWUFBQSxFQUFBLFlBQUEsRUFBQSxFQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxVQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxZQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsYUFBQTtFQUFBOzs7QUFFbkIsR0FBQSxHQUFNOztBQUNOLElBQUEsR0FBTzs7QUFDUCxNQUFBLEdBQVM7O0FBRVQsTUFBQSxHQUFTLEVBTlU7O0FBT25CLFNBQUEsR0FBWSxLQVBPOztBQVNuQixTQUFBLEdBQVksR0FUTzs7QUFXbkIsUUFBQSxHQUFXLENBQUE7O0FBQ1gsTUFBQSxHQUFTOztBQUNULE1BQUEsR0FBUyxDQUFBOztBQUVULEVBQUEsR0FBSzs7QUFDTCxTQUFBLEdBQVk7O0FBQ1osRUFBQSxHQUFLOztBQUNMLEtBQUEsR0FBUTs7QUFDUixlQUFBLEdBQWtCLElBQUksSUFBSixDQUFBOztBQUVsQixLQUFBLEdBQVE7O0FBQ1IsT0FBQSxHQUFV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R0FBbUIsSUFBSSxNQUFKLENBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixFQUFnQixDQUFDLENBQUMsQ0FBRCxDQUFqQixFQUFzQixDQUF0QixFQUF3QixDQUF4QixFQUEyQixJQUEzQjtJQUNuQixJQUFDLENBQUEsT0FBTyxDQUFDLEVBQVQsR0FBbUIsSUFBSSxNQUFKLENBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixFQUFnQixDQUFDLENBQUMsQ0FBRCxDQUFqQixFQUFzQixDQUF0QixFQUF3QixDQUF4QixFQUEyQixJQUEzQjtJQUNuQixJQUFDLENBQUEsT0FBTyxDQUFDLEdBQVQsR0FBb0IsSUFBSSxNQUFKLENBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixFQUFnQixDQUFDLENBQUMsQ0FBRCxDQUFqQixFQUFzQixDQUF0QixFQUF3QixDQUF4QixFQUEyQixLQUEzQjtJQUNwQixJQUFDLENBQUEsT0FBTyxDQUFDLEdBQVQsR0FBb0IsSUFBSSxNQUFKLENBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixFQUFnQixDQUFDLENBQUMsQ0FBRCxDQUFqQixFQUFzQixDQUF0QixFQUF3QixDQUF4QixFQUEyQixLQUEzQjtJQUVwQixJQUFDLENBQUEsT0FBTyxDQUFDLEVBQVQsR0FBbUIsSUFBSSxNQUFKLENBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixFQUFnQixDQUFDLENBQUMsQ0FBRCxDQUFqQixFQUFzQixDQUF0QixFQUF3QixDQUF4QixFQUEyQixJQUEzQjtJQUNuQixJQUFDLENBQUEsT0FBTyxDQUFDLEVBQVQsR0FBbUIsSUFBSSxNQUFKLENBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixFQUFnQixDQUFDLENBQUMsQ0FBRCxDQUFqQixFQUFzQixDQUF0QixFQUF3QixDQUF4QixFQUEyQixJQUEzQjtJQUNuQixJQUFDLENBQUEsT0FBTyxDQUFDLEVBQVQsR0FBbUIsSUFBSSxNQUFKLENBQVcsQ0FBQyxDQUFDLENBQUQsQ0FBWixFQUFnQixDQUFDLENBQUMsQ0FBRCxDQUFqQixFQUFzQixDQUF0QixFQUF3QixDQUF4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QUMsTUFBVCxHQUFrQjtJQUNsQixZQUFZLENBQUMsUUFBYixHQUF3QixJQUFJLENBQUMsU0FBTCxDQUFlLFFBQWYsRUFiekI7O0VBY0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCLFFBQXhCO1NBQ0E7QUFoQmM7O0FBa0JmLFlBQUEsR0FBZSxRQUFBLENBQUEsQ0FBQTtBQUNmLE1BQUE7RUFBQyxDQUFBLEdBQUksSUFBSSxJQUFKLENBQUE7RUFDSixJQUFHLENBQUEsR0FBSSxlQUFKLEdBQXNCLFNBQXpCO0FBQXdDLFdBQXhDOztFQUNBLGVBQUEsR0FBa0I7RUFDbEIsWUFBWSxDQUFDLFFBQWIsR0FBd0IsSUFBSSxDQUFDLFNBQUwsQ0FBZSxRQUFmO1NBQ3hCLE9BQU8sQ0FBQyxHQUFSLENBQVksY0FBWixFQUEyQixZQUFZLENBQUMsUUFBeEM7QUFMYzs7QUE5bEJJIiwic291cmNlc0NvbnRlbnQiOlsiIyBUT0RPXHJcbiMgRsO2cnPDpG1yaW5nIGF2IGZyYW1lUmF0ZSBpbnRyw6RmZmFyIG9tIG1hbiBnw6VyIGZyw6VuIGZ1bGxzY3JlZW4gdGlsbCBub3JtYWwgcMOlIEFuZHJvaWRcclxuIyBUYSBib3J0IFMgb2NoIG0gP1xyXG5cclxuSENQID0gMVxyXG5IT1VSID0gMzYwMFxyXG5NSU5VVEUgPSA2MFxyXG5cclxuVE9HR0xFID0gMSAjIDA9cG9ydHLDpHR0IChBbmRyb2lkKSAxPWxhbmRza2FwIChNYWMpXHJcbkhFQVJUQkVBVCA9IDEwMDAgIyBtcyB1cGRhdGVzIG9mIGxvY2FsU3RvcmFnZVxyXG5cclxuRlJBTUVSQVRFID0gMzAgIyAxMFxyXG5cclxuc2V0dGluZ3MgPSB7fVxyXG5iYWNrdXAgPSBudWxsXHJcbnN0YXRlcyA9IHt9XHJcblxyXG5xciA9IG51bGxcclxuY3VyclN0YXRlID0gbnVsbFxyXG5vcyA9ICcnXHJcbnNvdW5kID0gbnVsbFxyXG5sYXN0U3RvcmFnZVNhdmUgPSBuZXcgRGF0ZSgpXHJcblxyXG5yYXRlcyA9IFtdXHJcbnN1bVJhdGUgPSAwXHJcblxyXG5kaWFnID0gMCBcclxuXHJcbmdldExvY2FsQ29vcmRzID0gLT4gIyB0YXIgMyBtaWNyb3Nla3VuZGVyXHJcblx0bWF0cml4ID0gZHJhd2luZ0NvbnRleHQuZ2V0VHJhbnNmb3JtKClcclxuXHRwZCA9IHBpeGVsRGVuc2l0eSgpXHJcblx0bWF0cml4LmludmVyc2UoKS50cmFuc2Zvcm1Qb2ludCBuZXcgRE9NUG9pbnQgbW91c2VYICogcGQsbW91c2VZICogcGRcclxuXHJcbmNyZWF0ZVN0YXRlID0gKGtleSxrbGFzcykgLT4gc3RhdGVzW2tleV0gPSBuZXcga2xhc3Mga2V5XHJcblxyXG50cnVuYzMgPSAoeCkgLT4gTWF0aC50cnVuYyh4KjEwMDApLzEwMDBcclxuY29uc29sZS5hc3NlcnQgdHJ1bmMzKDEyLjM0NTY3OCk9PTEyLjM0NVxyXG5cclxucHJldHR5ID0gKHRvdCkgLT5cclxuXHRzID0gdG90ICUgNjBcclxuXHR0b3QgPSAodG90IC0gcykgLyA2MFxyXG5cdG0gPSB0b3QgJSA2MFxyXG5cdHRvdCA9ICh0b3QgLSBtKSAvIDYwXHJcblx0aCA9IHRvdCAlIDYwXHJcblx0aGVhZGVyID0gJydcclxuXHRpZiB0cnVuYzMoaCk+MCB0aGVuIGhlYWRlciArPSB0cnVuYzMoaCkgKyAnaCdcclxuXHRpZiB0cnVuYzMobSk+MCB0aGVuIGhlYWRlciArPSB0cnVuYzMobSkgKyAnbSdcclxuXHRpZiB0cnVuYzMocyk+MCB0aGVuIGhlYWRlciArPSB0cnVuYzMocykgKyAncydcclxuXHRoZWFkZXJcclxuY29uc29sZS5hc3NlcnQgcHJldHR5KDM2MDEpID09ICcxaDFzJ1xyXG5jb25zb2xlLmFzc2VydCBwcmV0dHkoMTIzKSA9PSAnMm0zcydcclxuXHJcbnByZXR0eVBhaXIgPSAoYSxiKSAtPlxyXG5cdHNlcGFyYXRvciA9IGlmIHByZXR0eShiKSAhPSAnJyB0aGVuICcgKyAnIGVsc2UgJydcclxuXHRwcmV0dHkoYSkgKyBzZXBhcmF0b3IgKyBwcmV0dHkoYilcclxuY29uc29sZS5hc3NlcnQgcHJldHR5UGFpcigzNjAxLDEyMykgPT0gJzFoMXMgKyAybTNzJ1xyXG5cclxuZDIgPSAoeCkgLT5cclxuXHR4ID0gTWF0aC50cnVuYyB4XHJcblx0aWYgeCA8IDEwIHRoZW4gJzAnK3ggZWxzZSB4XHJcbmNvbnNvbGUuYXNzZXJ0IGQyKDMpID09ICcwMydcclxuXHJcbmhtcyA9ICh4KSAtPlxyXG5cdG9yaWcgPSB4XHJcblx0cyA9IHggJSUgNjBcclxuXHR4ID0geCAvLyA2MFxyXG5cdG0gPSB4ICUlIDYwXHJcblx0eCA9IHggLy8gNjBcclxuXHRoID0geFxyXG5cdGlmIG9yaWcgPCAxMCB0aGVuIHMgPSBNYXRoLnRydW5jKHMqMTApLzEwIFxyXG5cdFtoLG0sc10gXHJcbmNoYWkuYXNzZXJ0LmRlZXBFcXVhbCBobXMoMTgwKSwgWzAsMywwXVxyXG5jaGFpLmFzc2VydC5kZWVwRXF1YWwgaG1zKDE4MC41KSwgWzAsMywwLjVdXHJcblxyXG5jbG9uZSA9ICh4KSAtPiBKU09OLnBhcnNlIEpTT04uc3RyaW5naWZ5IHhcclxuXHJcbmNsYXNzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKEB4LEB5LEB3LEBoLEB0ZXh0PScnLEBiZz0nd2hpdGUnLEBmZz0nYmxhY2snKSAtPlxyXG5cdFx0QHZpc2libGUgPSB0cnVlXHJcblx0XHRAeCA9IE1hdGgucm91bmQgQHhcclxuXHRcdEB5ID0gTWF0aC5yb3VuZCBAeVxyXG5cdFx0QHcgPSBNYXRoLnJvdW5kIEB3XHJcblx0XHRAaCA9IE1hdGgucm91bmQgQGhcclxuXHRkcmF3IDogLT5cclxuXHRcdGlmIEB2aXNpYmxlXHJcblx0XHRcdHB1c2goKVxyXG5cdFx0XHRmaWxsIEBiZ1xyXG5cdFx0XHRyZWN0IEB4LEB5LEB3LEBoXHJcblx0XHRcdHRleHRTaXplIDRcclxuXHRcdFx0ZmlsbCBAZmdcclxuXHRcdFx0dGV4dCBAdGV4dCxAeCxAeVxyXG5cdFx0XHRwb3AoKVxyXG5cdGluc2lkZSA6ICh4LHkpIC0+IC1Ady8yIDw9IHgtQHggPD0gQHcvMiBhbmQgLUBoLzIgPD0geS1AeSA8PSBAaC8yXHJcblxyXG5jbGFzcyBCUGF1c2UgZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksdz0wLGg9MCxAYmc9J3doaXRlJyxAZmc9J2JsYWNrJykgLT5cclxuXHRcdHN1cGVyIHgseSx3LGhcclxuXHRkcmF3IDogLT5cclxuXHRcdGlmIG5vdCBzZXR0aW5ncy5wYXVzZWRcclxuXHRcdFx0ZmlsbCBAZmdcclxuXHRcdFx0cmVjdCBAeC0xLjc1LEB5LDMsNlxyXG5cdFx0XHRyZWN0IEB4KzEuNzUsQHksMyw2XHJcblxyXG5jbGFzcyBCU2V0dGluZ3MgZXh0ZW5kcyBCdXR0b24gIyBLdWdnaGp1bFxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSx3PTAsaD0wLEBiZz0nd2hpdGUnLEBmZz0nYmxhY2snKSAtPlxyXG5cdFx0c3VwZXIgeCx5LHcsaFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0aWYgc2V0dGluZ3MucGF1c2VkXHJcblx0XHRcdHB1c2goKVxyXG5cdFx0XHR0cmFuc2xhdGUgQHgsQHlcclxuXHRcdFx0c2NhbGUgW2hlaWdodC93aWR0aCx3aWR0aC9oZWlnaHRdW1RPR0dMRV0sMVxyXG5cdFx0XHRmaWxsIEBmZ1xyXG5cdFx0XHRjaXJjbGUgMCwwLDZcclxuXHRcdFx0ZmlsbCBAYmdcclxuXHRcdFx0Y2lyY2xlIDAsMCwzXHJcblx0XHRcdGZpbGwgQGZnXHJcblx0XHRcdGZvciB2IGluIHJhbmdlIDAsMzYwLDQ1XHJcblx0XHRcdFx0cHVzaCgpXHJcblx0XHRcdFx0cm90YXRlIHZcclxuXHRcdFx0XHR0cmFuc2xhdGUgMywwXHJcblx0XHRcdFx0c3Ryb2tlIEBmZ1xyXG5cdFx0XHRcdHJlY3QgMCwwLDEsMVxyXG5cdFx0XHRcdHBvcCgpXHJcblx0XHRcdHBvcCgpXHJcblxyXG5jbGFzcyBCSW1hZ2UgZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksdyxoLEBpbWFnZSkgLT5cclxuXHRcdHN1cGVyIHgseSx3LGhcclxuXHRkcmF3IDogIC0+XHJcblx0XHRpZiBAaW1hZ2VcclxuXHRcdFx0dyA9IEBoICogW2hlaWdodC93aWR0aCx3aWR0aC9oZWlnaHRdW1RPR0dMRV1cclxuXHRcdFx0aW1hZ2UgQGltYWdlLEB4LXcvMiwgMC4wNzUrQHktQGgvMiwgdywgQGhcclxuXHJcbmNsYXNzIEJSb3RhdGUgZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksdyxoLEBkZWdyZWVzLGJnLGZnLEBwbGF5ZXIpIC0+IFxyXG5cdFx0c3VwZXIgeCx5LHcsaCwnJyxiZyxmZ1xyXG5cclxuXHRkcmF3IDogLT5cclxuXHRcdHNlY3MgPSBzZXR0aW5ncy5jbG9ja3NbQHBsYXllcl1cclxuXHRcdFtoLG0sc10gPSBobXMgc2Vjc1xyXG5cdFx0aWYgaCA+PSAxIHRoZW4gc3MgPSBoICsgJzonICsgZDIgbVxyXG5cdFx0ZWxzZSBzcyA9IG0gKyAnOicgKyBpZiBzZWNzIDwgMTAgIHRoZW4gcy50b0ZpeGVkIDEgZWxzZSBkMiBzXHJcblx0XHRub1N0cm9rZSgpXHJcblx0XHRwdXNoKClcclxuXHRcdHRyYW5zbGF0ZSBAeCxAeVxyXG5cdFx0cm90YXRlIEBkZWdyZWVzXHJcblxyXG5cdFx0aWYgc2V0dGluZ3MudGltZW91dCBhbmQgc2V0dGluZ3MucGxheWVyID09IEBwbGF5ZXJcclxuXHRcdFx0QGJnID0gJ3JlZCdcclxuXHRcdFx0QGZnID0gJ2JsYWNrJ1xyXG5cclxuXHRcdGZpbGwgQGJnXHJcblx0XHRyZWN0IDAsMCxAdyxAaFxyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHRTaXplIDE4KzlcclxuXHRcdHRleHQgc3MsMCwtMlxyXG5cdFx0dGV4dFNpemUgNSszXHJcblxyXG5cdFx0I3RleHQgKGlmIGg9PTAgdGhlbiAnbTpzcycgZWxzZSAnaDptbScpLDAsMTdcclxuXHRcdGlmIHNldHRpbmdzLmJvbnVzZXNbQHBsYXllcl0gPiAwXHJcblx0XHRcdHRleHQgJysnICsgcHJldHR5KHNldHRpbmdzLmJvbnVzZXNbQHBsYXllcl0pLDAsMTdcclxuXHJcblx0XHRwb3AoKVxyXG5cclxuY2xhc3MgQkVkaXQgZXh0ZW5kcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSx4LHksdyxoLHRleHQpIC0+IFxyXG5cdFx0c3VwZXIgeCx5LHcsaCx0ZXh0LCdibGFjaydcclxuXHRkcmF3IDogLT5cclxuXHRcdHB1c2goKVxyXG5cdFx0dGV4dFNpemUgNVxyXG5cdFx0ZmlsbCBpZiBAbmFtZSBpbiBzZXR0aW5ncy5iaXRzIHRoZW4gJ3llbGxvdycgZWxzZSAnZ3JheSdcclxuXHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHRcdHBvcCgpXHJcblxyXG5jbGFzcyBCRGVhZCBleHRlbmRzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSx0ZXh0LGZnPSdsaWdodGdyYXknKSAtPiBcclxuXHRcdHN1cGVyIHgseSwwLDAsdGV4dCwnYmxhY2snLGZnXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRwdXNoKClcclxuXHRcdHRleHRTaXplIDRcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblx0XHRwb3AoKVxyXG5cdFx0XHJcbmNsYXNzIEJTaG93IGV4dGVuZHMgQkRlYWRcclxuXHRjb25zdHJ1Y3RvciA6ICh4LHksZmc9J2xpZ2h0Z3JheScpIC0+IFxyXG5cdFx0c3VwZXIgeCx5LDAsMCwnJywnYmxhY2snLGZnXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRAdGV4dCA9IHNldHRpbmdzLnNob3dcclxuXHRcdHN1cGVyKClcclxuXHJcbmNsYXNzIEJDb2xvciBleHRlbmRzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKHgseSxAZmcpIC0+IHN1cGVyIHgseSwwLDBcclxuXHRkcmF3IDogLT5cclxuXHRcdHB1c2goKVxyXG5cdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRcdHRleHRTaXplIDRcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblx0XHRwb3AoKVxyXG5cclxuY2xhc3MgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdEBidXR0b25zID0ge31cclxuXHRcdEB0cmFuc2l0aW9ucyA9IHt9XHJcblx0XHRAbWFrZUJ1dHRvbnMoKVxyXG5cclxuXHRjcmVhdGVUcmFucyA6ICh0KSAtPlxyXG5cdFx0dGFyZ2V0ID0gdW5kZWZpbmVkXHJcblx0XHRhcnIgPSB0LnNwbGl0ICcgJ1xyXG5cdFx0Zm9yIHdvcmQgaW4gYXJyXHJcblx0XHRcdGlmIHdvcmQgPT0gJz0+JyB0aGVuIHRhcmdldCA9IHVuZGVmaW5lZFxyXG5cdFx0XHRlbHNlIGlmIHdvcmQuaW5kZXhPZignPT4nKSA9PSAwIHRoZW4gdGFyZ2V0ID0gd29yZC5zbGljZSAyXHJcblx0XHRcdGVsc2UgQHRyYW5zaXRpb25zW3dvcmRdID0gdGFyZ2V0XHJcblxyXG5cdG1lc3NhZ2UgOiAoa2V5KSAtPlxyXG5cdFx0Y29uc29sZS5sb2cgXCJjbGlja2VkICN7QG5hbWV9LiN7a2V5fSA9PiAje0B0cmFuc2l0aW9uc1trZXldfVwiXHJcblx0XHRjdXJyU3RhdGUgPSBzdGF0ZXNbQHRyYW5zaXRpb25zW2tleV1dXHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0Zm9yIHRrZXkgb2YgQHRyYW5zaXRpb25zXHJcblx0XHRcdGlmIHRrZXkgb2YgQGJ1dHRvbnNcclxuXHRcdFx0XHRAYnV0dG9uc1t0a2V5XS5kcmF3KClcclxuXHJcblx0bW91c2VDbGlja2VkIDogLT5cclxuXHRcdHt4LHl9ID0gZ2V0TG9jYWxDb29yZHMoKVxyXG5cdFx0Zm9yIGtleSBvZiBAdHJhbnNpdGlvbnNcclxuXHRcdFx0aWYgQHRyYW5zaXRpb25zW2tleV0gPT0gdW5kZWZpbmVkIHRoZW4gY29udGludWVcclxuXHRcdFx0YnV0dG9uID0gQGJ1dHRvbnNba2V5XVxyXG5cdFx0XHRpZiBidXR0b24udmlzaWJsZSBhbmQgYnV0dG9uLmluc2lkZSB4LCB5XHJcblx0XHRcdFx0QG1lc3NhZ2Uga2V5XHJcblx0XHRcdFx0YnJlYWtcclxuXHJcbmNsYXNzIFNDbG9jayBleHRlbmRzIFN0YXRlXHJcblxyXG5cdGNvbnN0cnVjdG9yIDogKG5hbWUpIC0+XHJcblx0XHRzdXBlciBuYW1lXHJcblx0XHRAY3JlYXRlVHJhbnMgJz0+U0Nsb2NrIGxlZnQgcGF1c2UgcXIgcmlnaHQgPT5TQmFzaWMgZWRpdCA9PiBzaG93J1xyXG5cdFx0c2V0dGluZ3MucGF1c2VkID0gdHJ1ZVxyXG5cdFx0c2V0dGluZ3MucGxheWVyID0gLTFcclxuXHJcblx0bWFrZUJ1dHRvbnMgOiAtPlxyXG5cdFx0QGJ1dHRvbnMubGVmdCAgPSBuZXcgQlJvdGF0ZSA1MCwgMjIsIDEwMCwgNDQsIDE4MCwgJ29yYW5nZScsICd3aGl0ZScsIDAgIyBlZyB1cFxyXG5cdFx0QGJ1dHRvbnMucmlnaHQgPSBuZXcgQlJvdGF0ZSA1MCwgNzgsIDEwMCwgNDQsICAgMCwgJ2dyZWVuJywgICd3aGl0ZScsIDEgIyBlZyBkb3duXHJcblxyXG5cdFx0QGJ1dHRvbnMuc2hvdyAgPSBuZXcgQlNob3cgICAgIDIyLCA1MCwgJ2JsYWNrJ1xyXG5cdFx0QGJ1dHRvbnMucXIgICAgPSBuZXcgQkltYWdlICAgIDUwLCA1MCwgMzMsIDEyLCBxclxyXG5cdFx0QGJ1dHRvbnMucGF1c2UgPSBuZXcgQlBhdXNlICAgIDY3LCA1MCwgMTcsIDEyLCAnd2hpdGUnLCAnYmxhY2snXHJcblx0XHRAYnV0dG9ucy5lZGl0ICA9IG5ldyBCU2V0dGluZ3MgODMsIDUwLCAxNywgMTIsICd3aGl0ZScsICdibGFjaydcclxuXHJcblx0dXBwZGF0ZXJhIDogLT5cclxuXHRcdGlmIHNldHRpbmdzLnBhdXNlZCB0aGVuIHJldHVyblxyXG5cdFx0Y2xvY2sgPSBzZXR0aW5ncy5jbG9ja3Nbc2V0dGluZ3MucGxheWVyXVxyXG5cdFx0aWYgY2xvY2sgPiAwIHRoZW4gY2xvY2sgLT0gMS9mcmFtZVJhdGUoKVxyXG5cdFx0aWYgY2xvY2sgPD0gMFxyXG5cdFx0XHRjbG9jayA9IDBcclxuXHRcdFx0c2V0dGluZ3MudGltZW91dCA9IHRydWVcclxuXHRcdFx0c2V0dGluZ3MucGF1c2VkID0gdHJ1ZVxyXG5cclxuXHRcdHNldHRpbmdzLmNsb2Nrc1tzZXR0aW5ncy5wbGF5ZXJdID0gY2xvY2tcclxuXHJcblx0bWVzc2FnZSA6IChrZXkpIC0+XHJcblx0XHRpZiBrZXkgPT0gJ2xlZnQnXHJcblx0XHRcdGlmIHNldHRpbmdzLnRpbWVvdXQgdGhlbiByZXR1cm5cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdGlmIHNldHRpbmdzLnBsYXllciBpbiBbLTEsMF1cclxuXHRcdFx0XHRcdHNvdW5kLnBsYXkoKVxyXG5cdFx0XHRcdFx0c2V0dGluZ3MuY2xvY2tzWzBdICs9IHNldHRpbmdzLmJvbnVzZXNbMF1cclxuXHRcdFx0XHRzZXR0aW5ncy5wYXVzZWQgPSBmYWxzZVxyXG5cdFx0XHRcdHNldHRpbmdzLnBsYXllciA9IDFcclxuXHRcdFx0XHRAYnV0dG9ucy5sZWZ0LmZnID0gJ2JsYWNrJ1xyXG5cdFx0XHRcdEBidXR0b25zLnJpZ2h0LmZnID0gJ3doaXRlJ1xyXG5cclxuXHRcdGVsc2UgaWYga2V5ID09ICdyaWdodCdcclxuXHRcdFx0aWYgc2V0dGluZ3MudGltZW91dCB0aGVuIHJldHVyblxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0aWYgc2V0dGluZ3MucGxheWVyIGluIFstMSwxXVxyXG5cdFx0XHRcdFx0c291bmQucGxheSgpXHJcblx0XHRcdFx0XHRzZXR0aW5ncy5jbG9ja3NbMV0gKz0gc2V0dGluZ3MuYm9udXNlc1sxXVxyXG5cdFx0XHRcdHNldHRpbmdzLnBhdXNlZCA9IGZhbHNlXHJcblx0XHRcdFx0c2V0dGluZ3MucGxheWVyID0gMFxyXG5cdFx0XHRcdEBidXR0b25zLmxlZnQuZmcgPSAnd2hpdGUnXHJcblx0XHRcdFx0QGJ1dHRvbnMucmlnaHQuZmcgPSAnYmxhY2snXHJcblxyXG5cdFx0ZWxzZSBpZiBrZXkgPT0gJ3BhdXNlJ1xyXG5cdFx0XHRzZXR0aW5ncy5wYXVzZWQgPSB0cnVlXHJcblx0XHRcdEBidXR0b25zLmxlZnQuZmcgPSBpZiBzZXR0aW5ncy5wbGF5ZXIgPT0gMCB0aGVuICd3aGl0ZScgZWxzZSAnYmxhY2snXHJcblx0XHRcdEBidXR0b25zLnJpZ2h0LmZnID0gaWYgc2V0dGluZ3MucGxheWVyID09IDAgdGhlbiAnYmxhY2snIGVsc2UgJ3doaXRlJ1xyXG5cclxuXHRcdGVsc2UgaWYga2V5ID09ICdxcidcclxuXHRcdFx0ZnVsbHNjcmVlbiB0cnVlXHJcblx0XHRcdHJlc2l6ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG5cclxuXHRcdGVsc2UgaWYga2V5ID09ICdlZGl0J1xyXG5cdFx0XHRiYWNrdXAgPSBjbG9uZSBzZXR0aW5ncyAjIHRvIGJlIHVzZWQgYnkgY2FuY2VsXHJcblx0XHRcdGNvbnNvbGUubG9nICdiYWNrdXAgc2thcGFkJyxiYWNrdXBcclxuXHJcblx0XHRzYXZlU2V0dGluZ3MoKVxyXG5cdFx0c3VwZXIga2V5XHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0YmFja2dyb3VuZCAnd2hpdGUnXHJcblx0XHRzdXBlcigpXHJcblxyXG5jbGFzcyBTQmFzaWMgZXh0ZW5kcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogKG5hbWUpIC0+XHJcblx0XHRzdXBlciBuYW1lXHJcblx0XHRhcnIgPSAnPT4gYm9udXMgZ3JlZW4gaGNwIG9yYW5nZSByZWZsZWN0aW9uIHdoaXRlID0+U0Nsb2NrIGNhbmNlbCBvayA9PlNBZHZhbmNlZCBhZHZhbmNlZCA9PlNCYXNpYyBNMSBNMiBNMyBNNSBNMTAgTTkwIHMwIHMxIHMyIHMzIHM1IHMxMCBzMzAnLnNwbGl0ICcgJ1xyXG5cdFx0QGNyZWF0ZVRyYW5zIGFyci5qb2luICcgJ1xyXG5cclxuXHRtYWtlQnV0dG9ucyA6IC0+XHJcblxyXG5cdFx0eCA9IFszMCw3MF1cclxuXHRcdHkgPSBbMjgsMzYsNDQsNTIsNjAsNjgsNzYsOTNdXHJcblx0XHR3ID0gMTBcclxuXHRcdGggPSA3XHJcblxyXG5cdFx0QGJ1dHRvbnMub3JhbmdlICAgICA9IHN0YXRlcy5TQWR2YW5jZWQuYnV0dG9ucy5vcmFuZ2VcclxuXHRcdEBidXR0b25zLndoaXRlICAgICAgPSBzdGF0ZXMuU0FkdmFuY2VkLmJ1dHRvbnMud2hpdGVcclxuXHRcdEBidXR0b25zLmdyZWVuICAgICAgPSBzdGF0ZXMuU0FkdmFuY2VkLmJ1dHRvbnMuZ3JlZW5cclxuXHJcblx0XHRAYnV0dG9ucy5yZWZsZWN0aW9uID0gbmV3IEJEZWFkICB4WzBdLDIwLCdyZWZsZWN0aW9uJ1xyXG5cdFx0QGJ1dHRvbnMuYm9udXMgICAgICA9IG5ldyBCRGVhZCAgeFsxXSwyMCwnYm9udXMnXHJcblxyXG5cdFx0QGJ1dHRvbnMuTTEgICBcdFx0XHQ9IG5ldyBCdXR0b24geFswXSx5WzBdLCB3LGgsICcxbSdcclxuXHRcdEBidXR0b25zLk0yICAgXHRcdFx0PSBuZXcgQnV0dG9uIHhbMF0seVsxXSwgdyxoLCAnMm0nXHJcblx0XHRAYnV0dG9ucy5NMyAgIFx0XHRcdD0gbmV3IEJ1dHRvbiB4WzBdLHlbMl0sIHcsaCwgJzNtJ1xyXG5cdFx0QGJ1dHRvbnMuTTUgICBcdFx0XHQ9IG5ldyBCdXR0b24geFswXSx5WzNdLCB3LGgsICc1bSdcclxuXHRcdEBidXR0b25zLk0xMCAgIFx0XHRcdD0gbmV3IEJ1dHRvbiB4WzBdLHlbNF0sIHcsaCwgJzEwbSdcclxuXHRcdEBidXR0b25zLk05MCAgIFx0XHRcdD0gbmV3IEJ1dHRvbiB4WzBdLHlbNV0sIHcsaCwgJzkwbSdcclxuXHJcblx0XHRAYnV0dG9ucy5zMCAgIFx0XHRcdD0gbmV3IEJ1dHRvbiB4WzFdLHlbMF0sIHcsaCwgJzBzJ1xyXG5cdFx0QGJ1dHRvbnMuczEgICBcdFx0XHQ9IG5ldyBCdXR0b24geFsxXSx5WzFdLCB3LGgsICcxcydcclxuXHRcdEBidXR0b25zLnMyICAgXHRcdFx0PSBuZXcgQnV0dG9uIHhbMV0seVsyXSwgdyxoLCAnMnMnXHJcblx0XHRAYnV0dG9ucy5zMyAgIFx0XHRcdD0gbmV3IEJ1dHRvbiB4WzFdLHlbM10sIHcsaCwgJzNzJ1xyXG5cdFx0QGJ1dHRvbnMuczUgICBcdFx0XHQ9IG5ldyBCdXR0b24geFsxXSx5WzRdLCB3LGgsICc1cydcclxuXHRcdEBidXR0b25zLnMxMCAgIFx0XHRcdD0gbmV3IEJ1dHRvbiB4WzFdLHlbNV0sIHcsaCwgJzEwcydcclxuXHRcdEBidXR0b25zLnMzMCAgIFx0XHRcdD0gbmV3IEJ1dHRvbiB4WzFdLHlbNl0sIHcsaCwgJzMwcydcclxuXHJcblx0XHRAYnV0dG9ucy5hZHZhbmNlZCAgID0gbmV3IEJ1dHRvbiAxKjEwMC82LHlbN10sIDMwLDgsICdhZHZhbmNlZCdcclxuXHRcdEBidXR0b25zLmNhbmNlbCAgICAgPSBuZXcgQnV0dG9uIDMqMTAwLzYseVs3XSwgMzAsOCwgJ2NhbmNlbCdcclxuXHRcdEBidXR0b25zLm9rICAgICAgICAgPSBuZXcgQnV0dG9uIDUqMTAwLzYseVs3XSwgMzAsOCwgJ29rJ1xyXG5cclxuXHRtZXNzYWdlIDogKGtleSkgLT5cclxuXHJcblx0XHRpZiBrZXkgPT0gJ2FkdmFuY2VkJ1xyXG5cdFx0ZWxzZSBpZiBrZXkgPT0gJ2Jhc2ljJ1xyXG5cdFx0ZWxzZSBpZiBrZXkgPT0gJ2NhbmNlbCdcclxuXHRcdFx0c2V0dGluZ3MgPSBjbG9uZSBiYWNrdXAgIyDDhXRlcnN0w6RsbCBhbGx0IHNvbSBiZWjDtnZzXHJcblx0XHRcdHNldHRpbmdzLnN1bXMgPSBzdGF0ZXMuU0FkdmFuY2VkLmNhbGNTdW1zKClcclxuXHJcblx0XHRlbHNlIGlmIGtleSA9PSAnb2snXHJcblx0XHRcdHNldHRpbmdzLmNsb2NrcyAgPSBbc2V0dGluZ3MucGxheWVyc1swXVswXSwgc2V0dGluZ3MucGxheWVyc1sxXVswXV1cclxuXHRcdFx0c2V0dGluZ3MuYm9udXNlcyA9IFtzZXR0aW5ncy5wbGF5ZXJzWzBdWzFdLCBzZXR0aW5ncy5wbGF5ZXJzWzFdWzFdXVxyXG5cdFx0XHRzZXR0aW5ncy50aW1lb3V0ID0gZmFsc2UgXHJcblxyXG5cdFx0ZWxzZSAjIDYrNyBzaG9ydGN1dCBidXR0b25zXHJcblx0XHRcdHNldHRpbmdzLmJpdHMgPSBzZXR0aW5ncy5iaXRzLmZpbHRlciAodmFsdWUsIGluZGV4LCBhcnIpIC0+IHZhbHVlWzBdICE9IGtleVswXVxyXG5cdFx0XHRjb25zb2xlLmxvZyAnZmlsdGVyJyxzZXR0aW5ncy5iaXRzXHJcblx0XHRcdHN0YXRlcy5TQWR2YW5jZWQubWVzc2FnZSBrZXlcclxuXHRcdFx0c2V0dGluZ3Muc3VtcyA9IHN0YXRlcy5TQWR2YW5jZWQuY2FsY1N1bXMoKVxyXG5cdFx0XHRAYnV0dG9ucy5vay52aXNpYmxlID0gc2V0dGluZ3Muc3Vtcy5IICsgc2V0dGluZ3Muc3Vtcy5NICsgc2V0dGluZ3Muc3Vtcy5TID4gMCBhbmQgc2V0dGluZ3Muc3Vtcy50IDwgNjBcclxuXHJcblx0XHRzdXBlciBrZXlcclxuXHJcbmNsYXNzIFNBZHZhbmNlZCBleHRlbmRzIFN0YXRlXHJcblx0Y29uc3RydWN0b3IgOiAobmFtZSkgLT5cclxuXHRcdHN1cGVyIG5hbWVcclxuXHRcdGFyciA9ICc9PiBncmVlbiB3aGl0ZSBvcmFuZ2UgcmVmbGVjdGlvbiBib251cyBoY3AgSCBNIFMgbSBzIHQgPT5TQ2xvY2sgY2FuY2VsIG9rID0+U0Jhc2ljIGJhc2ljID0+U0FkdmFuY2VkJy5zcGxpdCAnICdcclxuXHRcdGZvciBpIGluIHJhbmdlIDZcclxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgNlxyXG5cdFx0XHRcdGFyci5wdXNoICdITVNtc3QnW2ldICsgWzEsMiw0LDgsMTUsMzBdW2pdXHJcblx0XHRAY3JlYXRlVHJhbnMgYXJyLmpvaW4gJyAnXHJcblx0XHRAdXBwZGF0ZXJhKClcclxuXHJcblx0bWFrZUJ1dHRvbnMgOiAtPlxyXG5cclxuXHRcdEBidXR0b25zLm9yYW5nZSAgICAgPSBuZXcgQkNvbG9yIDUwLCAzLCdvcmFuZ2UnXHJcblx0XHRAYnV0dG9ucy53aGl0ZSAgICAgID0gbmV3IEJDb2xvciA1MCwgOSwnd2hpdGUnXHJcblx0XHRAYnV0dG9ucy5ncmVlbiAgICAgID0gbmV3IEJDb2xvciA1MCwxNSwnZ3JlZW4nXHJcblxyXG5cdFx0QGJ1dHRvbnMucmVmbGVjdGlvbiA9IG5ldyBCRGVhZCAgMjUsMjEsJ3JlZmxlY3Rpb24nXHJcblx0XHRAYnV0dG9ucy5ib251cyAgICAgID0gbmV3IEJEZWFkICA2NiwyMSwnYm9udXMnXHJcblx0XHRAYnV0dG9ucy5oY3AgICAgICAgID0gbmV3IEJEZWFkICA5MiwyMSwnaGNwJ1xyXG5cclxuXHRcdEBidXR0b25zLmJhc2ljICAgICAgPSBuZXcgQnV0dG9uIDEqMTAwLzYsOTMsIDMwLDgsICdiYXNpYydcclxuXHRcdEBidXR0b25zLmNhbmNlbCAgICAgPSBuZXcgQnV0dG9uIDMqMTAwLzYsOTMsIDMwLDgsICdjYW5jZWwnXHJcblx0XHRAYnV0dG9ucy5vayAgICAgICAgID0gbmV3IEJ1dHRvbiA1KjEwMC82LDkzLCAzMCw4LCAnb2snXHJcblxyXG5cdFx0QG1ha2VFZGl0QnV0dG9ucygpXHJcblxyXG5cdG1ha2VFZGl0QnV0dG9ucyA6IC0+XHJcblx0XHRmb3IgaSBpbiByYW5nZSA2XHJcblx0XHRcdGxldHRlciA9ICdITVNtc3QnW2ldXHJcblx0XHRcdHhzaXplID0gMTAwLzZcclxuXHRcdFx0eXNpemUgPSAxMDAvMTBcclxuXHRcdFx0eG9mZiA9IHhzaXplLzJcclxuXHRcdFx0eW9mZiA9IDMzKzJcclxuXHRcdFx0QGJ1dHRvbnNbbGV0dGVyXSA9IG5ldyBCRGVhZCB4b2ZmK3hzaXplKmksIDI2KzIsICdITVNtc3QnW2ldXHJcblx0XHRcdGZvciBqIGluIHJhbmdlIDZcclxuXHRcdFx0XHRudW1iZXIgPSBbMSwyLDQsOCwxNSwzMF1bal1cclxuXHRcdFx0XHRuYW1lID0gbGV0dGVyICsgbnVtYmVyXHJcblx0XHRcdFx0QGJ1dHRvbnNbbmFtZV0gPSBuZXcgQkVkaXQgbmFtZSwgeG9mZit4c2l6ZSppLCB5b2ZmK3lzaXplKmosIHhzaXplLCB5c2l6ZSwgbnVtYmVyXHJcblxyXG5cdG1lc3NhZ2UgOiAoa2V5KSAtPlxyXG5cdFx0Y29uc29sZS5sb2cgJ2tleScsa2V5XHJcblx0XHQjaWYga2V5ID09IHVuZGVmaW5lZCB0aGVuIHJldHVyblxyXG5cdFx0aWYga2V5ID09ICdiYXNpYydcclxuXHRcdGVsc2UgaWYga2V5ID09ICdhZHZhbmNlZCdcclxuXHRcdGVsc2UgaWYga2V5ID09ICdjYW5jZWwnXHJcblx0XHRcdHNldHRpbmdzID0gY2xvbmUgYmFja3VwICMgw4V0ZXJzdMOkbGwgYWxsdCBzb20gYmVow7Z2c1xyXG5cdFx0XHRzZXR0aW5ncy5zdW1zID0gQGNhbGNTdW1zKClcclxuXHJcblx0XHRlbHNlIGlmIGtleSA9PSAnb2snXHJcblx0XHRcdHNldHRpbmdzLmNsb2NrcyAgPSBbc2V0dGluZ3MucGxheWVyc1swXVswXSwgc2V0dGluZ3MucGxheWVyc1sxXVswXV1cclxuXHRcdFx0c2V0dGluZ3MuYm9udXNlcyA9IFtzZXR0aW5ncy5wbGF5ZXJzWzBdWzFdLCBzZXR0aW5ncy5wbGF5ZXJzWzFdWzFdXVxyXG5cdFx0XHRzZXR0aW5ncy50aW1lb3V0ID0gZmFsc2UgXHJcblx0XHRlbHNlXHJcblx0XHRcdGhhc2ggPSB7J00zJzonTTEgTTInLCAnTTUnOidNMSBNNCcsICdNMTAnOidNMiBNOCcsICdNOTAnOidIMSBNMzAnLCAnczAnOiAnJywgJ3MzJzonczEgczInLCAnczUnOidzMSBzNCcsICdzMTAnOidzMiBzOCd9XHJcblx0XHRcdGlmIGtleSBvZiBoYXNoXHJcblx0XHRcdFx0Zm9yIG1zZyBpbiBoYXNoW2tleV0uc3BsaXQgJyAnXHJcblx0XHRcdFx0XHRpZiBtc2cgIT0gJycgdGhlbiBAbWVzc2FnZSBtc2dcclxuXHRcdFx0ZWxzZSAjIDYgeCA2IGVkaXQgYnV0dG9uc1xyXG5cdFx0XHRcdHNldHRpbmdzLmJpdHMgPSBAZmxpcCBzZXR0aW5ncy5iaXRzLCBrZXlcclxuXHRcdFx0XHRzZXR0aW5ncy5zdW1zID0gQGNhbGNTdW1zKClcclxuXHRcdFx0XHRAYnV0dG9ucy5vay52aXNpYmxlID0gc2V0dGluZ3Muc3Vtcy5IICsgc2V0dGluZ3Muc3Vtcy5NICsgc2V0dGluZ3Muc3Vtcy5TID4gMCBhbmQgc2V0dGluZ3Muc3Vtcy50IDwgNjBcclxuXHJcblx0XHRAdXBwZGF0ZXJhKClcclxuXHRcdHN1cGVyIGtleVxyXG5cdFx0XHJcblx0ZmxpcCA6IChhcnIsIGtleSkgLT5cclxuXHRcdGlmIGtleSBpbiBhcnIgXHJcblx0XHRcdF8ucmVtb3ZlIGFyciwgKG4pIC0+IG4gPT0ga2V5XHJcblx0XHRlbHNlIFxyXG5cdFx0XHRhcnIucHVzaCBrZXlcclxuXHRcdGFyclxyXG5cclxuXHRjYWxjU3VtcyA6IC0+XHJcblx0XHRyZXMgPSB7SDowLE06MCxTOjAsbTowLHM6MCx0OjB9XHJcblx0XHRmb3Iga2V5IGluIHNldHRpbmdzLmJpdHNcclxuXHRcdFx0bGV0dGVyID0ga2V5WzBdXHJcblx0XHRcdG51bWJlciA9IHBhcnNlSW50IGtleS5zbGljZSAxXHJcblx0XHRcdHJlc1tsZXR0ZXJdICs9IG51bWJlclxyXG5cdFx0cmVzXHJcblxyXG5cdHVwcGRhdGVyYSA6IC0+XHJcblxyXG5cdFx0c2V0dGluZ3Muc3VtcyA9IEBjYWxjU3VtcygpXHJcblx0XHRzZXR0aW5ncy5zaG93ID0gQGNvbXBhY3QoKVxyXG5cdFx0QGJ1dHRvbnMud2hpdGUudGV4dCA9IHNldHRpbmdzLnNob3dcclxuXHRcdFxyXG5cdFx0QGhhbmRpY2FwKClcclxuXHRcdGlmIHNldHRpbmdzLmhjcCA9PSAwXHJcblx0XHRcdEBidXR0b25zLm9yYW5nZS50ZXh0ID0gJydcclxuXHRcdFx0QGJ1dHRvbnMuZ3JlZW4udGV4dCAgPSAnJ1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRAYnV0dG9ucy5vcmFuZ2UudGV4dCA9IHByZXR0eVBhaXIgc2V0dGluZ3MucGxheWVyc1swXVswXSwgc2V0dGluZ3MucGxheWVyc1swXVsxXVxyXG5cdFx0XHRAYnV0dG9ucy5ncmVlbi50ZXh0ICA9IHByZXR0eVBhaXIgc2V0dGluZ3MucGxheWVyc1sxXVswXSwgc2V0dGluZ3MucGxheWVyc1sxXVsxXVxyXG5cclxuXHRjb21wYWN0IDogLT5cclxuXHRcdGtleXMgPSAnSE1TbXMnXHJcblx0XHRoZWFkZXJzID0gJ2htc21zJ1xyXG5cdFx0aGVhZGVyMCA9ICcnXHJcblx0XHRoZWFkZXIxID0gJydcclxuXHRcdGZvciBpIGluIFswLDEsMl1cclxuXHRcdFx0a2V5ID0ga2V5c1tpXVxyXG5cdFx0XHRpZiBzZXR0aW5ncy5zdW1zW2tleV0+MCB0aGVuIGhlYWRlcjAgKz0gc2V0dGluZ3Muc3Vtc1trZXldICsgaGVhZGVyc1tpXVxyXG5cdFx0Zm9yIGkgaW4gWzMsNF1cclxuXHRcdFx0a2V5ID0ga2V5c1tpXVxyXG5cdFx0XHRpZiBzZXR0aW5ncy5zdW1zW2tleV0+MCB0aGVuIGhlYWRlcjEgKz0gc2V0dGluZ3Muc3Vtc1trZXldICsgaGVhZGVyc1tpXVxyXG5cdFx0aGVhZGVyID0gaGVhZGVyMFxyXG5cdFx0aWYgaGVhZGVyMS5sZW5ndGggPiAwIHRoZW4gaGVhZGVyICs9ICcrJyArIGhlYWRlcjFcclxuXHRcdGlmIHNldHRpbmdzLnN1bXMudCA+IDAgdGhlbiBoZWFkZXIgKz0gJ1xcbicgKyBzZXR0aW5ncy5zdW1zLnRcclxuXHRcdGhlYWRlclxyXG5cclxuXHRoYW5kaWNhcCA6IC0+XHJcblx0XHRzZXR0aW5ncy5oY3AgPSBzZXR0aW5ncy5zdW1zLnQgLyAoSENQICogNjApICMgMC4wIC4uIDEuMFxyXG5cdFx0c2V0dGluZ3MucmVmbCA9IEhPVVIgKiBzZXR0aW5ncy5zdW1zLkggKyBNSU5VVEUgKiBzZXR0aW5ncy5zdW1zLk0gKyBzZXR0aW5ncy5zdW1zLlMgIyBzZWt1bmRlclxyXG5cdFx0c2V0dGluZ3MuYm9udXMgPSAgICAgICAgICAgICAgICAgICAgICAgICBNSU5VVEUgKiBzZXR0aW5ncy5zdW1zLm0gKyBzZXR0aW5ncy5zdW1zLnMgIyBzZWt1bmRlclxyXG5cdFx0c2V0dGluZ3MucGxheWVycyA9IFtdXHJcblx0XHRzZXR0aW5ncy5wbGF5ZXJzWzBdID0gW3NldHRpbmdzLnJlZmwgKyBzZXR0aW5ncy5yZWZsKnNldHRpbmdzLmhjcCwgc2V0dGluZ3MuYm9udXMgKyBzZXR0aW5ncy5ib251cypzZXR0aW5ncy5oY3BdXHJcblx0XHRzZXR0aW5ncy5wbGF5ZXJzWzFdID0gW3NldHRpbmdzLnJlZmwgLSBzZXR0aW5ncy5yZWZsKnNldHRpbmdzLmhjcCwgc2V0dGluZ3MuYm9udXMgLSBzZXR0aW5ncy5ib251cypzZXR0aW5ncy5oY3BdXHJcblxyXG4jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xyXG5cclxucHJlbG9hZCA9IC0+XHJcblx0cXIgPSBsb2FkSW1hZ2UgJ3FyLnBuZydcclxuXHRzb3VuZCA9IGxvYWRTb3VuZCAna2V5Lm1wMydcclxuXHJcbndpbmRvd1Jlc2l6ZWQgPSAtPlxyXG5cdHJlc2l6ZUNhbnZhcyBpbm5lcldpZHRoLCBpbm5lckhlaWdodFxyXG5cdGRpYWcgPSBzcXJ0IHdpZHRoKndpZHRoICsgaGVpZ2h0KmhlaWdodFxyXG5cclxuc2V0dXAgPSAtPlxyXG5cclxuXHRmcmFtZVJhdGUgRlJBTUVSQVRFXHJcblx0b3MgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvblxyXG5cdGlmIG9zLmluZGV4T2YoJ0xpbnV4JykgPj0gMCB0aGVuIG9zID0gJ0FuZHJvaWQnXHJcblx0aWYgb3MuaW5kZXhPZignV2luZG93cycpID49IDAgdGhlbiBvcyA9ICdXaW5kb3dzJ1xyXG5cdGlmIG9zLmluZGV4T2YoJ01hYycpID49IDAgdGhlbiBvcyA9ICdNYWMnXHJcblxyXG5cdCMgb3MgPSAnQW5kcm9pZCdcclxuXHJcblx0Y2FudmFzID0gY3JlYXRlQ2FudmFzIGlubmVyV2lkdGgsaW5uZXJIZWlnaHRcclxuXHRib2R5U2Nyb2xsTG9jay5kaXNhYmxlQm9keVNjcm9sbCBjYW52YXMgIyBGw7ZyaGluZHJhciBhdHQgbWFuIGthbiBzY3JvbGxhIGNhbnZhcyBww6UgaU9TXHJcblxyXG5cdGlmIG9zID09ICdBbmRyb2lkJyB0aGVuIHRleHRGb250ICdEcm9pZCBTYW5zJ1xyXG5cdGlmIG9zID09ICdNYWMnIHRoZW4gdGV4dEZvbnQgJ1ZlcmRhbmEnXHJcblx0aWYgb3MgPT0gJ1dpbmRvd3MnIHRoZW4gdGV4dEZvbnQgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnXHJcblxyXG5cdFRPR0dMRSA9IGlmIG9zID09ICdNYWMnIHRoZW4gMSBlbHNlIDBcclxuXHJcblx0ZGlhZyA9IHNxcnQgd2lkdGgqd2lkdGggKyBoZWlnaHQqaGVpZ2h0XHJcblxyXG5cdGJhY2tncm91bmQgJ2JsYWNrJ1xyXG5cdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0cmVjdE1vZGUgQ0VOVEVSXHJcblx0YW5nbGVNb2RlIERFR1JFRVNcclxuXHJcblx0c2V0dGluZ3MgPSBsb2FkU2V0dGluZ3MoKVxyXG5cclxuXHRjcmVhdGVTdGF0ZSAnU0Nsb2NrJywgU0Nsb2NrIFxyXG5cdGNyZWF0ZVN0YXRlICdTQWR2YW5jZWQnLFNBZHZhbmNlZFxyXG5cdGNyZWF0ZVN0YXRlICdTQmFzaWMnLFNCYXNpY1xyXG5cdFxyXG5cdCNkdW1wKClcclxuXHRjdXJyU3RhdGUgPSBzdGF0ZXMuU0Nsb2NrXHJcblxyXG5cdCNjaGVja0J1dHRvbnMoKVxyXG5cdCNjaGVja1N0YXRlcygpXHJcblxyXG5kdW1wID0gLT4gIyBsb2cgZXZlcnl0aGluZ1xyXG5cdGZvciBza2V5IG9mIHN0YXRlcyBcclxuXHRcdHN0YXRlID0gc3RhdGVzW3NrZXldXHJcblx0XHRjb25zb2xlLmxvZyAnJ1xyXG5cdFx0Y29uc29sZS5sb2cgJ1N0YXRlJyxzdGF0ZVxyXG5cdFx0Zm9yIHRrZXkgb2Ygc3RhdGUudHJhbnNpdGlvbnNcclxuXHRcdFx0dHJhbnNpdGlvbiA9IHN0YXRlLnRyYW5zaXRpb25zW3RrZXldXHJcblx0XHRcdGJ1dHRvbiA9IHN0YXRlLmJ1dHRvbnNbdGtleV1cclxuXHRcdFx0aWYgdHJhbnNpdGlvbiA9PSB1bmRlZmluZWQgdGhlbiB0cmFuc2l0aW9uID0gJ25vdGhpbmcnXHJcblx0XHRcdGNvbnNvbGUubG9nICcgJyx0a2V5LCc9PicsdHJhbnNpdGlvbixidXR0b25cclxuXHJcbm1vdXNlQ2xpY2tlZCA9IC0+IGN1cnJTdGF0ZS5tb3VzZUNsaWNrZWQoKVxyXG5cclxuZHJhdyA9IC0+XHJcblxyXG5cdGlmIFRPR0dMRSA9PSAwXHJcblx0XHRzY2FsZSB3aWR0aC8xMDAsaGVpZ2h0LzEwMCAjIHBvcnRyYWl0XHJcblx0ZWxzZVxyXG5cdFx0cm90YXRlIDkwXHJcblx0XHR0cmFuc2xhdGUgMCwtd2lkdGhcclxuXHRcdHNjYWxlIGhlaWdodC8xMDAsd2lkdGgvMTAwICMgTGFuZHNjYXBlXHJcblxyXG5cdHN0cm9rZVdlaWdodCAxMDAvaGVpZ2h0XHJcblx0cHVzaCgpXHJcblx0YmFja2dyb3VuZCAnYmxhY2snXHJcblx0c3RhdGVzLlNDbG9jay51cHBkYXRlcmEoKVxyXG5cdGN1cnJTdGF0ZS5kcmF3KClcclxuXHRwb3AoKVxyXG5cclxuXHRzYXZlU2V0dGluZ3MoKVxyXG5cclxuXHQjIGRlYnVnXHJcblx0YXNwZWN0ID0gKHcsaCx5KSAtPlxyXG5cdFx0aWYgdzxoIHRoZW4gW3csaF0gPSBbaCx3XVxyXG5cdFx0dGV4dCBcIiN7d30gI3sody9oKS50b0ZpeGVkKDMpfSAje2h9XCIsIDUwLHlcclxuXHJcblx0ZGVidWdGdW5jdGlvbigpXHJcblxyXG5kZWJ1Z0Z1bmN0aW9uID0gLT5cclxuXHRyYXRlcy5wdXNoIGZyYW1lUmF0ZSgpXHJcblx0aWYgcmF0ZXMubGVuZ3RoID4gMTAwIHRoZW4gb2xkZXN0ID0gcmF0ZXMuc2hpZnQoKSBlbHNlIG9sZGVzdCA9IHJhdGVzWzBdXHJcblx0c3VtUmF0ZSArPSBfLmxhc3QocmF0ZXMpIC0gb2xkZXN0XHJcblxyXG5cdCMgIyBvcyA9IG5hdmlnYXRvci5hcHBWZXJzaW9uXHJcblx0dGV4dFNpemUgMi41XHJcblx0dGV4dCBNYXRoLnJvdW5kKHN1bVJhdGUpLDk1LDVcclxuXHJcblx0IyB0ZXh0IGN1cnJTdGF0ZS5uYW1lLDUwLDNcclxuXHQjICMgZmlsbCAnZ3JlZW4nXHJcblx0IyB0ZXh0IHJvdW5kMyhzdGF0ZXMuU0Jhc2ljLmJvbnVzZXNbMF0pLDEwLDNcclxuXHQjIHRleHQgcm91bmQzKHN0YXRlcy5TQmFzaWMuY2xvY2tzWzBdKSwyNSwzXHJcblx0IyB0ZXh0IHJvdW5kMyhzdGF0ZXMuU0Jhc2ljLmNsb2Nrc1sxXSksNzUsM1xyXG5cdCMgdGV4dCByb3VuZDMoc3RhdGVzLlNCYXNpYy5ib251c2VzWzFdKSw5MCwzXHJcblxyXG5cdCMgdGV4dCBzdGF0ZXMuU0Nsb2NrLnBhdXNlZCwzMCwyLjVcclxuXHQjIHRleHQgc3RhdGVzLlNDbG9jay5wbGF5ZXIsNzAsMi41XHJcblxyXG5cdCMgY3VyclN0YXRlLmRyYXcoKVxyXG5cclxubG9hZFNldHRpbmdzID0gLT5cclxuXHRpZiBsb2NhbFN0b3JhZ2Uuc2V0dGluZ3NcclxuXHRcdHNldHRpbmdzID0gSlNPTi5wYXJzZSBsb2NhbFN0b3JhZ2Uuc2V0dGluZ3NcclxuXHRcdHNldHRpbmdzLnBhdXNlZCA9IHRydWVcclxuXHRlbHNlIFxyXG5cdFx0c2V0dGluZ3MgPSB7fVxyXG5cdFx0c2V0dGluZ3Muc2hvdyA9ICczbTJzJ1xyXG5cdFx0c2V0dGluZ3MuYml0cyA9IFsnTTEnLCdNMicsJ3MyJ11cclxuXHRcdHNldHRpbmdzLmNsb2NrcyA9IFsxODAsMTgwXVxyXG5cdFx0c2V0dGluZ3MuYm9udXNlcz0gWzIsMl1cclxuXHRcdHNldHRpbmdzLnN1bXMgPSBbSDowLE06MyxTOjAsbTowLFM6Mix0OjBdXHJcblx0XHRzZXR0aW5ncy5wbGF5ZXIgPSAtMSBcclxuXHRcdHNldHRpbmdzLnRpbWVvdXQgPSBmYWxzZVxyXG5cdFx0c2V0dGluZ3MucGF1c2VkID0gdHJ1ZVxyXG5cdFx0bG9jYWxTdG9yYWdlLnNldHRpbmdzID0gSlNPTi5zdHJpbmdpZnkgc2V0dGluZ3NcclxuXHRjb25zb2xlLmxvZyAnc2V0dGluZ3MnLCBzZXR0aW5nc1xyXG5cdHNldHRpbmdzXHJcblxyXG5zYXZlU2V0dGluZ3MgPSAtPlxyXG5cdGQgPSBuZXcgRGF0ZSgpXHJcblx0aWYgZCAtIGxhc3RTdG9yYWdlU2F2ZSA8IEhFQVJUQkVBVCB0aGVuIHJldHVybiAjIG1zXHJcblx0bGFzdFN0b3JhZ2VTYXZlID0gZFxyXG5cdGxvY2FsU3RvcmFnZS5zZXR0aW5ncyA9IEpTT04uc3RyaW5naWZ5IHNldHRpbmdzXHJcblx0Y29uc29sZS5sb2cgJ3NhdmVTZXR0aW5ncycsbG9jYWxTdG9yYWdlLnNldHRpbmdzXHJcblxyXG4jIGNoZWNrQnV0dG9ucyA9IC0+XHJcbiMgXHRjb25zb2xlLmxvZyAnY2hlY2tCdXR0b25zIHN0YXJ0ZWQnXHJcbiMgXHRmb3IgYmtleSBvZiBidXR0b25zXHJcbiMgXHRcdGJ1dHRvbiA9IGJ1dHRvbnNbYmtleV1cclxuIyBcdFx0Zm91bmQgPSBmYWxzZVxyXG4jIFx0XHRmb3Igc2tleSBvZiBzdGF0ZXNcclxuIyBcdFx0XHRzdGF0ZSA9IHN0YXRlc1tza2V5XVxyXG4jIFx0XHRcdGlmIGJrZXkgb2Ygc3RhdGUudHJhbnNpdGlvbnMgdGhlbiBmb3VuZCA9IHRydWVcclxuIyBcdFx0aWYgbm90IGZvdW5kIHRoZW4gY29uc29sZS5sb2cgJyAgQnV0dG9uJyxia2V5LCdub3QgdXNlZCBieSBhbnkgc3RhdGUnXHJcbiMgXHRjb25zb2xlLmxvZyAnY2hlY2tCdXR0b25zIGRvbmUhJ1xyXG5cclxuIyBjaGVja1N0YXRlcyA9IC0+XHJcbiMgXHRjb25zb2xlLmxvZyAnY2hlY2tTdGF0ZXMgc3RhcnRlZCdcclxuIyBcdGZvciBza2V5IG9mIHN0YXRlc1xyXG4jIFx0XHRzdGF0ZSA9IHN0YXRlc1tza2V5XVxyXG4jIFx0XHRmb3VuZCA9IGZhbHNlXHJcbiMgXHRcdGZvciB0a2V5IG9mIHN0YXRlLnRyYW5zaXRpb25zXHJcbiMgXHRcdFx0dHJhbnNpdGlvbiA9IHN0YXRlLnRyYW5zaXRpb25zW3RrZXldXHJcbiMgXHRcdFx0aWYgdHJhbnNpdGlvbiAhPSB1bmRlZmluZWQgYW5kIHRyYW5zaXRpb24gbm90IG9mIHN0YXRlcyB0aGVuIGNvbnNvbGUubG9nIHRyYW5zaXRpb24sJ25vdCBmb3VuZCdcclxuIyBcdFx0XHRpZiB0a2V5IG9mIGJ1dHRvbnMgdGhlbiBmb3VuZCA9IHRydWUgZWxzZSBpbmZvID0gdGtleVxyXG4jIFx0XHRpZiBub3QgZm91bmQgdGhlbiBjb25zb2xlLmxvZyAnICBTdGF0ZScsc2tleSwnVHJhbnNpdGlvbicsdGtleSwgJ25vdCBkZWZpbmVkJ1xyXG4jIFx0Y29uc29sZS5sb2cgJ2NoZWNrU3RhdGVzIGRvbmUhJ1xyXG5cclxuIyBhcnIgPSBbXVxyXG4jIGZvciBpIGluIHJhbmdlIDYwXHJcbiMgXHRhcnIucHVzaCBcIiN7aX0gI3tNYXRoLnJvdW5kKCg2MCtpKS8oNjAtaSkqMTAwMCkvMTAwMH1cIlxyXG4jIGNvbnNvbGUubG9nIGFyci5qb2luIFwiXFxuXCIiXX0=
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee