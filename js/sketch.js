// Generated by CoffeeScript 2.5.1
var BColor, BDead, BEdit, BImage, BRotate, Button, HCP, HOUR, MINUTE, SClock, SEditor, State, buttons, createState, currState, d2, diag, draw, hms, makeEditButtons, mouseClicked, preload, pretty, prettyPair, qr, setup, states, timeout, trunc3,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HCP = 20;

HOUR = 3600;

MINUTE = 60;

buttons = {};

states = {};

qr = null;

timeout = false;

currState = null;

diag = 0;

trunc3 = function(x) {
  return Math.trunc(x * 1000) / 1000;
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (trunc3(h) > 0) {
    header += trunc3(h) + 'h';
  }
  if (trunc3(m) > 0) {
    header += trunc3(m) + 'm';
  }
  if (trunc3(s) > 0) {
    header += trunc3(s) + 's';
  }
  return header;
};

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.log(d2(3), '03');

hms = function(x) {
  var h, m, orig, s;
  orig = x;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  if (orig < 10) {
    s = Math.trunc(s * 10) / 10;
  }
  return [h, m, s];
};

console.log(hms(180), [0, 3, 0]);

console.log(hms(180.5), [0, 3, 0.5]);

Button = class Button {
  constructor(text1, x1, y1, w1, h1, bg1 = 'white', fg1 = 'black') {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
  }

  draw(disabled) {
    if (this.visible) {
      fill(this.bg);
      rect(this.x, this.y, this.w, this.h);
      textSize(0.04 * diag);
      fill(this.fg);
      return text(this.text, this.x, this.y);
    }
  }

  inside() {
    var ref, ref1;
    return (-this.w / 2 <= (ref = mouseX - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = mouseY - this.y) && ref1 <= this.h / 2);
  }

};

BImage = class BImage extends Button {
  constructor(image1, x, y, w, h) {
    super('', x, y, w, h);
    this.image = image1;
  }

  draw() {
    if (this.image) {
      return image(this.image, (width - this.w) / 2, (height - this.h) / 2, this.w, this.h);
    }
  }

};

BRotate = class BRotate extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super('', x, y, w, h, bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = states.SEditor.clocks[this.player];
    [h, m, s] = hms(secs);
    if (h >= 1) {
      ss = h + ':' + d2(m);
    } else {
      ss = m + ':' + (secs < 10 ? s.toFixed(1) : d2(s));
    }
    fill(this.bg);
    rect(this.x, this.y, this.w, this.h);
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    textSize(0.18 * diag);
    fill(this.fg);
    text(ss, 0, 0.017 * height);
    textSize(0.05 * diag);
    if (states.SEditor.bonuses[this.player] > 0) {
      text('+' + trunc3(states.SEditor.bonuses[this.player]) + 's', 0, 0.15 * height);
    }
    if (states.SEditor.clocks[this.player] <= 0) {
      this.bg = 'red';
    }
    return pop();
  }

};

BEdit = class BEdit extends Button {
  constructor(text, x, y, w, h, fg = 'gray') {
    super(text, x, y, w, h, 'black', fg);
  }

  draw() {
    textSize(0.05 * diag);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

BDead = class BDead extends Button {
  constructor(text, x, y, fg = 'lightgray') {
    super(text, x, y, 0, 0, 'black', fg);
  }

  draw() {
    textSize(0.04 * diag);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

BColor = class BColor extends Button {
  constructor(fg1, x, y) {
    super('', x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(0.04 * diag);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

// struktur för transitionssträngen:
// =>target0 msg0 msg1 =>target1 msg2 msg3 => msg4
// @transitions[msg0] = target0
// @transitions[msg1] = target0
// @transitions[msg2] = target1
// @transitions[msg3] = target1
// @transitions[msg4] = undefined
State = class State {
  constructor() {
    this.transitions = {};
  }

  createTrans(t) {
    var arr, k, len, target, word;
    console.log(t);
    target = void 0;
    arr = t.split(' ');
    for (k = 0, len = arr.length; k < len; k++) {
      word = arr[k];
      if (word === '=>') {
        target = void 0;
      } else if (word.indexOf('=>') === 0) {
        target = word.slice(2);
      } else {
        this.transitions[word] = target;
      }
    }
    return console.log(this.transitions);
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    if (key in this.transitions) {
      currState = states[this.transitions[key]];
      console.log(currState, currState);
      return currState.patch();
    } else {
      return console.log('missing transition:', key);
    }
  }

  patch() {}

  draw() {}

};

// =>SClock qr continue pause left right =>SEditor new
SClock = class SClock extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('=>SClock qr continue pause left right =>SEditor new');
    this.paused = true;
    this.player = -1;
    buttons.pause.visible = false;
    buttons.continue.visible = false;
  }

  uppdatera() {
    var clock;
    //console.log 'uppdatera'
    if (this.paused) {
      return;
    }
    clock = states.SEditor.clocks[this.player];
    if (clock > 0) {
      clock -= 1 / 60;
    }
    if (clock <= 0) {
      clock = 0;
      timeout = true;
    }
    return states.SEditor.clocks[this.player] = clock;
  }

  message(key) {
    if (key === 'qr') {
      toggleFullScreen();
      resizeCanvas(windowWidth, windowHeight);
    }
    if (key === 'left') {
      if (timeout) {
        return;
      } else {
        if (this.player === 0) {
          states.SEditor.clocks[0] += states.SEditor.bonuses[0];
        }
        this.paused = false;
        this.player = 1;
        buttons.left.fg = 'black';
        buttons.right.fg = 'white';
      }
    }
    if (key === 'right') {
      if (timeout) {
        return;
      } else {
        if (this.player === 1) {
          states.SEditor.clocks[1] += states.SEditor.bonuses[1];
        }
        this.paused = false;
        this.player = 0;
        buttons.left.fg = 'white';
        buttons.right.fg = 'black';
      }
    }
    if (key === 'pause') {
      this.paused = true;
      if (this.player === 0) {
        buttons.left.fg = 'gray';
        buttons.right.fg = 'black';
      } else {
        buttons.left.fg = 'black';
        buttons.right.fg = 'gray';
      }
    }
    if (key === 'continue') {
      this.paused = false;
      if (this.player === 0) {
        buttons.left.fg = 'white';
        buttons.right.fg = 'black';
      } else {
        buttons.left.fg = 'black';
        buttons.right.fg = 'white';
      }
    }
    buttons.pause.visible = !this.paused;
    buttons.continue.visible = this.paused;
    buttons.new.visible = this.paused;
    return super.message(key);
  }

};

// =>SClock ok => red white green reflection bonus hcp a b c d e f =>SEditor swap a0 a1 a2 a3 a4 a5 b0 b1 b2 b3 b4 b5 c0 c1 c2 c3 c4 c5 d0 d1 d2 d3 d4 d5 e0 e1 e2 e3 e4 e5 f0 f1 f2 f3 f4 f5
SEditor = class SEditor extends State {
  constructor(name1) {
    var arr, i, j, k, l, len, len1, letter, ref, ref1;
    super();
    this.name = name1;
    this.sums = [0, 1 + 2, 0, 0, 2, 0];
    this.clocks = [
      3 * 60,
      3 * 60 // seconds
    ];
    this.bonuses = [
      2,
      2 // seconds
    ];
    buttons.b0.fg = 'yellow';
    buttons.b1.fg = 'yellow';
    buttons.e1.fg = 'yellow';
    buttons.white.text = '3m + 2s';
    this.hcpSwap = 1;
    arr = '=>SClock ok => red white green reflection bonus hcp a b c d e f =>SEditor swap'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'abcdef'[i];
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        arr.push(letter + j);
      }
    }
    this.createTrans(arr.join(' '));
    console.log(arr.join(' '));
  }

  message(key) {
    var col, factor, j, letter, number;
    if (key === 'swap') {
      this.hcpSwap = -this.hcpSwap;
    } else if (key === 'ok') {
      timeout = false;
      buttons.continue.visible = false;
      buttons.pause.visible = true;
      buttons.left.fg = 'white';
      buttons.left.bg = 'orange';
      buttons.right.fg = 'white';
      buttons.right.bg = 'green';
    } else {
      buttons[key].fg = buttons[key].fg === 'gray' ? 'yellow' : 'gray';
      letter = key[0];
      col = 'abcdef'.indexOf(letter);
      factor = col === 5 ? 20 : 1;
      j = key[1];
      number = factor * [1, 2, 4, 8, 15, 30][j];
      this.sums[col] = buttons[key].fg === 'gray' ? this.sums[col] - number : this.sums[col] + number;
      buttons.ok.visible = this.sums[0] + this.sums[1] + this.sums[2] > 0;
      buttons.swap.visible = this.sums[5] > 0;
    }
    this.uppdatera();
    return super.message(key);
  }

  uppdatera() {
    buttons.white.text = this.compact();
    this.handicap();
    if (this.hcp === 0) {
      buttons.red.text = '';
      return buttons.green.text = '';
    } else {
      buttons.red.text = prettyPair(this.players[0][0], this.players[0][1]);
      return buttons.green.text = prettyPair(this.players[1][0], this.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'h m s m s'.split(' ');
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (this.sums[i] > 0) {
        header0 += this.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (this.sums[i] > 0) {
        header1 += this.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += ' + ' + header1;
    }
    return header;
  }

  handicap() {
    this.hcp = this.hcpSwap * this.sums[5] / (HCP * 60); // 0.0 .. 1.0
    this.refl = HOUR * this.sums[0] + MINUTE * this.sums[1] + this.sums[2];
    this.bonus = MINUTE * this.sums[3] + this.sums[4];
    this.players = [];
    this.players[0] = [this.refl * (1 + this.hcp), this.bonus * (1 + this.hcp)];
    this.players[1] = [this.refl * (1 - this.hcp), this.bonus * (1 - this.hcp)];
    this.clocks = [this.players[0][0], this.players[1][0]];
    return this.bonuses = [this.players[0][1], this.players[1][1]];
  }

};

makeEditButtons = function() {
  var factor, i, j, k, len, letter, name, number, ref, results, shown, xoff, xsize, yoff, ysize;
  ref = range(6);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    letter = 'abcdef'[i];
    xsize = width / 6;
    ysize = height / 10;
    xoff = xsize / 2 + (width - 6 * xsize) / 2;
    yoff = 0.33 * height;
    shown = 'H M S m s elo'.split(' ');
    buttons[letter] = new BDead(shown[i], xoff + xsize * i, 0.26 * height);
    results.push((function() {
      var l, len1, ref1, results1;
      ref1 = range(6);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        number = [1, 2, 4, 8, 15, 30][j];
        name = letter + j;
        factor = i === 5 ? HCP : 1;
        results1.push(buttons[name] = new BEdit(factor * number, xoff + xsize * i, yoff + ysize * j, xsize, ysize, 'gray'));
      }
      return results1;
    })());
  }
  return results;
};

//##################################
preload = function() {
  return qr = loadImage('qr.png');
};

//windowResized = -> resizeCanvas windowWidth, windowHeight
setup = function() {
  var h, os, size, w;
  os = navigator.appVersion;
  console.log(os);
  if (os.indexOf('Linux') >= 0) { // android/linux
    createCanvas(screen.width, screen.height);
  } else {
    //createCanvas displaywidth,displayHeight
    createCanvas(window.innerWidth, window.innerHeight); // Windows or Mac
  }
  textFont('Lucida Sans Unicode');
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  w = width;
  h = height;
  // Main Page
  size = 0.12 * h; // qr
  buttons.left = new BRotate(0.5 * w, 0.22 * h, w, 0.44 * h, 180, 'orange', 'white', 0); // eg up
  buttons.right = new BRotate(0.5 * w, 0.78 * h, w, 0.44 * h, 0, 'green', 'white', 1); // eg down
  buttons.pause = new Button('pause', 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.continue = new Button('continue', 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.new = new Button('new', w - 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.qr = new BImage(qr, 0.5 * w, 0.5 * h, size, size);
  
  // Edit Page
  buttons.swap = new Button('swap', 0.33 * w, 0.93 * h, 0.22 * w, 0.08 * h);
  buttons.ok = new Button('ok', 0.67 * w, 0.93 * h, 0.22 * w, 0.08 * h);
  buttons.red = new BColor('red', w / 2, 0.03 * h);
  buttons.white = new BColor('white', w / 2, 0.09 * h);
  buttons.green = new BColor('green', w / 2, 0.15 * h);
  buttons.reflection = new BDead('reflection', 0.25 * w, 0.21 * h);
  buttons.bonus = new BDead('bonus', 0.66 * w, 0.21 * h);
  buttons.hcp = new BDead('hcp', 0.92 * w, 0.21 * h);
  makeEditButtons();
  createState('SClock', SClock);
  createState('SEditor', SEditor);
  return currState = states.SClock;
};

draw = function() {
  var key, target;
  background('black');
  states.SClock.uppdatera();
  for (key in currState.transitions) {
    target = currState.transitions[key];
    if (key in buttons) {
      buttons[key].draw(target === void 0);
    } else {
      console.log('missing button:', key);
    }
  }
  // debug

  // os = navigator.appVersion
  // textSize 0.025 * height
  // text width,0.5*width,0.05*height
  // text height,0.75*width,0.05*height

  // text currState.name,0.5*width,0.03*height
  // fill 'green'
  // text round3(states.SEditor.bonuses[0]),0.1*width,0.03*height
  // text round3(states.SEditor.clocks[0]),0.25*width,0.03*height
  // text round3(states.SEditor.clocks[1]),0.75*width,0.03*height
  // text round3(states.SEditor.bonuses[1]),0.9*width,0.03*height

  // text states.SClock.paused,0.3*width,0.025*height
  // text states.SClock.player,0.7*width,0.025*height
  return currState.draw();
};

mouseClicked = function() {
  var key, results;
  results = [];
  for (key in currState.transitions) {
    if (currState.transitions[key] === void 0) {
      continue;
    }
    if (buttons[key].visible && buttons[key].inside(mouseX, mouseY)) {
      console.log(key);
      currState.message(key);
      break;
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee