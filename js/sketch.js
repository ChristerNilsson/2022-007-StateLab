// Generated by CoffeeScript 2.5.1
  // TODO
  // Försämring av frameRate inträffar om man går från fullscreen till normal på Android
  // Ta bort S och m ?
var BColor, BDead, BEdit, BImage, BPause, BRotate, BSettings, BShow, Button, FRAMERATE, HCP, HEARTBEAT, HOUR, MINUTE, SAdvanced, SBasic, SClock, State, TOGGLE, backup, clone, createState, currState, d2, debugFunction, diag, draw, dump, getLocalCoords, hms, lastStorageSave, loadSettings, makeBits, mouseClicked, os, preload, pretty, prettyPair, qr, rates, saveSettings, settings, setup, sound, states, sumRate, trunc3, windowResized,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HCP = 1;

HOUR = 3600;

MINUTE = 60;

TOGGLE = 1; // 0=porträtt (Android) 1=landskap (Mac)

HEARTBEAT = 1000; // ms updates of localStorage

FRAMERATE = 30; // 10

settings = {};

backup = null;

states = {};

qr = null;

currState = null;

os = '';

sound = null;

lastStorageSave = new Date();

rates = [];

sumRate = 0;

diag = 0;

getLocalCoords = function() { // tar 3 microsekunder
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

trunc3 = function(x) {
  return Math.trunc(x * 1000) / 1000;
};

console.assert(trunc3(12.345678) === 12.345);

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (trunc3(h) > 0) {
    header += trunc3(h) + 'h';
  }
  if (trunc3(m) > 0) {
    header += trunc3(m) + 'm';
  }
  if (trunc3(s) > 0) {
    header += trunc3(s) + 's';
  }
  return header;
};

console.assert(pretty(3601) === '1h1s');

console.assert(pretty(123) === '2m3s');

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

console.assert(prettyPair(3601, 123) === '1h1s + 2m3s');

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.assert(d2(3) === '03');

hms = function(x) {
  var h, m, orig, s;
  orig = x;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  if (orig < 10) {
    s = Math.trunc(s * 10) / 10;
  }
  return [h, m, s];
};

chai.assert.deepEqual(hms(180), [0, 3, 0]);

chai.assert.deepEqual(hms(180.5), [0, 3, 0.5]);

clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

Button = class Button {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'white', fg1 = 'black') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.bg);
      rect(this.x, this.y, this.w, this.h);
      textSize(4);
      fill(this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

  inside(x, y) {
    var ref, ref1;
    return (-this.w / 2 <= (ref = x - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

BPause = class BPause extends Button {
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    if (!settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

BSettings = class BSettings extends Button { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    var k, len, ref, v;
    if (settings.paused) {
      push();
      translate(this.x, this.y);
      scale([height / width, width / height][TOGGLE], 1);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      for (k = 0, len = ref.length; k < len; k++) {
        v = ref[k];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        pop();
      }
      return pop();
    }
  }

};

BImage = class BImage extends Button {
  constructor(x, y, w, h, image1) {
    super(x, y, w, h);
    this.image = image1;
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

BRotate = class BRotate extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super(x, y, w, h, '', bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = settings.clocks[this.player];
    [h, m, s] = hms(secs);
    if (h >= 1) {
      ss = h + ':' + d2(m);
    } else {
      ss = m + ':' + (secs < 10 ? s.toFixed(1) : d2(s));
    }
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    if (settings.timeout && settings.player === this.player) {
      this.bg = 'red';
      this.fg = 'black';
    }
    fill(this.bg);
    rect(0, 0, this.w, this.h);
    fill(this.fg);
    textSize(18 + 9);
    text(ss, 0, -2);
    textSize(5 + 3);
    //text (if h==0 then 'm:ss' else 'h:mm'),0,17
    if (settings.bonuses[this.player] > 0) {
      text('+' + pretty(settings.bonuses[this.player]), 0, 17);
    }
    return pop();
  }

};

BEdit = class BEdit extends Button {
  constructor(x, y, w, h, text, fg = 'gray') {
    super(x, y, w, h, text, 'black', fg);
  }

  draw() {
    push();
    textSize(5);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

BDead = class BDead extends Button {
  constructor(x, y, text, fg = 'lightgray') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

BShow = class BShow extends BDead {
  constructor(x, y, fg = 'lightgray') {
    super(x, y, 0, 0, '', 'black', fg);
  }

  draw() {
    this.text = settings.show;
    return super.draw();
  }

};

BColor = class BColor extends Button {
  constructor(x, y, fg1) {
    super(x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor(name1) {
    this.name = name1;
    this.buttons = {};
    this.transitions = {};
    this.makeButtons();
  }

  createTrans(t) {
    var arr, k, len, results, target, word;
    target = void 0;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      word = arr[k];
      if (word === '=>') {
        results.push(target = void 0);
      } else if (word.indexOf('=>') === 0) {
        results.push(target = word.slice(2));
      } else {
        results.push(this.transitions[word] = target);
      }
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    return currState = states[this.transitions[key]];
  }

  draw() {
    var results, tkey;
    results = [];
    for (tkey in this.transitions) {
      if (tkey in this.buttons) {
        results.push(this.buttons[tkey].draw());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

  mouseClicked() {
    var button, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.transitions) {
      if (this.transitions[key] === void 0) {
        continue;
      }
      button = this.buttons[key];
      if (button.visible && button.inside(x, y)) {
        this.message(key);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

SClock = class SClock extends State {
  constructor(name) {
    super(name);
    this.createTrans('=>SClock left pause qr right =>SBasic edit => show');
    settings.paused = true;
    settings.player = -1;
  }

  makeButtons() {
    this.buttons.left = new BRotate(50, 22, 100, 44, 180, 'orange', 'white', 0); // eg up
    this.buttons.right = new BRotate(50, 78, 100, 44, 0, 'green', 'white', 1); // eg down
    this.buttons.show = new BShow(22, 50, 'black');
    this.buttons.qr = new BImage(50, 50, 33, 12, qr);
    this.buttons.pause = new BPause(67, 50, 17, 12, 'white', 'black');
    return this.buttons.edit = new BSettings(83, 50, 17, 12, 'white', 'black');
  }

  uppdatera() {
    var clock;
    if (settings.paused) {
      return;
    }
    clock = settings.clocks[settings.player];
    if (clock > 0) {
      clock -= 1 / frameRate();
    }
    if (clock <= 0) {
      clock = 0;
      settings.timeout = true;
      settings.paused = true;
    }
    return settings.clocks[settings.player] = clock;
  }

  message(key) {
    var ref, ref1;
    if (key === 'left') {
      if (settings.timeout) {
        return;
      } else {
        if ((ref = settings.player) === (-1) || ref === 0) {
          sound.play();
          settings.clocks[0] += settings.bonuses[0];
        }
        settings.paused = false;
        settings.player = 1;
        this.buttons.left.fg = 'black';
        this.buttons.right.fg = 'white';
      }
    } else if (key === 'right') {
      if (settings.timeout) {
        return;
      } else {
        if ((ref1 = settings.player) === (-1) || ref1 === 1) {
          sound.play();
          settings.clocks[1] += settings.bonuses[1];
        }
        settings.paused = false;
        settings.player = 0;
        this.buttons.left.fg = 'white';
        this.buttons.right.fg = 'black';
      }
    } else if (key === 'pause') {
      settings.paused = true;
      this.buttons.left.fg = settings.player === 0 ? 'white' : 'black';
      this.buttons.right.fg = settings.player === 0 ? 'black' : 'white';
    } else if (key === 'qr') {
      fullscreen(true);
      resizeCanvas(innerWidth, innerHeight);
    } else if (key === 'edit') {
      backup = clone(settings); // to be used by cancel
      console.log('backup skapad', backup);
    }
    saveSettings();
    return super.message(key);
  }

  draw() {
    background('white');
    return super.draw();
  }

};

SBasic = class SBasic extends State {
  constructor(name) {
    var arr;
    super(name);
    //settings.sums = [0,0,0,0,0,0]
    arr = '=> bonus green hcp orange reflection white =>SClock cancel ok =>SAdvanced advanced =>SBasic M1 M2 M3 M5 M10 M90 s1 s2 s3 s5 s10 s30'.split(' ');
    this.createTrans(arr.join(' '));
  }

  makeButtons() {
    var w, x, y;
    x = [30, 70];
    y = [30, 40, 50, 60, 70, 80, 93];
    w = 10;
    this.buttons.orange = states.SAdvanced.buttons.orange;
    this.buttons.white = states.SAdvanced.buttons.white;
    this.buttons.green = states.SAdvanced.buttons.green;
    this.buttons.reflection = new BDead(x[0], 20, 'reflection');
    this.buttons.bonus = new BDead(x[1], 20, 'bonus');
    this.buttons.M1 = new Button(x[0], y[0], w, 8, '1m');
    this.buttons.M2 = new Button(x[0], y[1], w, 8, '2m');
    this.buttons.M3 = new Button(x[0], y[2], w, 8, '3m');
    this.buttons.M5 = new Button(x[0], y[3], w, 8, '5m');
    this.buttons.M10 = new Button(x[0], y[4], w, 8, '10m');
    this.buttons.M90 = new Button(x[0], y[5], w, 8, '90m');
    this.buttons.s1 = new Button(x[1], y[0], w, 8, '1s');
    this.buttons.s2 = new Button(x[1], y[1], w, 8, '2s');
    this.buttons.s3 = new Button(x[1], y[2], w, 8, '3s');
    this.buttons.s5 = new Button(x[1], y[3], w, 8, '5s');
    this.buttons.s10 = new Button(x[1], y[4], w, 8, '10s');
    this.buttons.s30 = new Button(x[1], y[5], w, 8, '30s');
    this.buttons.advanced = new Button(1 * 100 / 6, y[6], 30, 8, 'advanced');
    this.buttons.cancel = new Button(3 * 100 / 6, y[6], 30, 8, 'cancel');
    return this.buttons.ok = new Button(5 * 100 / 6, y[6], 30, 8, 'ok');
  }

  message(key) {
    var buttons, i, k, l, len, len1, letter, name, ref, ref1;
    if (key === 'advanced') {

    } else if (key === 'cancel') {
      settings = clone(backup); // Återställ allt som behövs
      states.SAdvanced.clearMatrix(); // Nollställ 6x6-matrisen
      ref = settings.bits;
      // Tänd aktuella siffror
      for (k = 0, len = ref.length; k < len; k++) {
        name = ref[k];
        states.SAdvanced.buttons[name].fg = 'yellow';
      }
      settings.sums = states.SAdvanced.calcSums();
    } else if (key === 'ok') {
      settings.clocks = [settings.players[0][0], settings.players[1][0]];
      settings.bonuses = [settings.players[0][1], settings.players[1][1]];
      settings.timeout = false; // 6+6 shortcut buttons
    } else {
      letter = key[0];
      buttons = states.SAdvanced.buttons;
      ref1 = [1, 2, 4, 8, 15, 30];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        i = ref1[l];
        if (letter === 'M') {
          buttons['H' + i].fg = 'gray';
          buttons['M' + i].fg = 'gray';
          buttons['S' + i].fg = 'gray';
        } else if (letter === 's') {
          buttons['m' + i].fg = 'gray';
          buttons['s' + i].fg = 'gray';
        }
      }
      states.SAdvanced.message(key);
      settings.sums = states.SAdvanced.calcSums();
      this.buttons.ok.visible = settings.sums[0] + settings.sums[1] + settings.sums[2] > 0 && settings.sums[5] < 60;
    }
    return super.message(key);
  }

};

SAdvanced = class SAdvanced extends State {
  constructor(name) {
    var arr, i, j, k, l, len, len1, ref, ref1;
    super(name);
    //settings.sums = [0,0,0,0,0,0]
    arr = '=> green white orange reflection bonus hcp H M S m s t =>SClock cancel ok =>SBasic basic =>SAdvanced'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        arr.push('HMSmst'[i] + [1, 2, 4, 8, 15, 30][j]);
      }
    }
    this.createTrans(arr.join(' '));
  }

  makeButtons() {
    this.buttons.orange = new BColor(50, 3, 'orange');
    this.buttons.white = new BColor(50, 9, 'white');
    this.buttons.green = new BColor(50, 15, 'green');
    this.buttons.reflection = new BDead(25, 21, 'reflection');
    this.buttons.bonus = new BDead(66, 21, 'bonus');
    this.buttons.hcp = new BDead(92, 21, 'hcp');
    this.buttons.basic = new Button(1 * 100 / 6, 93, 30, 8, 'basic');
    this.buttons.cancel = new Button(3 * 100 / 6, 93, 30, 8, 'cancel');
    this.buttons.ok = new Button(5 * 100 / 6, 93, 30, 8, 'ok');
    return this.makeEditButtons();
  }

  makeEditButtons() {
    var i, j, k, len, letter, name, number, ref, results, xoff, xsize, yoff, ysize;
    ref = range(6);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      xsize = 100 / 6;
      ysize = 100 / 10;
      xoff = xsize / 2;
      yoff = 33 + 2;
      this.buttons[letter] = new BDead(xoff + xsize * i, 26 + 2, 'HMSmst'[i]);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(6);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30][j];
          name = letter + number;
          results1.push(this.buttons[name] = new BEdit(xoff + xsize * i, yoff + ysize * j, xsize, ysize, number, 'gray'));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  message(key) {
    var col, hash, k, l, len, len1, letter, msg, name, number, ref, ref1;
    if (key === 'basic') {

    } else if (key === 'cancel') {
      settings = clone(backup); // Återställ allt som behövs
      this.clearMatrix(); // Nollställ 6x6-matrisen
      ref = settings.bits;
      // Tänd aktuella siffror
      for (k = 0, len = ref.length; k < len; k++) {
        name = ref[k];
        this.buttons[name].fg = 'yellow';
      }
      settings.sums = this.calcSums();
    } else if (key === 'ok') {
      settings.clocks = [settings.players[0][0], settings.players[1][0]];
      settings.bonuses = [settings.players[0][1], settings.players[1][1]];
      settings.timeout = false;
    } else {
      hash = {
        'M3': 'M1 M2',
        'M5': 'M1 M4',
        'M10': 'M2 M8',
        'M90': 'H1 M30',
        's3': 's1 s2',
        's5': 's1 s4',
        's10': 's2 s8'
      };
      if (key in hash) {
        ref1 = hash[key].split(' ');
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          msg = ref1[l];
          this.message(msg); // 6 x 6 edit buttons
        }
      } else {
        letter = key[0];
        col = 'HMSmst'.indexOf(letter);
        number = parseInt(key.slice(1));
        this.buttons[key].fg = this.buttons[key].fg === 'gray' ? 'yellow' : 'gray';
        settings.sums = this.calcSums();
        this.buttons.ok.visible = settings.sums[0] + settings.sums[1] + settings.sums[2] > 0 && settings.sums[5] < 60;
      }
    }
    this.uppdatera();
    return super.message(key);
  }

  clearMatrix() {
    var i, j, k, len, letter, number, ref, results;
    ref = range(6);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(6);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30][j];
          results1.push(this.buttons[letter + number].fg = 'gray');
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  calcSums() {
    var i, j, k, l, len, len1, letter, name, number, ref, ref1, res;
    res = [0, 0, 0, 0, 0, 0];
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        number = [1, 2, 4, 8, 15, 30][j];
        name = letter + number;
        if (this.buttons[name].fg === 'yellow') {
          res[i] += number;
        }
      }
    }
    return res;
  }

  uppdatera() {
    settings.sums = this.calcSums();
    settings.show = this.compact();
    this.buttons.white.text = settings.show;
    this.handicap();
    if (settings.hcp === 0) {
      this.buttons.orange.text = '';
      return this.buttons.green.text = '';
    } else {
      this.buttons.orange.text = prettyPair(settings.players[0][0], settings.players[0][1]);
      return this.buttons.green.text = prettyPair(settings.players[1][0], settings.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'hmsms';
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (settings.sums[i] > 0) {
        header0 += settings.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (settings.sums[i] > 0) {
        header1 += settings.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += '+' + header1;
    }
    if (settings.sums[5] > 0) {
      header += '\n' + settings.sums[5];
    }
    return header;
  }

  handicap() {
    settings.hcp = settings.sums[5] / (HCP * 60); // 0.0 .. 1.0
    settings.refl = HOUR * settings.sums[0] + MINUTE * settings.sums[1] + settings.sums[2];
    settings.bonus = MINUTE * settings.sums[3] + settings.sums[4];
    settings.players = [];
    settings.players[0] = [settings.refl + settings.refl * settings.hcp, settings.bonus + settings.bonus * settings.hcp];
    return settings.players[1] = [settings.refl - settings.refl * settings.hcp, settings.bonus - settings.bonus * settings.hcp];
  }

};

//##################################
preload = function() {
  qr = loadImage('qr.png');
  return sound = loadSound('key.mp3');
};

windowResized = function() {
  resizeCanvas(innerWidth, innerHeight);
  return diag = sqrt(width * width + height * height);
};

setup = function() {
  var canvas, k, key, len, ref;
  frameRate(FRAMERATE);
  os = navigator.appVersion;
  if (os.indexOf('Linux') >= 0) {
    os = 'Android';
  }
  if (os.indexOf('Windows') >= 0) {
    os = 'Windows';
  }
  if (os.indexOf('Mac') >= 0) {
    os = 'Mac';
  }
  // os = 'Android'
  canvas = createCanvas(innerWidth, innerHeight);
  bodyScrollLock.disableBodyScroll(canvas); // Förhindrar att man kan scrolla canvas på iOS
  if (os === 'Android') {
    textFont('Droid Sans');
  }
  if (os === 'Mac') {
    textFont('Verdana');
  }
  if (os === 'Windows') {
    textFont('Lucida Sans Unicode');
  }
  TOGGLE = os === 'Mac' ? 1 : 0;
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  createState('SClock', SClock);
  createState('SAdvanced', SAdvanced);
  createState('SBasic', SBasic);
  settings = loadSettings();
  states.SAdvanced.uppdatera();
  ref = settings.bits;
  for (k = 0, len = ref.length; k < len; k++) {
    key = ref[k];
    states.SAdvanced.message(key);
  }
  states.SAdvanced.uppdatera();
  
  //dump()
  return currState = states.SClock;
};

//checkButtons()
//checkStates()
makeBits = function() {
  var bits, button, key;
  bits = [];
  for (key in states.SAdvanced.buttons) {
    if (key !== 'ok' && key !== 'cancel') {
      button = states.SAdvanced.buttons[key];
      if (button.fg === 'yellow') {
        bits.push(key);
      }
    }
  }
  return bits;
};

dump = function() { // log everything
  var button, results, skey, state, tkey, transition;
  results = [];
  for (skey in states) {
    state = states[skey];
    console.log('');
    console.log('State', state);
    results.push((function() {
      var results1;
      results1 = [];
      for (tkey in state.transitions) {
        transition = state.transitions[tkey];
        button = state.buttons[tkey];
        if (transition === void 0) {
          transition = 'nothing';
        }
        results1.push(console.log(' ', tkey, '=>', transition, button));
      }
      return results1;
    })());
  }
  return results;
};

mouseClicked = function() {
  return currState.mouseClicked();
};

draw = function() {
  var aspect;
  if (TOGGLE === 0) {
    scale(width / 100, height / 100); // portrait
  } else {
    rotate(90);
    translate(0, -width);
    scale(height / 100, width / 100); // Landscape
  }
  strokeWeight(100 / height);
  push();
  background('black');
  states.SClock.uppdatera();
  currState.draw();
  pop();
  saveSettings();
  // debug
  aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return text(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
  return debugFunction();
};

debugFunction = function() {
  var oldest;
  rates.push(frameRate());
  if (rates.length > 100) {
    oldest = rates.shift();
  } else {
    oldest = rates[0];
  }
  sumRate += _.last(rates) - oldest;
  // # os = navigator.appVersion
  textSize(2.5);
  //text 'Click QR => Fullscreen',50,12
  return text(Math.round(sumRate), 95, 5);
};

// text currState.name,50,3
// # fill 'green'
// text round3(states.SBasic.bonuses[0]),10,3
// text round3(states.SBasic.clocks[0]),25,3
// text round3(states.SBasic.clocks[1]),75,3
// text round3(states.SBasic.bonuses[1]),90,3

// text states.SClock.paused,30,2.5
// text states.SClock.player,70,2.5

// currState.draw()
loadSettings = function() {
  if (localStorage.settings) {
    settings = JSON.parse(localStorage.settings);
    settings.paused = true;
    console.log('fetching stored settings', settings);
  } else {
    settings = {};
    settings.show = '3m2s';
    settings.bits = ['M1', 'M2', 's2'];
    settings.clocks = [180, 180];
    settings.bonuses = [2, 2];
    settings.sums = [0, 3, 0, 0, 2, 0];
    settings.player = -1;
    settings.timeout = false;
    settings.paused = true;
    console.log('fetching default settings', settings);
    localStorage.settings = JSON.stringify(settings);
  }
  return settings;
};

saveSettings = function() {
  var d;
  d = new Date();
  if (d - lastStorageSave < HEARTBEAT) { // ms
    return;
  }
  lastStorageSave = d;
  settings.bits = makeBits();
  return localStorage.settings = JSON.stringify(settings);
};

// checkButtons = ->
// 	console.log 'checkButtons started'
// 	for bkey of buttons
// 		button = buttons[bkey]
// 		found = false
// 		for skey of states
// 			state = states[skey]
// 			if bkey of state.transitions then found = true
// 		if not found then console.log '  Button',bkey,'not used by any state'
// 	console.log 'checkButtons done!'

// checkStates = ->
// 	console.log 'checkStates started'
// 	for skey of states
// 		state = states[skey]
// 		found = false
// 		for tkey of state.transitions
// 			transition = state.transitions[tkey]
// 			if transition != undefined and transition not of states then console.log transition,'not found'
// 			if tkey of buttons then found = true else info = tkey
// 		if not found then console.log '  State',skey,'Transition',tkey, 'not defined'
// 	console.log 'checkStates done!'

// arr = []
// for i in range 60
// 	arr.push "#{i} #{Math.round((60+i)/(60-i)*1000)/1000}"
// console.log arr.join "\n"

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee