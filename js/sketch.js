// Generated by CoffeeScript 2.5.1
var BColor, BDead, BEdit, BImage, BPause, BRotate, BSettings, Button, FRAMERATE, HCP, HEARTBEAT, HOUR, MINUTE, SClock, SEditor, SWelcome, State, TOGGLE, createState, currState, d2, diag, draw, dump, getLocalCoords, getSettings, hms, lastStorageSave, makeBits, mouseClicked, os, preload, pretty, prettyPair, qr, settings, setup, sound, states, trunc3, updateLocalStorage, windowResized,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HCP = 1;

HOUR = 3600;

MINUTE = 60;

TOGGLE = 1; // 0=porträtt (Android) 1=landskap (Mac)

HEARTBEAT = 1000; // ms updates of localStorage

FRAMERATE = 10;

settings = {};

states = {};

qr = null;

currState = null;

os = '';

sound = null;

lastStorageSave = new Date();

diag = 0;

getLocalCoords = function() { // tar 3 microsekunder
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

trunc3 = function(x) {
  return Math.trunc(x * 1000) / 1000;
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (trunc3(h) > 0) {
    header += trunc3(h) + 'h';
  }
  if (trunc3(m) > 0) {
    header += trunc3(m) + 'm';
  }
  if (trunc3(s) > 0) {
    header += trunc3(s) + 's';
  }
  return header;
};

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

//console.log d2(3), '03'
hms = function(x) {
  var h, m, orig, s;
  orig = x;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  if (orig < 10) {
    s = Math.trunc(s * 10) / 10;
  }
  return [h, m, s];
};


  //console.log hms(180), [0,3,0]
//console.log hms(180.5), [0,3,0.5]
Button = class Button {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'white', fg1 = 'black') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
  }

  draw() {
    if (this.visible) {
      fill(this.bg);
      rect(this.x, this.y, this.w, this.h);
      textSize(4);
      fill(this.fg);
      return text(this.text, this.x, this.y);
    }
  }

  inside(x, y) {
    var ref, ref1;
    return (-this.w / 2 <= (ref = x - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

BPause = class BPause extends Button {
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    if (!settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

BSettings = class BSettings extends Button { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'white', fg1 = 'black') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    var k, len, ref, results, v;
    if (settings.paused) {
      translate(this.x, this.y);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        v = ref[k];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        results.push(pop());
      }
      return results;
    }
  }

};

BImage = class BImage extends Button {
  constructor(x, y, w, h, image1) {
    super(x, y, w, h);
    this.image = image1;
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

BRotate = class BRotate extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super(x, y, w, h, '', bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = settings.clocks[this.player];
    [h, m, s] = hms(secs);
    if (h >= 1) {
      ss = h + 'h' + d2(m);
    } else {
      ss = m + ':' + (secs < 10 ? s.toFixed(1) : d2(s));
    }
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    fill(this.bg);
    rect(0, 0, this.w, this.h);
    fill(this.fg);
    textSize(18 + 9);
    text(ss, 0, -2);
    textSize(5 + 3);
    //text (if h==0 then 'm:ss' else 'h:mm'),0,17
    if (settings.bonuses[this.player] > 0) {
      text('+' + trunc3(settings.bonuses[this.player]) + 's', 0, 17);
    }
    if (settings.clocks[this.player] <= 0) {
      this.bg = 'red';
    }
    return pop();
  }

};

BEdit = class BEdit extends Button {
  constructor(x, y, w, h, text, fg = 'gray') {
    super(x, y, w, h, text, 'black', fg);
  }

  draw() {
    textSize(5);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

BDead = class BDead extends Button {
  constructor(x, y, text, fg = 'lightgray') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    textSize(4);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

BColor = class BColor extends Button {
  constructor(x, y, fg1) {
    super(x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

// struktur för transitionssträngen:
// =>target0 msg0 msg1 =>target1 msg2 msg3 => msg4
// @transitions[msg0] = target0
// @transitions[msg1] = target0
// @transitions[msg2] = target1
// @transitions[msg3] = target1
// @transitions[msg4] = undefined
State = class State {
  constructor(name1) {
    this.name = name1;
    this.buttons = {};
    this.transitions = {};
    this.makeButtons();
  }

  createTrans(t) {
    var arr, k, len, results, target, word;
    target = void 0;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      word = arr[k];
      if (word === '=>') {
        results.push(target = void 0);
      } else if (word.indexOf('=>') === 0) {
        results.push(target = word.slice(2));
      } else {
        results.push(this.transitions[word] = target);
      }
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    return currState = states[this.transitions[key]];
  }

  draw() {
    var results, tkey;
    results = [];
    for (tkey in this.transitions) {
      if (tkey in this.buttons) {
        results.push(this.buttons[tkey].draw());
      } else {
        results.push(console.log('missing', tkey));
      }
    }
    return results;
  }

  mouseClicked() {
    var button, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.transitions) {
      if (this.transitions[key] === void 0) {
        continue;
      }
      button = this.buttons[key];
      if (button.visible && button.inside(x, y)) {
        this.message(key);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

SWelcome = class SWelcome extends State {
  constructor(name) {
    super(name);
    this.createTrans('=>SClock welcome');
    console.log(this);
  }

  message(key) {
    if (key === 'welcome') {
      fullscreen(true);
      resizeCanvas(innerWidth, innerHeight);
    }
    return super.message(key);
  }

  makeButtons() {
    return this.buttons.welcome = new Button('Click me!', 50, 50, 100, 100);
  }

};

// =>SClock pause left right =>SEditor edit
SClock = class SClock extends State {
  constructor(name) {
    super(name);
    this.createTrans('=>SClock left pause qr right =>SEditor edit');
    settings.paused = true;
    settings.player = -1;
  }

  makeButtons() {
    this.buttons.left = new BRotate(50, 22, 100, 44, 180, 'orange', 'white', 0); // eg up
    this.buttons.right = new BRotate(50, 78, 100, 44, 0, 'green', 'white', 1); // eg down
    this.buttons.pause = new BPause(25, 50, 34, 12, 'white', 'black');
    this.buttons.qr = new BImage(50, 50, 33, 12, qr);
    return this.buttons.edit = new BSettings(75, 50, 34, 12, 'white', 'black');
  }

  uppdatera() {
    var clock;
    if (settings.paused) {
      return;
    }
    clock = settings.clocks[settings.player];
    if (clock > 0) {
      clock -= 1 / FRAMERATE;
    }
    if (clock <= 0) {
      clock = 0;
      settings.timeout = true;
    }
    return settings.clocks[settings.player] = clock;
  }

  message(key) {
    var ref, ref1;
    if (key === 'left') {
      if (settings.timeout) {
        return;
      } else {
        if ((ref = settings.player) === (-1) || ref === 0) {
          sound.play();
          settings.clocks[0] += settings.bonuses[0];
        }
        settings.paused = false;
        settings.player = 1;
        this.buttons.left.fg = 'black';
        this.buttons.right.fg = 'white';
      }
    }
    if (key === 'right') {
      if (settings.timeout) {
        return;
      } else {
        if ((ref1 = settings.player) === (-1) || ref1 === 1) {
          sound.play();
          settings.clocks[1] += settings.bonuses[1];
        }
        settings.paused = false;
        settings.player = 0;
        this.buttons.left.fg = 'white';
        this.buttons.right.fg = 'black';
      }
    }
    if (key === 'pause') {
      settings.paused = true;
      if (settings.player === 0) {
        this.buttons.left.fg = 'gray';
        this.buttons.right.fg = 'black';
      } else {
        this.buttons.left.fg = 'black';
        this.buttons.right.fg = 'gray';
      }
    }
    updateLocalStorage();
    return super.message(key);
  }

  draw() {
    background('white');
    return super.draw();
  }

};

// =>SClock ok => orange white green reflection bonus hcp a b c d e f =>SEditor swap a0 a1 a2 a3 a4 a5 b0 b1 b2 b3 b4 b5 c0 c1 c2 c3 c4 c5 d0 d1 d2 d3 d4 d5 e0 e1 e2 e3 e4 e5 f0 f1 f2 f3 f4 f5
SEditor = class SEditor extends State {
  constructor(name) {
    var arr, i, j, k, l, len, len1, ref, ref1;
    super(name);
    settings.sums = [0, 0, 0, 0, 0, 0];
    arr = '=> H M S m s t bonus green hcp orange reflection white =>SClock cancel ok =>SEditor swap'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        arr.push('HMSmst'[i] + [1, 2, 4, 8, 15, 30][j]);
      }
    }
    this.createTrans(arr.join(' '));
  }

  makeButtons() {
    var i, j, k, len, letter, name, number, ref, results, xoff, xsize, yoff, ysize;
    this.buttons.swap = new Button(25, 93, 22, 8, 'swap');
    this.buttons.cancel = new Button(50, 93, 22, 8, 'cancel');
    this.buttons.ok = new Button(75, 93, 22, 8, 'ok');
    this.buttons.orange = new BColor(50, 3, 'orange');
    this.buttons.white = new BColor(50, 9, 'white');
    this.buttons.green = new BColor(50, 15, 'green');
    this.buttons.reflection = new BDead(25, 21, 'reflection');
    this.buttons.bonus = new BDead(66, 21, 'bonus');
    this.buttons.hcp = new BDead(92, 21, 'hcp');
    ref = range(6);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      xsize = 100 / 6;
      ysize = 100 / 10;
      xoff = xsize / 2;
      yoff = 33 + 2;
      this.buttons[letter] = new BDead(xoff + xsize * i, 26 + 2, 'HMSmst'[i]);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(6);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30][j];
          name = letter + number;
          results1.push(this.buttons[name] = new BEdit(xoff + xsize * i, yoff + ysize * j, xsize, ysize, number, 'gray'));
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  message(key) {
    var col, letter, number;
    if (key === 'swap') {
      settings.swap = -settings.swap;
    } else if (key === 'cancel') {

    } else if (key === 'ok') {
      settings.paused = true;
      settings.timeout = false;
      states.SClock.buttons.left.fg = 'white';
      states.SClock.buttons.left.bg = 'orange';
      states.SClock.buttons.right.fg = 'white';
      states.SClock.buttons.right.bg = 'green';
      settings.clocks = [this.players[0][0], this.players[1][0]];
      settings.bonuses = [this.players[0][1], this.players[1][1]];
      updateLocalStorage();
    } else {
      letter = key[0];
      col = 'HMSmst'.indexOf(letter);
      number = parseInt(key.slice(1));
      this.buttons[key].fg = this.buttons[key].fg === 'gray' ? 'yellow' : 'gray';
      settings.sums[col] += this.buttons[key].fg === 'gray' ? -number : number;
      this.buttons.ok.visible = settings.sums[0] + settings.sums[1] + settings.sums[2] > 0;
      this.buttons.swap.visible = settings.sums[5] > 0;
    }
    this.uppdatera();
    return super.message(key);
  }

  uppdatera() {
    var i, j, k, l, len, len1, letter, name, number, ref, ref1;
    settings.sums = [0, 0, 0, 0, 0, 0];
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'HMSmst'[i];
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        number = [1, 2, 4, 8, 15, 30][j];
        name = letter + number;
        if (this.buttons[name].fg === 'yellow') {
          settings.sums[i] += number;
        }
      }
    }
    this.buttons.white.text = this.compact();
    this.handicap();
    if (this.hcp === 0) {
      this.buttons.orange.text = '';
      return this.buttons.green.text = '';
    } else {
      this.buttons.orange.text = prettyPair(this.players[0][0], this.players[0][1]);
      return this.buttons.green.text = prettyPair(this.players[1][0], this.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'hmsms';
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (settings.sums[i] > 0) {
        header0 += settings.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (settings.sums[i] > 0) {
        header1 += settings.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += ' + ' + header1;
    }
    return header;
  }

  handicap() {
    this.hcp = settings.swap * settings.sums[5] / (HCP * 60); // 0.0 .. 1.0
    this.refl = HOUR * settings.sums[0] + MINUTE * settings.sums[1] + settings.sums[2];
    this.bonus = MINUTE * settings.sums[3] + settings.sums[4];
    this.players = [];
    this.players[0] = [this.refl + this.refl * this.hcp, this.bonus + this.bonus * this.hcp];
    return this.players[1] = [this.refl - this.refl * this.hcp, this.bonus - this.bonus * this.hcp];
  }

};

//##################################
preload = function() {
  qr = loadImage('qr.png');
  return sound = loadSound('key.mp3');
};

windowResized = function() {
  resizeCanvas(innerWidth, innerHeight);
  return diag = sqrt(width * width + height * height);
};

// checkButtons = ->
// 	console.log 'checkButtons started'
// 	for bkey of buttons
// 		button = buttons[bkey]
// 		found = false
// 		for skey of states
// 			state = states[skey]
// 			if bkey of state.transitions then found = true
// 		if not found then console.log '  Button',bkey,'not used by any state'
// 	console.log 'checkButtons done!'

// checkStates = ->
// 	console.log 'checkStates started'
// 	for skey of states
// 		state = states[skey]
// 		found = false
// 		for tkey of state.transitions
// 			transition = state.transitions[tkey]
// 			if transition != undefined and transition not of states then console.log transition,'not found'
// 			if tkey of buttons then found = true else info = tkey
// 		if not found then console.log '  State',skey,'Transition',tkey, 'not defined'
// 	console.log 'checkStates done!'
setup = function() {
  var k, key, len, ref;
  frameRate(FRAMERATE);
  os = navigator.appVersion;
  if (os.indexOf('Linux') >= 0) {
    os = 'Android';
  }
  if (os.indexOf('Windows') >= 0) {
    os = 'Windows';
  }
  if (os.indexOf('Mac') >= 0) {
    os = 'Mac';
  }
  createCanvas(innerWidth, innerHeight);
  if (os === 'Android') {
    textFont('Droid Sans');
  }
  if (os === 'Mac') {
    textFont('Verdana');
  }
  if (os === 'Windows') {
    textFont('Lucida Sans Unicode');
  }
  TOGGLE = os === 'Mac' ? 1 : 0;
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  createState('SWelcome', SWelcome);
  createState('SClock', SClock);
  createState('SEditor', SEditor);
  settings = getSettings();
  states.SEditor.uppdatera();
  ref = settings.bits;
  for (k = 0, len = ref.length; k < len; k++) {
    key = ref[k];
    states.SEditor.message(key);
  }
  //states.SEditor.message 'ok'
  states.SEditor.uppdatera();
  
  //dump()
  return currState = os === 'Android' ? states.SWelcome : states.SClock;
};

//checkButtons()
//checkStates()
dump = function() {
  var button, results, skey, state, tkey, transition;
// log everything
  results = [];
  for (skey in states) {
    state = states[skey];
    console.log('');
    console.log('State', state);
    results.push((function() {
      var results1;
      results1 = [];
      for (tkey in state.transitions) {
        transition = state.transitions[tkey];
        button = state.buttons[tkey];
        if (transition === void 0) {
          transition = 'nothing';
        }
        results1.push(console.log(' ', tkey, '=>', transition, button));
      }
      return results1;
    })());
  }
  return results;
};

mouseClicked = function() {
  return currState.mouseClicked();
};

draw = function() {
  var aspect;
  if (TOGGLE === 0) {
    scale(width / 100, height / 100); // portrait
  } else {
    rotate(90);
    translate(0, -width);
    scale(height / 100, width / 100); // Landscape
  }
  strokeWeight(1 / (height / 100));
  push();
  background('black');
  states.SClock.uppdatera();
  currState.draw();
  pop();
  // debug
  aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return ptext(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
  return updateLocalStorage();
};

// rates.push frameRate()
// if rates.length > 100 then oldest = rates.shift() else oldest = rates[0]
// sumRate += _.last(rates) - oldest

// # os = navigator.appVersion
// textSize 2.5
// text 'A',5,5
// text Math.round(sumRate),95,5

// text currState.name,50,3
// # fill 'green'
// text round3(states.SEditor.bonuses[0]),10,3
// text round3(states.SEditor.clocks[0]),25,3
// text round3(states.SEditor.clocks[1]),75,3
// text round3(states.SEditor.bonuses[1]),90,3

// text states.SClock.paused,30,2.5
// text states.SClock.player,70,2.5

// currState.draw()
makeBits = function() {
  var bits, button, key;
  bits = [];
  for (key in states.SEditor.buttons) {
    if (key !== 'ok' && key !== 'cancel' && key !== 'swap') {
      button = states.SEditor.buttons[key];
      if (button.fg === 'yellow') {
        bits.push(key);
      }
    }
  }
  return bits;
};

updateLocalStorage = function() {
  var d;
  d = new Date();
  if (d - lastStorageSave < HEARTBEAT) { // ms
    return;
  }
  lastStorageSave = d;
  settings.bits = makeBits();
  return localStorage.settings = JSON.stringify(settings);
};

getSettings = function() {
  if (localStorage.settings) {
    settings = JSON.parse(localStorage.settings);
    settings.paused = true;
    console.log('fetching stored settings', settings);
  } else {
    settings = {};
    settings.bits = ['M1', 'M2', 's2'];
    settings.clocks = [180, 180];
    settings.bonuses = [2, 2];
    settings.sums = [0, 3, 0, 0, 2, 0];
    settings.swap = 1;
    settings.player = -1;
    settings.timeout = false;
    settings.paused = true;
    console.log('fetching default settings', settings);
    localStorage.setItem('settings', JSON.stringify(settings));
  }
  return settings;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee