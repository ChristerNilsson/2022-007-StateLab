// Generated by CoffeeScript 2.5.1
  // TODO
  // Försämring av frameRate inträffar om man går från fullscreen till normal på Android

// Istället för sekunder är nu normalformen tertier, 60-dels sekunder
var C960, CAdv, CCogwheel, CColor, CDead, CImage, CNumber, CPause, CRotate, CRounded, CSettings, CShow, Control, FRAMERATE, HEARTBEAT, HOUR, MINUTE, S960, SAdv, SBasic, SClock, SEC, State, TOGGLE, backup, chess, clone, createState, currState, d2, debugFunction, diag, draw, dump, getLocalCoords, handlePlayer, lastStorageSave, mousePressed, mst, os, preload, pretty, prettyPair, qr, rates, settings, setup, sound, states, sumRate, touchStarted, uppdatera, windowResized,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  indexOf = [].indexOf,
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

HOUR = 60 * 60 * 60; // tertier

MINUTE = 60 * 60; // tertier

SEC = 60; // tertier

TOGGLE = 1; // 0=porträtt (Android) 1=landskap (Mac)

HEARTBEAT = 1000; // ms updates of localStorage

FRAMERATE = 60; // 10

settings = {};

backup = null;

states = {};

qr = null;

chess = {};

currState = null;

os = '';

sound = null;

lastStorageSave = new Date();

rates = [];

sumRate = 0;

diag = 0;

getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

pretty = function(tot) {
  var header, m, s, t;
  tot = Math.round(tot);
  t = modulo(tot, 60);
  tot = Math.floor(tot / 60);
  s = modulo(tot, 60);
  m = Math.floor(tot / 60);
  header = '';
  if (m > 0) {
    header += m + 'm';
  }
  if (s > 0) {
    header += s + 's';
  }
  if (t > 0) {
    header += t + 't';
  }
  return header;
};

assert('1m1t', pretty(3601));

assert('2s3t', pretty(123));

assert('60m30s', pretty(60 * 60 * 60 + 30 * 60));

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

assert('1m1t + 2s3t', prettyPair(3601, 123));

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

assert('03', d2(3));

mst = function(x) { // tertier
  var m, orig, s, t;
  orig = x;
  t = modulo(x, 60);
  x = Math.floor(x / 60);
  s = modulo(x, 60);
  m = Math.floor(x / 60);
  return [m, s, t];
};

assert([3, 0, 0], mst(3 * 60 * 60));

assert([3, 0, 30], mst(180 * 60 + 30));

clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

CSettings = class CSettings {
  constructor() {
    this.flip = this.flip.bind(this);
    this.flip960 = this.flip960.bind(this);
    this.calcSums = this.calcSums.bind(this);
    console.log(localStorage.settings ? "load" : "default");
    if (localStorage.settings) {
      Object.assign(this, JSON.parse(localStorage.settings));
    }
    console.log('A0', JSON.stringify(this.bits));
    this.bits960 || (this.bits960 = ['R480', 'R30', 'R8']);
    this.number || (this.number = 518); // normal chess
    this.chess960 || (this.chess960 = 'RNBQKBNR');
    this.show || (this.show = '3 + 2');
    this.bits || (this.bits = ['M1', 'M2', 's2']);
    this.clocks || (this.clocks = [
      180 * 60,
      180 * 60 // tertier
    ]);
    this.bonuses || (this.bonuses = [
      2 * 60,
      2 * 60 // tertier
    ]);
    this.sums || (this.sums = {
      M: 3,
      s: 2,
      t: 0
    });
    this.player || (this.player = -1);
    this.timeout || (this.timeout = false);
    this.paused = true;
    console.log('A', JSON.stringify(this.bits));
    this.handicap();
    this.save();
  }

  tick() {
    var c;
    if (this.paused) {
      return;
    }
    c = this.clocks[this.player];
    if (c > 0) {
      c -= 60 / frameRate();
    }
    if (c <= 0) {
      c = 0;
      this.timeout = true;
      this.paused = true;
    }
    return this.clocks[this.player] = c;
  }

  save() {
    var d;
    d = new Date();
    if (d - lastStorageSave < HEARTBEAT) { // ms
      return;
    }
    lastStorageSave = d;
    localStorage.settings = JSON.stringify(this);
    return console.log('save'); //,JSON.stringify @
  }

  flip(key) {
    if (indexOf.call(this.bits, key) >= 0) {
      _.remove(this.bits, (n) => {
        return n === key;
      });
    } else {
      this.bits.push(key);
    }
    console.log('B', key, JSON.stringify(this.bits));
    this.sums = this.calcSums();
    return this.show = this.compact();
  }

  flip960(key) {
    if (indexOf.call(this.bits960, key) >= 0) {
      _.remove(this.bits960, function(n) {
        return n === key;
      });
    } else {
      this.bits960.push(key);
    }
    this.number = this.calcSum960();
    return this.chess960 = chess960(this.number);
  }

  calcSums() {
    var k, key, len, letter, number, ref, res;
    res = {
      M: 0,
      s: 0,
      t: 0
    };
    console.log('C', JSON.stringify(this.bits));
    ref = settings.bits;
    for (k = 0, len = ref.length; k < len; k++) {
      key = ref[k];
      if (key) {
        letter = key[0];
        number = parseInt(key.slice(1));
        res[letter] += number;
      }
    }
    return res;
  }

  calcSum960() {
    var k, key, len, ref, res;
    res = 0;
    ref = settings.bits960;
    for (k = 0, len = ref.length; k < len; k++) {
      key = ref[k];
      res += parseInt(key.slice(1));
    }
    return res;
  }

  compact() {
    var header, header0, header1;
    header0 = '';
    header1 = '';
    if (this.sums.M > 0) {
      header0 += this.sums.M;
    }
    if (this.sums.s > 0) {
      header1 += this.sums.s;
    }
    header = header0;
    if (header1.length > 0) {
      header += '+' + header1;
    }
    if (this.sums.t > 0) {
      header += `\n(${this.sums.t})`;
    }
    return header;
  }

  handicap() {
    var bonus, hcp, refl;
    hcp = this.sums.t / 60; // 0/60 to 59/60
    refl = MINUTE * this.sums.M; // tertier
    bonus = SEC * this.sums.s; // tertier
    this.players = [];
    this.players[0] = [refl + refl * hcp, bonus + bonus * hcp];
    return this.players[1] = [refl - refl * hcp, bonus - bonus * hcp];
  }

  ok() {
    console.log('settings.ok');
    this.sums = this.calcSums();
    this.handicap();
    this.clocks = [this.players[0][0], this.players[1][0]];
    this.bonuses = [this.players[0][1], this.players[1][1]];
    this.timeout = false;
    this.paused = true;
    return this.player = -1;
  }

  cancel() {
    Object.assign(this, backup);
    return this.paused = true;
  }

};

//settings.paused = true
Control = class Control {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'black', fg1 = 'white') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
  }

  // @x = Math.round @x
  // @y = Math.round @y
  // @w = Math.round @w
  // @h = Math.round @h
  draw() {
    return console.log('Control.draw must be overriden!');
  }

  inside(x, y) {
    var ref, ref1, w;
    w = this.w * [height / width, width / height][1 - TOGGLE];
    return (-w / 2 <= (ref = x - this.x) && ref <= w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

CNumber = class CNumber extends Control {
  constructor(x, y) {
    super(x, y, 0, 0);
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
  }

  draw() {
    push();
    textSize(8);
    fill('white');
    text(settings.number, this.x, this.y);
    return pop();
  }

};

C960 = class C960 extends Control {
  constructor(x, y, w, h) {
    super(x, y, w, h);
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
    this.visible = true;
  }

  draw() {
    var dx, i, k, len, ref, results, w, xoff;
    if (this.visible) {
      dx = 12;
      w = this.h * [height / width, width / height][TOGGLE];
      xoff = this.x + (dx - w) / 2;
      ref = range(8);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(image(chess[settings.chess960[i]], xoff + (i - 4) * dx, this.y + 8, w, this.h));
      }
      return results;
    }
  }

};

CRounded = class CRounded extends Control {
  constructor(x, y, w, h, text = '', disabled = false, bg = 'white', fg = 'black') {
    super(x, y, w, h, text, bg, fg);
    this.disabled = disabled;
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.disabled ? "black" : this.bg);
      rect(this.x, this.y, this.w, this.h, this.h / 2);
      textSize(4);
      fill(this.disabled ? "white" : this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

};

CPause = class CPause extends Control {
  constructor(x, y, w = 0, h = 0, bg1 = 'black', fg1 = 'white') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    if (!settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

CCogwheel = class CCogwheel extends Control { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'black', fg1 = 'white') {
    super(x, y, w, h);
    this.bg = bg1;
    this.fg = fg1;
  }

  draw() {
    var k, len, ref, v;
    if (settings.paused) {
      push();
      translate(this.x, this.y);
      scale([height / width, width / height][TOGGLE], 1);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      for (k = 0, len = ref.length; k < len; k++) {
        v = ref[k];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        pop();
      }
      return pop();
    }
  }

};

CImage = class CImage extends Control {
  constructor(x, y, w, h, image1) {
    super(x, y, w, h);
    this.image = image1;
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

CRotate = class CRotate extends Control {
  constructor(x, y, w, h, degrees, bg, fg, player1) {
    super(x, y, w, h, '', bg, fg);
    this.degrees = degrees;
    this.player = player1;
  }

  draw() {
    var m, minCol, mw, s, secCol, ss, sw, t, tertier;
    tertier = settings.clocks[this.player];
    [m, s, t] = mst(tertier);
    t = Math.round(t);
    ss = m + ':' + d2(s);
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    if (settings.player === this.player) {
      minCol = 'red';
      secCol = settings.timeout ? 'red' : 'white';
    } else {
      minCol = 'lightgrey';
      secCol = 'grey';
    }
    textSize(18 + 9);
    mw = textWidth(m);
    sw = textWidth(d2(2));
    fill(minCol);
    text(m, -sw / 2, -2);
    fill(secCol);
    text(d2(s), mw / 2, -2);
    textSize(10);
    if (tertier < 10 * 60) {
      text(t, 36, -4);
    }
    if (settings.sums.t > 0 && settings.bonuses[this.player] > 0) {
      textSize(8);
      fill('grey');
      text('+' + pretty(settings.bonuses[this.player]), 0, 17);
    }
    return pop();
  }

};

CAdv = class CAdv extends Control {
  constructor(key1, name1, x, y, diam, text) {
    super(x, y, diam, diam, text, 'black');
    this.key = key1;
    this.name = name1;
    this.visible = true;
  }

  draw() {
    var ref, s;
    push();
    translate(this.x, this.y);
    if (this.name !== '') {
      fill((ref = this.name, indexOf.call(settings[this.key], ref) >= 0) ? 'yellow' : 'gray');
    }
    s = [height / width, width / height][TOGGLE];
    ellipse(0, 0, this.w * s, this.h);
    fill('black');
    textSize(5);
    text(this.text, 0, 0.2);
    return pop();
  }

  inside(x, y) {
    var h, ref, ref1, s, w;
    s = [height / width, width / height][TOGGLE];
    w = this.w * s;
    h = this.h;
    return (-w / 2 <= (ref = x - this.x) && ref <= w / 2) && (-h / 2 <= (ref1 = y - this.y) && ref1 <= h / 2);
  }

};

CDead = class CDead extends Control {
  constructor(x, y, text, fg = 'white') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

CShow = class CShow extends CDead {
  constructor(x, y, fg = 'white') {
    super(x, y, '', fg);
  }

  draw() {
    push();
    translate(this.x, this.y);
    rotate(-90);
    this.text = settings.show;
    fill('white');
    textSize(5);
    text(settings.show, 0, 0);
    //super()
    return pop();
  }

};

CColor = class CColor extends Control {
  constructor(x, y, fg1) {
    super(x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor(name1) {
    this.message = this.message.bind(this);
    this.draw = this.draw.bind(this);
    this.name = name1;
    this.controls = {};
    this.recievers = {};
    this.senders = {};
    this.makeControls();
    this.makeRecievers();
  }

  accept(messages, f) {
    var k, len, message, ref, results;
    console.log('Accepting', this.name, messages);
    ref = messages.split(' ');
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      message = ref[k];
      results.push(this.recievers[message] = f);
    }
    return results;
  }

  addMessages(target, messages) {
    var k, len, message, ref, results;
    if (target === '') {
      target = this.name;
    }
    ref = messages.split(' ');
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      message = ref[k];
      results.push(this.senders[message] = target);
    }
    return results;
  }

  message(keys) {
    var k, key, len, ref, results;
    console.log('messages for', this.name, keys);
    ref = keys.split(' ');
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      key = ref[k];
      if (key in this.recievers) {
        results.push(this.recievers[key](key));
      } else {
        results.push(console.log(`Message ${this.name}.${key} not handled!`));
      }
    }
    return results;
  }

  draw(key) {
    var results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw(key));
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        console.log('mouseClicked', key, this.senders[key]);
        currState = states[this.senders[key]];
        currState.message(key);
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

handlePlayer = function(player) {
  if (settings.timeout) {
    return;
  }
  if (settings.paused) {
    sound.play();
  } else if (settings.player === -1) {
    sound.play();
  } else if (settings.player === player) {
    sound.play();
    settings.clocks[player] += settings.bonuses[player];
  }
  settings.paused = false;
  return settings.player = 1 - player;
};

SClock = class SClock extends State {
  constructor(name) {
    super(name);
    this.draw = this.draw.bind(this);
    this.addMessages('', 'left right pause qr');
    this.addMessages('SBasic', 'basic');
  }

  makeControls() {
    this.controls.left = new CRotate(50, 22, 100, 44, 180, 'black', 'white', 0); // eg up
    this.controls.right = new CRotate(50, 78, 100, 44, 0, 'black', 'white', 1); // eg down
    this.controls.pause = new CPause(67, 50, 17, 12, 'black', 'white');
    this.controls.qr = new CImage(50, 50, 33, 12, qr);
    this.controls.basic = new CCogwheel(83, 50, 17, 12, 'black', 'white');
    return this.controls.show = new CShow(22, 50, 'white');
  }

  makeRecievers() {
    this.accept('left', (key) => {
      return handlePlayer(0);
    });
    this.accept('right', (key) => {
      return handlePlayer(1);
    });
    this.accept('pause', (key) => {
      return settings.paused = true;
    });
    this.accept('qr', (key) => {
      fullscreen(true);
      return resizeCanvas(innerWidth, innerHeight);
    });
    this.accept('cancel', (key) => {
      return settings.cancel();
    });
    return this.accept('ok', (key) => {
      return settings.ok();
    });
  }

  // message : (key) ->
  // 	settings.save()

    // if key == 'left'
  // 	if settings.timeout then return else @handlePlayer 0
  // else if key == 'right'
  // 	if settings.timeout then return else @handlePlayer 1
  // else if key == 'pause'
  // 	settings.paused = true
  // else if key == 'qr'
  // 	fullscreen true
  // 	resizeCanvas innerWidth, innerHeight
  // else if key == 'cancel' then settings.cancel()
  // else if key == 'ok' then settings.ok()
  // else super key
  // settings.save()
  indicator() {
    var a, andel, b;
    a = settings.clocks[0];
    b = settings.clocks[1];
    andel = 100 * a / (a + b);
    push();
    strokeWeight(1);
    stroke('white');
    line(1, andel, 10, andel);
    line(90, andel, 99, andel);
    return pop();
  }

  draw(key) {
    boundMethodCheck(this, SClock);
    super.draw();
    return this.indicator();
  }

};

SBasic = class SBasic extends State {
  constructor(name) {
    super(name);
    this.addMessages('', 'M1 M2 M3 M5 M10 M15 M20 M30 M45 M60 M90');
    this.addMessages('', 's0 s1 s2 s3 s5 s10 s30');
    this.addMessages('SAdv', 'adv');
    this.addMessages('S960', 'b960');
    this.addMessages('SClock', 'cancel ok');
    this.controls.ok.visible = settings.sums.M > 0 && settings.sums.t < 60;
    this.controls.white.text = settings.show;
  }

  makeControls() {
    var M, diam, i, k, l, len, len1, len2, o, ref, ref1, ref2, s, x, y;
    x = [100 / 3, 200 / 3];
    y = [32, 41, 50, 59, 68, 77, 86, 95];
    diam = 8;
    this.controls.orange = states.SAdv.controls.orange;
    this.controls.white = states.SAdv.controls.white;
    this.controls.green = states.SAdv.controls.green;
    this.controls.reflection = new CDead(x[0], 20, 'reflection');
    this.controls.bonus = new CDead(x[1], 20, 'bonus');
    this.controls.M = new CDead(x[0], 25, 'minutes');
    this.controls.s = new CDead(x[1], 25, 'seconds');
    ref = range(5);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      M = [1, 2, 3, 5, 10][i];
      this.controls['M' + M] = new CAdv('bits', '', x[0] - 10, y[i], diam, M);
    }
    ref1 = range(6);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      M = [15, 20, 30, 45, 60, 90][i];
      this.controls['M' + M] = new CAdv('bits', '', x[0] + 10, y[i], diam, M);
    }
    ref2 = range(7);
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      i = ref2[o];
      s = [0, 1, 2, 3, 5, 10, 30][i];
      this.controls['s' + s] = new CAdv('bits', '', x[1], y[i], diam, s);
    }
    this.controls.basic = new CRounded(1 * 100 / 10, y[7], 18, 6, 'basic', true);
    this.controls.adv = new CRounded(3 * 100 / 10, y[7], 18, 6, 'adv');
    this.controls.b960 = new CRounded(5 * 100 / 10, y[7], 18, 6, '960');
    this.controls.cancel = new CRounded(7 * 100 / 10, y[7], 18, 6, 'cancel');
    return this.controls.ok = new CRounded(9 * 100 / 10, y[7], 18, 6, 'ok');
  }

  makeRecievers() {
    this.accept('basic', (key) => {
      return backup = clone(settings); // to be used by cancel
    });
    this.accept('M1 M2 M3 M5 M10 M15 M20 M30 M45 M60 M90', (key) => {
      settings.bits = settings.bits.filter((value) => {
        return value[0] !== 'M';
      });
      console.log('C', key, JSON.stringify(settings.bits));
      states.SAdv.message(key);
      console.log('C2', key, JSON.stringify(settings.bits));
      return this.controls.ok.visible = settings.sums.M > 0 && settings.sums.t < 60;
    });
    return this.accept('s0 s1 s2 s3 s5 s10 s30', (key) => {
      settings.bits = settings.bits.filter((value) => {
        return value[0] !== 's';
      });
      console.log('D', key, JSON.stringify(settings.bits));
      states.SAdv.message(key);
      return console.log('D2', key, JSON.stringify(settings.bits));
    });
  }

};

SAdv = class SAdv extends State {
  constructor(name) {
    super(name);
    this.addMessages('', 'M1 M2 M4 M8 M15 M30 M60');
    this.addMessages('', 's1 s2 s4 s8 s15 s30 s60');
    this.addMessages('', 't1 t2 t4 t8 t15 t30');
    this.addMessages('SBasic', 'basic');
    this.addMessages('S960', 'b960');
    this.addMessages('SClock', 'cancel ok');
  }

  makeControls() {
    var y;
    this.controls.orange = new CColor(50, 2.5, 'orange');
    this.controls.white = new CColor(50, 9.5, 'white');
    this.controls.green = new CColor(50, 16.5, 'green');
    this.controls.reflection = new CDead(25, 21, 'reflection');
    this.controls.bonus = new CDead(50, 21, 'bonus');
    this.controls.hcp = new CDead(75, 21, 'handicap');
    y = 95;
    this.controls.basic = new CRounded(1 * 100 / 10, y, 18, 6, 'basic');
    this.controls.adv = new CRounded(3 * 100 / 10, y, 18, 6, 'adv', true);
    this.controls.b960 = new CRounded(5 * 100 / 10, y, 18, 6, '960');
    this.controls.cancel = new CRounded(7 * 100 / 10, y, 18, 6, 'cancel');
    this.controls.ok = new CRounded(9 * 100 / 10, y, 18, 6, 'ok');
    return this.makeEditButtons();
  }

  makeEditButtons() {
    var diam, i, j, k, len, letter, name, number, ref, results, xoff, xsize, yoff, ysize;
    ref = range(3);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'Mst'[i];
      xsize = 100 / 4;
      ysize = 100 / 12;
      xoff = xsize;
      yoff = 33 + 2;
      diam = 7;
      this.controls[letter] = new CDead(xoff + xsize * i, 26 + 1, 'minutes seconds tertier'.split(' ')[i]);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(7);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30, 60][j];
          name = letter + number;
          if (i !== 2 || j !== 6) {
            results1.push(this.controls[name] = new CAdv('bits', name, xoff + xsize * i, yoff + ysize * j, diam, number));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  }

  makeRecievers() {
    this.accept('adv', (key) => {
      return uppdatera();
    });
    this.accept('M1 M2 M4 M8 M15 M30 M60', (key) => {
      return uppdatera(key);
    });
    this.accept('M3', (key) => {
      return this.message('M1 M2');
    });
    this.accept('M5', (key) => {
      return this.message('M1 M4');
    });
    this.accept('M10', (key) => {
      return this.message('M2 M8');
    });
    this.accept('M20', (key) => {
      return this.message('M15 M4 M1');
    });
    this.accept('M45', (key) => {
      return this.message('M15 M30');
    });
    this.accept('M90', (key) => {
      return this.message('M30 M60');
    });
    this.accept('s1 s2 s4 s8 s15 s30 s60', (key) => {
      return uppdatera(key);
    });
    this.accept('s3', (key) => {
      return this.message('s1 s2');
    });
    this.accept('s5', (key) => {
      return this.message('s1 s4');
    });
    this.accept('s10', (key) => {
      return this.message('s2 s8');
    });
    return this.accept('t1 t2 t4 t8 t15 t30', (key) => {
      return uppdatera(key);
    });
  }

};

uppdatera = (key) => {
  var sp, st;
  st = settings;
  console.log('F', key);
  if (key) {
    st.flip(key);
  }
  currState.controls.ok.visible = st.sums.M > 0 && st.sums.t < 60;
  currState.controls.white.text = settings.show;
  settings.handicap();
  sp = settings.players;
  currState.controls.orange.text = settings.sums.t === 0 ? '' : prettyPair(sp[0][0], sp[0][1]);
  return currState.controls.green.text = settings.sums.t === 0 ? '' : prettyPair(sp[1][0], sp[1][1]);
};

S960 = class S960 extends State {
  constructor(name) {
    super(name);
    this.addMessages('', 'R1 R2 R4 R8 R15 R30 R60 R120 R240 R480');
    this.addMessages('', 'random');
    this.addMessages('SBasic', 'basic');
    this.addMessages('SAdv', 'adv');
    this.addMessages('SClock', 'cancel ok');
    this.makeControls();
  }

  makeControls() {
    var diam, i, k, key, len, number, ref, x, xi, y, yi;
    x = [100 / 4, 200 / 4, 300 / 4];
    y = [-5, 40, 52, 64, 76, 78, 90, 95];
    diam = 10;
    this.controls.C960 = new C960(50, y[0], 100, 10);
    this.controls.CNumber = new CNumber(50, 25);
    ref = range(10);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      number = [1, 2, 4, 8, 15, 30, 60, 120, 240, 480][i];
      key = 'R' + number;
      xi = [0, 0, 0, 0, 1, 1, 1, 2, 2, 2][i];
      yi = [1, 2, 3, 4, 1, 2, 3, 1, 2, 3][i];
      this.controls[key] = new CAdv('bits960', key, x[xi], y[yi], diam, number);
    }
    this.controls.random = new CRounded((x[1] + x[2]) / 2, y[4], 18, 6, 'random');
    this.controls.basic = new CRounded(1 * 100 / 10, y[7], 18, 6, 'basic');
    this.controls.adv = new CRounded(3 * 100 / 10, y[7], 18, 6, 'adv');
    this.controls.b960 = new CRounded(5 * 100 / 10, y[7], 18, 6, '960', true);
    this.controls.cancel = new CRounded(7 * 100 / 10, y[7], 18, 6, 'cancel');
    return this.controls.ok = new CRounded(9 * 100 / 10, y[7], 18, 6, 'ok');
  }

  makeRecievers() {
    this.accept('b960', (key) => {});
    this.accept('R1 R2 R4 R8 R15 R30 R60 R120 R240 R480', (key) => {
      settings.flip960(key); // 10 controls
      return this.controls.C960.visible = settings.number < 960;
    });
    return this.accept('random', (key) => {
      var k, len, nr, ref, value;
      nr = _.random(0, 959);
      settings.number = nr;
      settings.bits960 = [];
      ref = [480, 240, 120, 60, 30, 15, 8, 4, 2, 1];
      for (k = 0, len = ref.length; k < len; k++) {
        value = ref[k];
        if (nr >= value) {
          nr -= value;
          settings.flip960('R' + value);
        }
      }
      return this.controls.C960.visible = settings.number < 960;
    });
  }

};

//else super key

//##################################
preload = function() {
  var k, len, ltr, ref, results;
  qr = loadImage('qr.png');
  sound = loadSound('key.mp3');
  ref = "KQRBN";
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    ltr = ref[k];
    results.push(chess[ltr] = loadImage(`chess\\${ltr}.png`));
  }
  return results;
};

windowResized = function() {
  resizeCanvas(innerWidth, innerHeight);
  return diag = sqrt(width * width + height * height);
};

setup = function() {
  var canvas;
  settings = new CSettings();
  frameRate(FRAMERATE);
  os = navigator.appVersion;
  if (os.indexOf('Linux') >= 0) {
    os = 'Android';
  }
  if (os.indexOf('Windows') >= 0) {
    os = 'Windows';
  }
  if (os.indexOf('Mac') >= 0) {
    os = 'Mac';
  }
  canvas = createCanvas(innerWidth, innerHeight);
  bodyScrollLock.disableBodyScroll(canvas); // Förhindrar att man kan scrolla canvas på iOS
  if (os === 'Android') {
    textFont('Droid Sans');
  }
  if (os === 'Mac') {
    textFont('Verdana');
  }
  if (os === 'Windows') {
    textFont('Lucida Sans Unicode');
  }
  TOGGLE = os === 'Mac' ? 1 : 0;
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  createState('SClock', SClock);
  createState('SAdv', SAdv);
  createState('SBasic', SBasic);
  createState('S960', S960);
  
  //dump()
  return currState = states.SClock;
};

dump = function() { // log everything
  var control, results, skey, state, tkey, transition;
  results = [];
  for (skey in states) {
    state = states[skey];
    console.log('');
    console.log('State', state);
    results.push((function() {
      var results1;
      results1 = [];
      for (tkey in state.senders) {
        transition = state.senders[tkey];
        control = state.controls[tkey];
        if (transition === void 0) {
          transition = 'nothing';
        }
        results1.push(console.log(' ', tkey, '=>', transition, control));
      }
      return results1;
    })());
  }
  return results;
};

mousePressed = function() {
  if (os === 'Windows') {
    return currState.mouseClicked();
  }
};

touchStarted = function() {
  if (os !== 'Windows') {
    return currState.mouseClicked();
  }
};

draw = function() {
  var aspect;
  if (TOGGLE === 0) {
    scale(width / 100, height / 100); // portrait
  } else {
    rotate(90);
    translate(0, -width);
    scale(height / 100, width / 100); // Landscape
  }
  strokeWeight(100 / height);
  push();
  background('black');
  settings.tick();
  currState.draw();
  pop();
  settings.save();
  // debug
  return aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return text(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
};

debugFunction = function() {};

// rates.push frameRate()
// if rates.length > 100 then oldest = rates.shift() else oldest = rates[0]
// sumRate += _.last(rates) - oldest
//textSize 3
// text Math.round(sumRate),50,40
//text settings.chess960,50,60

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee