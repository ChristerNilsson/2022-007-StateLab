// Generated by CoffeeScript 2.5.1
var Button, ClockState, ColorButton, DeadButton, EditButton, Editor, HCP, HOUR, ImageButton, MINUTE, RotateButton, State, buttons, createState, currState, d2, diag, draw, hms, makeEditButtons, mouseClicked, preload, pretty, qr, round3, setup, states, timeout,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

HCP = 20;

HOUR = 3600;

MINUTE = 60;

buttons = {};

states = {};

qr = null;

timeout = false;

currState = null;

diag = 0;

Button = class Button {
  constructor(text1, x1, y1, w1, h1, bg1 = 'white', fg1 = 'black') {
    this.text = text1;
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
  }

  draw(disabled) {
    //if disabled then fill 'lightgray' else fill @bg
    if (this.visible) {
      fill(this.bg);
      rect(this.x, this.y, this.w, this.h);
      textSize(0.04 * diag);
      fill(this.fg);
      return text(this.text, this.x, this.y);
    }
  }

  inside() {
    var ref, ref1;
    return (-this.w / 2 <= (ref = mouseX - this.x) && ref <= this.w / 2) && (-this.h / 2 <= (ref1 = mouseY - this.y) && ref1 <= this.h / 2);
  }

};

ImageButton = class ImageButton extends Button {
  constructor(image1, x, y, w, h) {
    super('', x, y, w, h);
    this.image = image1;
  }

  draw() {
    if (this.image) {
      return image(this.image, (width - this.w) / 2, (height - this.h) / 2, this.w, this.h);
    }
  }

};

RotateButton = class RotateButton extends Button {
  constructor(x, y, w, h, degrees, bg, fg, player) {
    super('', x, y, w, h, bg, fg);
    this.degrees = degrees;
    this.player = player;
  }

  draw() {
    var h, m, s, secs, ss;
    secs = states.Editor.clocks[this.player];
    if (secs === 0) {
      fill('gray');
    }
    [h, m, s] = hms(Math.trunc(secs));
    ss = h >= 1 ? d2(h) + ':' + d2(m) : d2(m) + ':' + d2(s);
    fill(this.bg);
    rect(this.x, this.y, this.w, this.h);
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    textSize(0.18 * diag);
    fill(this.fg);
    text(ss, 0, 0.017 * height);
    textSize(0.05 * diag);
    text('+' + round3(states.Editor.bonuses[this.player]) + 's', 0, 0.15 * height);
    if (states.Editor.clocks[this.player] <= 0) {
      this.bg = 'red'; //text 'Out of time',0,-0.15*height
    }
    return pop();
  }

};

EditButton = class EditButton extends Button {
  constructor(text, x, y, w, h, fg = 'gray') {
    super(text, x, y, w, h, 'black', fg);
  }

  draw() {
    textSize(0.05 * diag);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

DeadButton = class DeadButton extends Button {
  constructor(text, x, y, fg = 'lightgray') {
    super(text, x, y, 0, 0, 'black', fg);
  }

  draw() {
    textSize(0.04 * diag);
    fill(this.fg);
    return text(this.text, this.x, this.y);
  }

};

ColorButton = class ColorButton extends Button {
  constructor(fg1, x, y) {
    super('', x, y, 0, 0);
    this.fg = fg1;
  }

  draw() {
    push();
    textAlign(CENTER, CENTER);
    textSize(0.04 * diag);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor() {
    this.transitions = {};
  }

  createTrans(t) {
    var arr, k, key, len, pair, results, target;
    arr = t.split(' ');
    results = [];
    for (k = 0, len = arr.length; k < len; k++) {
      pair = arr[k];
      [key, target] = pair.split('=>');
      results.push(this.transitions[key] = target);
    }
    return results;
  }

  message(key) {
    console.log(`clicked ${this.name}.${key} => ${this.transitions[key]}`);
    if (key in this.transitions) {
      currState = states[this.transitions[key]];
      console.log(currState, currState);
      return currState.patch();
    } else {
      return console.log('missing transition:', key);
    }
  }

  patch() {}

  draw() {}

};

ClockState = class ClockState extends State {
  constructor(name1) {
    super();
    this.name = name1;
    this.createTrans('qr=>ClockState pause=>ClockState left=>ClockState right=>ClockState new=>Editor'); //  play=>ClockState
    this.paused = true;
    this.player = -1;
    buttons.pause.visible = false;
  }

  uppdatera() {
    console.log('uppdatera');
    if (this.paused) {
      return;
    }
    if (states.Editor.clocks[this.player] > 0) {
      states.Editor.clocks[this.player] -= 1 / 60;
    }
    if (states.Editor.clocks[this.player] <= 0) {
      states.Editor.clocks[this.player] = 0;
      return timeout = true;
    }
  }

  message(key) {
    if (key === 'qr') {
      toggleFullScreen();
      resizeCanvas(windowWidth, windowHeight);
    }
    if (key === 'left') {
      if (timeout) {
        return;
      }
      if (this.player === 0) { // and not timeout[0]
        states.Editor.clocks[0] += states.Editor.bonuses[0];
      }
      this.paused = false;
      this.player = 1;
      buttons.left.fg = 'black';
      buttons.right.fg = 'white';
    }
    if (key === 'pause') {
      this.paused = true;
      buttons.left.fg = 'black';
      buttons.right.fg = 'black';
    }
    if (key === 'right') {
      if (timeout) {
        return;
      }
      if (this.player === 1) { // and not timeout[1]
        states.Editor.clocks[1] += states.Editor.bonuses[1];
      }
      this.paused = false;
      this.player = 0;
      buttons.left.fg = 'white';
      buttons.right.fg = 'black';
    }
    buttons.pause.visible = !this.paused;
    buttons.new.visible = this.paused;
    return super.message(key);
  }

};

Editor = class Editor extends State {
  constructor(name1) {
    var arr, i, j, k, l, len, len1, letter, name, ref, ref1;
    super();
    this.name = name1;
    this.sums = [0, 1 + 2, 0, 0, 2, 0];
    this.clocks = [
      3 * 60,
      3 * 60 // seconds
    ];
    this.bonuses = [
      2,
      2 // seconds
    ];
    buttons.b0.fg = 'yellow';
    buttons.b1.fg = 'yellow';
    buttons.e1.fg = 'yellow';
    buttons.white.text = '3m + 2s';
    this.hcpSwap = 1;
    arr = 'red white green reflection bonus hcp ok=>ClockState swap=>Editor'.split(' ');
    ref = range(6);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'abcdef'[i];
      arr.push(letter);
      ref1 = range(6);
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        name = letter + j;
        arr.push(name + '=>Editor');
      }
    }
    this.createTrans(arr.join(' '));
    console.log(arr.join(' '));
  }

  message(key) {
    var factor, i, j, letter, number;
    if (key === 'swap') {
      this.hcpSwap = -this.hcpSwap;
    }
    if (key !== 'swap' && key !== 'ok') {
      buttons[key].fg = buttons[key].fg === 'gray' ? 'yellow' : 'gray';
      letter = key[0];
      i = 'abcdef'.indexOf(letter);
      factor = i === 5 ? 20 : 1;
      j = key[1];
      number = factor * [1, 2, 4, 8, 15, 30][j];
      this.sums[i] = buttons[key].fg === 'gray' ? this.sums[i] - number : this.sums[i] + number;
    }
    if (key === 'ok') {
      timeout = false;
      buttons.left.fg = 'black';
      buttons.right.fg = 'black';
    }
    this.uppdatera();
    return super.message(key);
  }

  uppdatera() {
    buttons.white.text = this.compact();
    this.handicap();
    if (this.hcp === 0) {
      buttons.red.text = '';
      return buttons.green.text = '';
    } else {
      buttons.red.text = pretty(this.players[0][0]) + ' + ' + pretty(this.players[0][1]);
      return buttons.green.text = pretty(this.players[1][0]) + ' + ' + pretty(this.players[1][1]);
    }
  }

  compact() {
    var header, header0, header1, headers, i, k, l, len, len1, ref, ref1;
    headers = 'h m s m s t'.split(' ');
    header0 = '';
    header1 = '';
    ref = range(0, 3);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      if (this.sums[i] > 0) {
        header0 += this.sums[i] + headers[i];
      }
    }
    ref1 = range(3, 5);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      if (this.sums[i] > 0) {
        header1 += this.sums[i] + headers[i];
      }
    }
    header = header0;
    if (header1.length > 0) {
      header += ' + ' + header1;
    }
    return header;
  }

  handicap() {
    this.hcp = this.hcpSwap * this.sums[5] / (HCP * 60); // 0.0 .. 1.0
    this.refl = HOUR * this.sums[0] + MINUTE * this.sums[1] + this.sums[2];
    this.bonus = MINUTE * this.sums[3] + this.sums[4];
    this.players = [];
    this.players[0] = [this.refl * (1 + this.hcp), this.bonus * (1 + this.hcp)];
    this.players[1] = [this.refl * (1 - this.hcp), this.bonus * (1 - this.hcp)];
    this.clocks = [this.players[0][0], this.players[1][0]];
    return this.bonuses = [this.players[0][1], this.players[1][1]];
  }

};

makeEditButtons = function() {
  var factor, i, j, k, len, letter, name, number, ref, results, shown, xoff, xsize, yoff, ysize;
  ref = range(6);
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    i = ref[k];
    letter = 'abcdef'[i];
    xsize = width / 6;
    ysize = height / 10;
    xoff = xsize / 2 + (width - 6 * xsize) / 2;
    yoff = 0.33 * height;
    shown = 'h m s m s elo'.split(' ');
    buttons[letter] = new DeadButton(shown[i], xoff + xsize * i, 0.26 * height);
    results.push((function() {
      var l, len1, ref1, results1;
      ref1 = range(6);
      results1 = [];
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        j = ref1[l];
        number = [1, 2, 4, 8, 15, 30][j];
        name = letter + j;
        factor = i === 5 ? HCP : 1;
        results1.push(buttons[name] = new EditButton(factor * number, xoff + xsize * i, yoff + ysize * j, xsize, ysize, 'gray'));
      }
      return results1;
    })());
  }
  return results;
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

round3 = function(x) {
  return Math.round(x * 1000) / 1000;
};

pretty = function(tot) {
  var h, header, m, s;
  s = tot % 60;
  tot = (tot - s) / 60;
  m = tot % 60;
  tot = (tot - m) / 60;
  h = tot % 60;
  header = '';
  if (h > 0) {
    header += round3(h) + 'h';
  }
  if (m > 0) {
    header += round3(m) + 'm';
  }
  if (s > 0) {
    header += round3(s) + 's';
  }
  return header;
};

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

console.log(d2(3), '03');

hms = function(x) {
  var h, m, s;
  s = modulo(x, 60);
  x = Math.floor(x / 60);
  m = modulo(x, 60);
  x = Math.floor(x / 60);
  h = x;
  return [h, m, s];
};

console.log(hms(180), [0, 3, 0]);

//##################################
preload = function() {
  return qr = loadImage('qr.png');
};

//windowResized = -> resizeCanvas windowWidth, windowHeight
setup = function() {
  var h, os, size, w;
  os = navigator.appVersion;
  console.log(os);
  if (os.indexOf('Linux') >= 0) { // android/linux
    createCanvas(screen.width, screen.height);
  } else {
    //createCanvas displaywidth,displayHeight
    createCanvas(window.innerWidth, window.innerHeight); // Windows or Mac
  }
  textFont('Lucida Sans Unicode');
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  w = width;
  h = height;
  // Main Page
  size = 0.12 * h; // qr
  buttons.left = new RotateButton(0.5 * w, 0.22 * h, w, 0.44 * h, 180, 'orange', 'black', 0); // eg up
  buttons.right = new RotateButton(0.5 * w, 0.78 * h, w, 0.44 * h, 0, 'green', 'black', 1); // eg down
  buttons.pause = new Button('pause', 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.new = new Button('new', w - 0.25 * (w - size), 0.50 * h, (w - size) / 2, size);
  buttons.qr = new ImageButton(qr, 0.5 * w, 0.5 * h, size, size);
  
  // Edit Page
  buttons.swap = new Button('swap', 0.33 * w, 0.93 * h, 0.22 * w, 0.08 * h);
  buttons.ok = new Button('ok', 0.67 * w, 0.93 * h, 0.22 * w, 0.08 * h);
  buttons.red = new ColorButton('red', w / 2, 0.03 * h);
  buttons.white = new ColorButton('white', w / 2, 0.09 * h);
  buttons.green = new ColorButton('green', w / 2, 0.15 * h);
  buttons.reflection = new DeadButton('reflection', 0.25 * w, 0.21 * h);
  buttons.bonus = new DeadButton('bonus', 0.66 * w, 0.21 * h);
  buttons.hcp = new DeadButton('hcp', 0.92 * w, 0.21 * h);
  makeEditButtons();
  createState('ClockState', ClockState);
  createState('Editor', Editor);
  return currState = states.ClockState;
};

draw = function() {
  var key, target;
  background('black');
  states.ClockState.uppdatera();
  for (key in currState.transitions) {
    target = currState.transitions[key];
    if (key in buttons) {
      buttons[key].draw(target === void 0);
    } else {
      console.log('missing button:', key);
    }
  }
  // debug

  // os = navigator.appVersion
  // textSize 0.025 * height
  // text width,0.5*width,0.05*height
  // text height,0.75*width,0.05*height

  // text currState.name,0.5*width,0.03*height
  // fill 'green'
  // text round3(states.Editor.bonuses[0]),0.1*width,0.03*height
  // text round3(states.Editor.clocks[0]),0.25*width,0.03*height
  // text round3(states.Editor.clocks[1]),0.75*width,0.03*height
  // text round3(states.Editor.bonuses[1]),0.9*width,0.03*height

  // text states.ClockState.paused,0.3*width,0.025*height
  // text states.ClockState.player,0.7*width,0.025*height
  return currState.draw();
};

mouseClicked = function() {
  var key, results;
  results = [];
  for (key in currState.transitions) {
    if (currState.transitions[key] === void 0) {
      continue;
    }
    console.log(key);
    if (buttons[key].inside(mouseX, mouseY)) {
      currState.message(key);
      break;
    } else {
      results.push(void 0);
    }
  }
  return results;
};

/* Grave yard */
// class LeftOrRight extends State
// 	constructor : (@name) ->
// 		super()
// 		@createTrans 'qr left=>RightTicking right=>LeftTicking pause=>StartState'
// 	draw : ->
// 		buttons.left.fg = 'white'
// 		buttons.right.fg = 'white'

// class LeftTicking extends State
// 	constructor : (@name) ->
// 		super()
// 		@createTrans 'qr right left=>RightTicking pause=>LeftPaused'
// 	draw : ->
// 		if not timeout[0] then states.Editor.clocks[0] -= 1/60
// 		if states.Editor.clocks[0] <= 0 
// 			states.Editor.clocks[0] = 0
// 			timeout[0] = true
// 		buttons.left.fg = 'white'
// 		buttons.right.fg = 'black'
// 		super()
// 	message : (key) ->
// 		if key == 'left'
// 			if not timeout[0]
// 				states.Editor.clocks[0] += states.Editor.bonuses[0]
// 			buttons.left.fg = 'white'
// 			buttons.right.fg = 'black'
// 		super key

// class RightTicking extends State
// 	constructor : (@name) ->
// 		super()
// 		@createTrans 'qr left right=>LeftTicking pause=>RightPaused'
// 	draw : ->
// 		if not timeout[1] then states.Editor.clocks[1] -= 1/60
// 		if states.Editor.clocks[1] <= 0 
// 			states.Editor.clocks[1] = 0
// 			timeout[1] = true
// 		buttons.left.fg = 'black'
// 		buttons.right.fg = 'white'
// 		super()
// 	message : (key) ->
// 		if key == 'right'
// 			if not timeout[1]
// 				states.Editor.clocks[1] += states.Editor.bonuses[1]
// 			buttons.left.fg = 'black'
// 			buttons.right.fg = 'white'
// 		super key

// class LeftPaused extends State
// 	constructor : (@name) ->
// 		super()
// 		@createTrans 'qr left right play=>LeftTicking new=>Editor'

// class RightPaused extends State
// 	constructor : (@name) ->
// 		super()
// 		@createTrans 'qr left right play=>RightTicking new=>Editor'

// class WelcomeState extends State
// 	constructor : (@name) ->
// 		super()
// 		@createTrans 'welcome=>StartState'
// 	message : (key) ->
// 		if key == 'welcome'
// 			os = navigator.appVersion
// 			ok = os.indexOf('Linux') >= 0 
// 			console.log ok
// 			#if ok then toggleFullScreen()
// 		super key

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsTUFBQSxFQUFBLFVBQUEsRUFBQSxXQUFBLEVBQUEsVUFBQSxFQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxXQUFBLEVBQUEsTUFBQSxFQUFBLFlBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsRUFBQSxTQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLGVBQUEsRUFBQSxZQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQTtFQUFBOztBQUFBLEdBQUEsR0FBTTs7QUFDTixJQUFBLEdBQU87O0FBQ1AsTUFBQSxHQUFTOztBQUVULE9BQUEsR0FBVSxDQUFBOztBQUNWLE1BQUEsR0FBUyxDQUFBOztBQUVULEVBQUEsR0FBSzs7QUFDTCxPQUFBLEdBQVU7O0FBQ1YsU0FBQSxHQUFZOztBQUVaLElBQUEsR0FBTzs7QUFFRCxTQUFOLE1BQUEsT0FBQTtFQUNDLFdBQWMsTUFBQSxJQUFBLElBQUEsSUFBQSxJQUFBLFFBQXVCLE9BQXZCLFFBQW1DLE9BQW5DLENBQUE7SUFBQyxJQUFDLENBQUE7SUFBSyxJQUFDLENBQUE7SUFBRSxJQUFDLENBQUE7SUFBRSxJQUFDLENBQUE7SUFBRSxJQUFDLENBQUE7SUFBRSxJQUFDLENBQUE7SUFBVyxJQUFDLENBQUE7SUFDN0MsSUFBQyxDQUFBLE9BQUQsR0FBVztFQURFOztFQUVkLElBQU8sQ0FBQyxRQUFELENBQUEsRUFBQTs7SUFFTixJQUFHLElBQUMsQ0FBQSxPQUFKO01BQ0MsSUFBQSxDQUFLLElBQUMsQ0FBQSxFQUFOO01BQ0EsSUFBQSxDQUFLLElBQUMsQ0FBQSxDQUFOLEVBQVEsSUFB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QUFXLENBQUMsR0FBRCxDQUFyQixLQUE4QixNQUFqQztBQUFnRCxlQUFoRDs7SUFDQSxPQUFPLENBQUMsR0FBUixDQUFZLEdBQVo7SUFDQSxJQUFHLE9BQU8sQ0FBQyxHQUFELENBQUssQ0FBQyxNQUFiLENBQW9CLE1BQXBCLEVBQTRCLE1BQTVCLENBQUg7TUFDQyxTQUFTLENBQUMsT0FBVixDQUFrQixHQUFsQjtBQUNBLFlBRkQ7S0FBQSxNQUFBOzJCQUFBOztFQUhELENBQUE7O0FBRGM7O0FBaFZmIiwic291cmNlc0NvbnRlbnQiOlsiSENQID0gMjBcclxuSE9VUiA9IDM2MDBcclxuTUlOVVRFID0gNjBcclxuXHJcbmJ1dHRvbnMgPSB7fVxyXG5zdGF0ZXMgPSB7fVxyXG5cclxucXIgPSBudWxsXHJcbnRpbWVvdXQgPSBmYWxzZVxyXG5jdXJyU3RhdGUgPSBudWxsXHJcblxyXG5kaWFnID0gMCBcclxuXHJcbmNsYXNzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKEB0ZXh0LEB4LEB5LEB3LEBoLEBiZz0nd2hpdGUnLEBmZz0nYmxhY2snKSAtPlxyXG5cdFx0QHZpc2libGUgPSB0cnVlXHJcblx0ZHJhdyA6IChkaXNhYmxlZCkgLT5cclxuXHRcdCNpZiBkaXNhYmxlZCB0aGVuIGZpbGwgJ2xpZ2h0Z3JheScgZWxzZSBmaWxsIEBiZ1xyXG5cdFx0aWYgQHZpc2libGUgXHJcblx0XHRcdGZpbGwgQGJnXHJcblx0XHRcdHJlY3QgQHgsQHksQHcsQGhcclxuXHRcdFx0dGV4dFNpemUgMC4wNCpkaWFnXHJcblx0XHRcdGZpbGwgQGZnXHJcblx0XHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHRpbnNpZGUgOiAtPiAtQHcvMiA8PSBtb3VzZVgtQHggPD0gQHcvMiBhbmQgLUBoLzIgPD0gbW91c2VZLUB5IDw9IEBoLzJcclxuXHJcbmNsYXNzIEltYWdlQnV0dG9uIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoQGltYWdlLHgseSx3LGgpIC0+IHN1cGVyICcnLHgseSx3LGhcclxuXHRkcmF3IDogIC0+IGlmIEBpbWFnZSB0aGVuIGltYWdlIEBpbWFnZSwod2lkdGgtQHcpLzIsKGhlaWdodC1AaCkvMixAdyxAaFxyXG5cclxuY2xhc3MgUm90YXRlQnV0dG9uIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAoeCx5LHcsaCxAZGVncmVlcyxiZyxmZyxAcGxheWVyKSAtPiBzdXBlciAnJyx4LHksdyxoLGJnLGZnXHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0c2VjcyA9IHN0YXRlcy5FZGl0b3IuY2xvY2tzW0BwbGF5ZXJdXHJcblx0XHRpZiBzZWNzID09IDAgdGhlbiBmaWxsICdncmF5J1xyXG5cdFx0W2gsbSxzXSA9IGhtcyBNYXRoLnRydW5jIHNlY3NcclxuXHRcdHNzID0gaWYgaCA+PSAxIHRoZW4gZDIoaCkgKyAnOicgKyBkMihtKSBlbHNlIGQyKG0pICsgJzonICsgZDIocylcclxuXHJcblx0XHRmaWxsIEBiZ1xyXG5cdFx0cmVjdCBAeCxAeSxAdyxAaFxyXG5cclxuXHRcdHB1c2goKVxyXG5cdFx0dHJhbnNsYXRlIEB4LEB5XHJcblx0XHRyb3RhdGUgQGRlZ3JlZXNcclxuXHRcdHRleHRTaXplIDAuMTgqZGlhZ1xyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHQgc3MsMCwwLjAxNypoZWlnaHRcclxuXHRcdHRleHRTaXplIDAuMDUqZGlhZ1xyXG5cdFx0dGV4dCAnKycgKyByb3VuZDMoc3RhdGVzLkVkaXRvci5ib251c2VzW0BwbGF5ZXJdKSsncycsMCwwLjE1KmhlaWdodFxyXG5cdFx0aWYgc3RhdGVzLkVkaXRvci5jbG9ja3NbQHBsYXllcl08PTAgdGhlbiBAYmcgPSAncmVkJyAjdGV4dCAnT3V0IG9mIHRpbWUnLDAsLTAuMTUqaGVpZ2h0XHJcblx0XHRwb3AoKVxyXG5cclxuY2xhc3MgRWRpdEJ1dHRvbiBleHRlbmRzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKHRleHQseCx5LHcsaCxmZz0nZ3JheScpIC0+IHN1cGVyIHRleHQseCx5LHcsaCwnYmxhY2snLGZnXHJcblx0ZHJhdyA6IC0+XHJcblx0XHR0ZXh0U2l6ZSAwLjA1KmRpYWdcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblxyXG5jbGFzcyBEZWFkQnV0dG9uIGV4dGVuZHMgQnV0dG9uXHJcblx0Y29uc3RydWN0b3IgOiAodGV4dCx4LHksZmc9J2xpZ2h0Z3JheScpIC0+IHN1cGVyIHRleHQseCx5LDAsMCwnYmxhY2snLGZnXHJcblx0ZHJhdyA6IC0+XHJcblx0XHR0ZXh0U2l6ZSAwLjA0KmRpYWdcclxuXHRcdGZpbGwgQGZnXHJcblx0XHR0ZXh0IEB0ZXh0LEB4LEB5XHJcblxyXG5jbGFzcyBDb2xvckJ1dHRvbiBleHRlbmRzIEJ1dHRvblxyXG5cdGNvbnN0cnVjdG9yIDogKEBmZyx4LHkpIC0+IHN1cGVyICcnLHgseSwwLDBcclxuXHRkcmF3IDogLT5cclxuXHRcdHB1c2goKVxyXG5cdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRcdHRleHRTaXplIDAuMDQqZGlhZ1xyXG5cdFx0ZmlsbCBAZmdcclxuXHRcdHRleHQgQHRleHQsQHgsQHlcclxuXHRcdHBvcCgpXHJcblxyXG5jbGFzcyBTdGF0ZVxyXG5cdGNvbnN0cnVjdG9yIDogLT4gQHRyYW5zaXRpb25zID0ge31cclxuXHRjcmVhdGVUcmFucyA6ICh0KSAtPiBcclxuXHRcdGFyciA9IHQuc3BsaXQgJyAnXHJcblx0XHRmb3IgcGFpciBpbiBhcnJcclxuXHRcdFx0W2tleSx0YXJnZXRdID0gcGFpci5zcGxpdCAnPT4nXHJcblx0XHRcdEB0cmFuc2l0aW9uc1trZXldID0gdGFyZ2V0XHJcblx0bWVzc2FnZSA6IChrZXkpIC0+XHJcblx0XHRjb25zb2xlLmxvZyBcImNsaWNrZWQgI3tAbmFtZX0uI3trZXl9ID0+ICN7QHRyYW5zaXRpb25zW2tleV19XCJcclxuXHRcdGlmIGtleSBvZiBAdHJhbnNpdGlvbnNcclxuXHRcdFx0Y3VyclN0YXRlID0gc3RhdGVzW0B0cmFuc2l0aW9uc1trZXldXVxyXG5cdFx0XHRjb25zb2xlLmxvZyBjdXJyU3RhdGUsY3VyclN0YXRlXHJcblx0XHRcdGN1cnJTdGF0ZS5wYXRjaCgpXHJcblx0XHRlbHNlIGNvbnNvbGUubG9nICdtaXNzaW5nIHRyYW5zaXRpb246JyxrZXlcclxuXHRwYXRjaCA6IC0+XHJcblx0ZHJhdyA6IC0+XHJcblxyXG5jbGFzcyBDbG9ja1N0YXRlIGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdHN1cGVyKClcclxuXHRcdEBjcmVhdGVUcmFucyAncXI9PkNsb2NrU3RhdGUgcGF1c2U9PkNsb2NrU3RhdGUgbGVmdD0+Q2xvY2tTdGF0ZSByaWdodD0+Q2xvY2tTdGF0ZSBuZXc9PkVkaXRvcicgIyAgcGxheT0+Q2xvY2tTdGF0ZVxyXG5cdFx0QHBhdXNlZCA9IHRydWVcclxuXHRcdEBwbGF5ZXIgPSAtMVxyXG5cdFx0YnV0dG9ucy5wYXVzZS52aXNpYmxlID0gZmFsc2VcclxuXHJcblx0dXBwZGF0ZXJhIDogLT5cclxuXHRcdGNvbnNvbGUubG9nICd1cHBkYXRlcmEnXHJcblx0XHRpZiAgQHBhdXNlZCB0aGVuIHJldHVyblxyXG5cdFx0aWYgc3RhdGVzLkVkaXRvci5jbG9ja3NbQHBsYXllcl0gPiAwIHRoZW4gc3RhdGVzLkVkaXRvci5jbG9ja3NbQHBsYXllcl0gLT0gMS82MFxyXG5cdFx0aWYgc3RhdGVzLkVkaXRvci5jbG9ja3NbQHBsYXllcl0gPD0gMCBcclxuXHRcdFx0c3RhdGVzLkVkaXRvci5jbG9ja3NbQHBsYXllcl0gPSAwXHJcblx0XHRcdHRpbWVvdXQgPSB0cnVlXHJcblxyXG5cdG1lc3NhZ2UgOiAoa2V5KSAtPlxyXG5cdFx0aWYga2V5ID09ICdxcicgXHJcblx0XHRcdHRvZ2dsZUZ1bGxTY3JlZW4oKVxyXG5cdFx0XHRyZXNpemVDYW52YXMgd2luZG93V2lkdGgsIHdpbmRvd0hlaWdodFxyXG5cdFx0aWYga2V5ID09ICdsZWZ0J1xyXG5cdFx0XHRpZiB0aW1lb3V0IHRoZW4gcmV0dXJuXHJcblx0XHRcdGlmIEBwbGF5ZXIgPT0gMCAjIGFuZCBub3QgdGltZW91dFswXVxyXG5cdFx0XHRcdHN0YXRlcy5FZGl0b3IuY2xvY2tzWzBdICs9IHN0YXRlcy5FZGl0b3IuYm9udXNlc1swXVxyXG5cdFx0XHRAcGF1c2VkID0gZmFsc2VcclxuXHRcdFx0QHBsYXllciA9IDFcclxuXHRcdFx0YnV0dG9ucy5sZWZ0LmZnID0gJ2JsYWNrJ1xyXG5cdFx0XHRidXR0b25zLnJpZ2h0LmZnID0gJ3doaXRlJ1xyXG5cdFx0aWYga2V5ID09ICdwYXVzZSdcclxuXHRcdFx0QHBhdXNlZCA9IHRydWVcclxuXHRcdFx0YnV0dG9ucy5sZWZ0LmZnID0gJ2JsYWNrJ1xyXG5cdFx0XHRidXR0b25zLnJpZ2h0LmZnID0gJ2JsYWNrJ1xyXG5cdFx0aWYga2V5ID09ICdyaWdodCdcclxuXHRcdFx0aWYgdGltZW91dCB0aGVuIHJldHVyblxyXG5cdFx0XHRpZiBAcGxheWVyID09IDEgIyBhbmQgbm90IHRpbWVvdXRbMV1cclxuXHRcdFx0XHRzdGF0ZXMuRWRpdG9yLmNsb2Nrc1sxXSArPSBzdGF0ZXMuRWRpdG9yLmJvbnVzZXNbMV1cclxuXHRcdFx0QHBhdXNlZCA9IGZhbHNlXHJcblx0XHRcdEBwbGF5ZXIgPSAwXHJcblx0XHRcdGJ1dHRvbnMubGVmdC5mZyA9ICd3aGl0ZSdcclxuXHRcdFx0YnV0dG9ucy5yaWdodC5mZyA9ICdibGFjaydcclxuXHJcblx0XHRidXR0b25zLnBhdXNlLnZpc2libGUgPSBub3QgQHBhdXNlZFxyXG5cdFx0YnV0dG9ucy5uZXcudmlzaWJsZSA9IEBwYXVzZWRcclxuXHRcdHN1cGVyIGtleVxyXG5cclxuY2xhc3MgRWRpdG9yIGV4dGVuZHMgU3RhdGVcclxuXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuXHRcdHN1cGVyKClcclxuXHRcdEBzdW1zID0gWzAsMSsyLDAsMCwyLDBdXHJcblxyXG5cdFx0QGNsb2NrcyA9IFszKjYwLDMqNjBdICMgc2Vjb25kc1xyXG5cdFx0QGJvbnVzZXMgPSBbMiwyXSAjIHNlY29uZHNcclxuXHRcdGJ1dHRvbnMuYjAuZmcgPSAneWVsbG93J1xyXG5cdFx0YnV0dG9ucy5iMS5mZyA9ICd5ZWxsb3cnXHJcblx0XHRidXR0b25zLmUxLmZnID0gJ3llbGxvdydcclxuXHRcdGJ1dHRvbnMud2hpdGUudGV4dCA9ICczbSArIDJzJ1xyXG5cclxuXHRcdEBoY3BTd2FwID0gMVxyXG5cdFx0YXJyID0gJ3JlZCB3aGl0ZSBncmVlbiByZWZsZWN0aW9uIGJvbnVzIGhjcCBvaz0+Q2xvY2tTdGF0ZSBzd2FwPT5FZGl0b3InLnNwbGl0ICcgJ1xyXG5cdFx0Zm9yIGkgaW4gcmFuZ2UgNlxyXG5cdFx0XHRsZXR0ZXIgPSAnYWJjZGVmJ1tpXVxyXG5cdFx0XHRhcnIucHVzaCBsZXR0ZXJcclxuXHRcdFx0Zm9yIGogaW4gcmFuZ2UgNlxyXG5cdFx0XHRcdG5hbWUgPSBsZXR0ZXIgKyBqXHJcblx0XHRcdFx0YXJyLnB1c2ggbmFtZSArICc9PkVkaXRvcidcclxuXHRcdEBjcmVhdGVUcmFucyBhcnIuam9pbiAnICdcclxuXHRcdGNvbnNvbGUubG9nIGFyci5qb2luICcgJ1xyXG5cclxuXHRtZXNzYWdlIDogKGtleSkgLT5cclxuXHRcdGlmIGtleSA9PSAnc3dhcCdcclxuXHRcdFx0QGhjcFN3YXAgPSAtQGhjcFN3YXBcclxuXHRcdGlmIGtleSAhPSAnc3dhcCcgYW5kIGtleSAhPSAnb2snXHJcblx0XHRcdGJ1dHRvbnNba2V5XS5mZyA9IGlmIGJ1dHRvbnNba2V5XS5mZyA9PSAnZ3JheScgdGhlbiAneWVsbG93JyBlbHNlICdncmF5J1xyXG5cdFx0XHRsZXR0ZXIgPSBrZXlbMF1cclxuXHRcdFx0aSA9ICdhYmNkZWYnLmluZGV4T2YgbGV0dGVyXHJcblx0XHRcdGZhY3RvciA9IGlmIGk9PTUgdGhlbiAyMCBlbHNlIDFcclxuXHRcdFx0aiA9IGtleVsxXVxyXG5cdFx0XHRudW1iZXIgPSBmYWN0b3IgKiBbMSwyLDQsOCwxNSwzMF1bal1cclxuXHRcdFx0QHN1bXNbaV0gPSBpZiBidXR0b25zW2tleV0uZmcgPT0gJ2dyYXknIHRoZW4gQHN1bXNbaV0tbnVtYmVyIGVsc2UgQHN1bXNbaV0rbnVtYmVyXHJcblx0XHRpZiBrZXkgPT0gJ29rJyBcclxuXHRcdFx0dGltZW91dCA9IGZhbHNlXHJcblx0XHRcdGJ1dHRvbnMubGVmdC5mZyA9ICdibGFjaydcclxuXHRcdFx0YnV0dG9ucy5yaWdodC5mZyA9ICdibGFjaydcclxuXHRcdEB1cHBkYXRlcmEoKVxyXG5cdFx0c3VwZXIga2V5XHJcblxyXG5cdHVwcGRhdGVyYSA6IC0+XHJcblx0XHRidXR0b25zLndoaXRlLnRleHQgPSBAY29tcGFjdCgpXHJcblx0XHRAaGFuZGljYXAoKVxyXG5cdFx0aWYgQGhjcCA9PSAwXHJcblx0XHRcdGJ1dHRvbnMucmVkLnRleHQgICA9ICcnXHJcblx0XHRcdGJ1dHRvbnMuZ3JlZW4udGV4dCA9ICcnXHJcblx0XHRlbHNlXHJcblx0XHRcdGJ1dHRvbnMucmVkLnRleHQgICA9IHByZXR0eShAcGxheWVyc1swXVswXSkgKyAnICsgJyArIHByZXR0eShAcGxheWVyc1swXVsxXSlcclxuXHRcdFx0YnV0dG9ucy5ncmVlbi50ZXh0ID0gcHJldHR5KEBwbGF5ZXJzWzFdWzBdKSArICcgKyAnICsgcHJldHR5KEBwbGF5ZXJzWzFdWzFdKVxyXG5cclxuXHRjb21wYWN0IDogLT5cclxuXHRcdGhlYWRlcnMgPSAnaCBtIHMgbSBzIHQnLnNwbGl0ICcgJ1xyXG5cdFx0aGVhZGVyMCA9ICcnXHJcblx0XHRoZWFkZXIxID0gJydcclxuXHRcdGZvciBpIGluIHJhbmdlIDAsM1xyXG5cdFx0XHRpZiBAc3Vtc1tpXT4wIHRoZW4gaGVhZGVyMCArPSBAc3Vtc1tpXSArIGhlYWRlcnNbaV1cclxuXHRcdGZvciBpIGluIHJhbmdlIDMsNVxyXG5cdFx0XHRpZiBAc3Vtc1tpXT4wIHRoZW4gaGVhZGVyMSArPSBAc3Vtc1tpXSArIGhlYWRlcnNbaV1cclxuXHRcdGhlYWRlciA9IGhlYWRlcjBcclxuXHRcdGlmIGhlYWRlcjEubGVuZ3RoID4gMCB0aGVuIGhlYWRlciArPSAnICsgJyArIGhlYWRlcjFcclxuXHRcdGhlYWRlclxyXG5cclxuXHRoYW5kaWNhcCA6IC0+XHJcblx0XHRAaGNwID0gQGhjcFN3YXAgKiBAc3Vtc1s1XSAvIChIQ1AgKiA2MCkgIyAwLjAgLi4gMS4wXHJcblx0XHRAcmVmbCA9IEhPVVIgKiBAc3Vtc1swXSArIE1JTlVURSAqIEBzdW1zWzFdICsgQHN1bXNbMl0gIyBzZWt1bmRlclxyXG5cdFx0QGJvbnVzID0gICAgICAgICAgICAgICAgICBNSU5VVEUgKiBAc3Vtc1szXSArIEBzdW1zWzRdICMgc2VrdW5kZXJcclxuXHRcdEBwbGF5ZXJzID0gW11cclxuXHRcdEBwbGF5ZXJzWzBdID0gW0ByZWZsKigxK0BoY3ApLCBAYm9udXMqKDErQGhjcCldXHJcblx0XHRAcGxheWVyc1sxXSA9IFtAcmVmbCooMS1AaGNwKSwgQGJvbnVzKigxLUBoY3ApXVxyXG5cdFx0QGNsb2NrcyAgPSBbQHBsYXllcnNbMF1bMF0sIEBwbGF5ZXJzWzFdWzBdXVxyXG5cdFx0QGJvbnVzZXMgPSBbQHBsYXllcnNbMF1bMV0sIEBwbGF5ZXJzWzFdWzFdXVxyXG5cclxubWFrZUVkaXRCdXR0b25zID0gLT5cclxuXHRmb3IgaSBpbiByYW5nZSA2XHJcblx0XHRsZXR0ZXIgPSAnYWJjZGVmJ1tpXVxyXG5cdFx0eHNpemUgPSB3aWR0aC82XHJcblx0XHR5c2l6ZSA9IGhlaWdodC8xMFxyXG5cdFx0eG9mZiA9IHhzaXplLzIgKyAod2lkdGgtNip4c2l6ZSkvMlxyXG5cdFx0eW9mZiA9IDAuMzMqaGVpZ2h0XHJcblx0XHRzaG93bj0naCBtIHMgbSBzIGVsbycuc3BsaXQgJyAnXHJcblx0XHRidXR0b25zW2xldHRlcl0gPSBuZXcgRGVhZEJ1dHRvbiBzaG93bltpXSwgeG9mZit4c2l6ZSppLCAwLjI2KmhlaWdodCBcclxuXHRcdGZvciBqIGluIHJhbmdlIDZcclxuXHRcdFx0bnVtYmVyID0gWzEsMiw0LDgsMTUsMzBdW2pdXHJcblx0XHRcdG5hbWUgPSBsZXR0ZXIgKyBqXHJcblx0XHRcdGZhY3RvciA9IGlmIGk9PTUgdGhlbiBIQ1AgZWxzZSAxXHJcblx0XHRcdGJ1dHRvbnNbbmFtZV0gPSBuZXcgRWRpdEJ1dHRvbiBmYWN0b3IgKiBudW1iZXIsIHhvZmYreHNpemUqaSwgeW9mZit5c2l6ZSpqLCB4c2l6ZSwgeXNpemUsICdncmF5J1xyXG5cclxuY3JlYXRlU3RhdGUgPSAoa2V5LGtsYXNzKSAtPiBzdGF0ZXNba2V5XSA9IG5ldyBrbGFzcyBrZXlcclxuXHJcbnJvdW5kMyA9ICh4KSAtPiBNYXRoLnJvdW5kKHgqMTAwMCkvMTAwMFxyXG5cclxucHJldHR5ID0gKHRvdCkgLT5cclxuXHRzID0gdG90ICUgNjBcclxuXHR0b3QgPSAodG90IC0gcykgLyA2MFxyXG5cdG0gPSB0b3QgJSA2MFxyXG5cdHRvdCA9ICh0b3QgLSBtKSAvIDYwXHJcblx0aCA9IHRvdCAlIDYwXHJcblx0aGVhZGVyID0gJydcclxuXHRpZiBoPjAgdGhlbiBoZWFkZXIgKz0gcm91bmQzKGgpICsgJ2gnXHJcblx0aWYgbT4wIHRoZW4gaGVhZGVyICs9IHJvdW5kMyhtKSArICdtJ1xyXG5cdGlmIHM+MCB0aGVuIGhlYWRlciArPSByb3VuZDMocykgKyAncydcclxuXHRoZWFkZXJcclxuXHJcbmQyID0gKHgpIC0+XHJcblx0eCA9IE1hdGgudHJ1bmMgeFxyXG5cdGlmIHggPCAxMCB0aGVuICcwJyt4IGVsc2UgeFxyXG5jb25zb2xlLmxvZyBkMigzKSwgJzAzJ1xyXG5cclxuaG1zID0gKHgpIC0+XHJcblx0cyA9IHggJSUgNjBcclxuXHR4ID0geCAvLyA2MFxyXG5cdG0gPSB4ICUlIDYwXHJcblx0eCA9IHggLy8gNjBcclxuXHRoID0geFxyXG5cdFtoLG0sc11cclxuY29uc29sZS5sb2cgaG1zKDE4MCksIFswLDMsMF1cclxuXHJcbiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjXHJcblxyXG5wcmVsb2FkID0gLT4gcXIgPSBsb2FkSW1hZ2UgJ3FyLnBuZydcclxuXHJcbiN3aW5kb3dSZXNpemVkID0gLT4gcmVzaXplQ2FudmFzIHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHRcclxuXHJcbnNldHVwID0gLT5cclxuXHRvcyA9IG5hdmlnYXRvci5hcHBWZXJzaW9uXHJcblx0Y29uc29sZS5sb2cgb3NcclxuXHRpZiBvcy5pbmRleE9mKCdMaW51eCcpID49IDAgIyBhbmRyb2lkL2xpbnV4XHJcblx0XHRjcmVhdGVDYW52YXMgc2NyZWVuLndpZHRoLHNjcmVlbi5oZWlnaHRcclxuXHRcdCNjcmVhdGVDYW52YXMgZGlzcGxheXdpZHRoLGRpc3BsYXlIZWlnaHRcclxuXHRlbHNlXHJcblx0XHRjcmVhdGVDYW52YXMgd2luZG93LmlubmVyV2lkdGgsd2luZG93LmlubmVySGVpZ2h0ICMgV2luZG93cyBvciBNYWNcclxuXHJcblx0dGV4dEZvbnQgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnXHJcblx0ZGlhZyA9IHNxcnQgd2lkdGgqd2lkdGggKyBoZWlnaHQqaGVpZ2h0XHJcblxyXG5cdGJhY2tncm91bmQgJ2JsYWNrJ1xyXG5cclxuXHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdHJlY3RNb2RlIENFTlRFUlxyXG5cdGFuZ2xlTW9kZSBERUdSRUVTXHJcblxyXG5cdHcgPSB3aWR0aFxyXG5cdGggPSBoZWlnaHRcclxuXHJcblx0IyBNYWluIFBhZ2VcclxuXHRzaXplID0gMC4xMipoICMgcXJcclxuXHRidXR0b25zLmxlZnQgICAgPSBuZXcgUm90YXRlQnV0dG9uICAgIDAuNSp3LCAwLjIyKmgsIHcsICAgICAwLjQ0KmgsIDE4MCwgJ29yYW5nZScsICdibGFjaycsIDAgIyBlZyB1cFxyXG5cdGJ1dHRvbnMucmlnaHQgICA9IG5ldyBSb3RhdGVCdXR0b24gICAgMC41KncsIDAuNzgqaCwgdywgICAgIDAuNDQqaCwgICAwLCAnZ3JlZW4nLCAgJ2JsYWNrJywgMSAjIGVnIGRvd25cclxuXHRidXR0b25zLnBhdXNlICAgPSBuZXcgQnV0dG9uICdwYXVzZScsIDAuMjUqKHctc2l6ZSksIDAuNTAqaCwgKHctc2l6ZSkvMiwgc2l6ZVxyXG5cdGJ1dHRvbnMubmV3ICAgICA9IG5ldyBCdXR0b24gJ25ldycsICAgdy0wLjI1Kih3LXNpemUpLCAwLjUwKmgsICh3LXNpemUpLzIsIHNpemVcclxuXHRidXR0b25zLnFyICAgICAgPSBuZXcgSW1hZ2VCdXR0b24gcXIsMC41KncsIDAuNSpoLCBzaXplLCBzaXplXHJcblx0XHJcblx0IyBFZGl0IFBhZ2VcclxuXHRidXR0b25zLnN3YXAgID0gbmV3IEJ1dHRvbiAnc3dhcCcsIDAuMzMqdywgMC45MypoLCAwLjIyKncsIDAuMDgqaFxyXG5cdGJ1dHRvbnMub2sgICAgPSBuZXcgQnV0dG9uICdvaycsICAgMC42Nyp3LCAwLjkzKmgsIDAuMjIqdywgMC4wOCpoXHJcblx0YnV0dG9ucy5yZWQgICA9IG5ldyBDb2xvckJ1dHRvbiAncmVkJywgICB3LzIsIDAuMDMqaFxyXG5cdGJ1dHRvbnMud2hpdGUgPSBuZXcgQ29sb3JCdXR0b24gJ3doaXRlJywgdy8yLCAwLjA5KmhcclxuXHRidXR0b25zLmdyZWVuID0gbmV3IENvbG9yQnV0dG9uICdncmVlbicsIHcvMiwgMC4xNSpoXHJcblx0YnV0dG9ucy5yZWZsZWN0aW9uID0gbmV3IERlYWRCdXR0b24gJ3JlZmxlY3Rpb24nLCAwLjI1KncsIDAuMjEqaFxyXG5cdGJ1dHRvbnMuYm9udXMgPSBuZXcgRGVhZEJ1dHRvbiAnYm9udXMnLCAwLjY2KncsIDAuMjEqaFxyXG5cdGJ1dHRvbnMuaGNwICAgPSBuZXcgRGVhZEJ1dHRvbiAnaGNwJywgMC45Mip3LCAwLjIxKmhcclxuXHJcblx0bWFrZUVkaXRCdXR0b25zKClcclxuXHRjcmVhdGVTdGF0ZSAnQ2xvY2tTdGF0ZScsIENsb2NrU3RhdGVcclxuXHRjcmVhdGVTdGF0ZSAnRWRpdG9yJywgICAgIEVkaXRvclxyXG5cdGN1cnJTdGF0ZSA9IHN0YXRlcy5DbG9ja1N0YXRlXHJcblxyXG5kcmF3ID0gLT5cclxuXHRiYWNrZ3JvdW5kICdibGFjaydcclxuXHJcblx0c3RhdGVzLkNsb2NrU3RhdGUudXBwZGF0ZXJhKClcclxuXHJcblx0Zm9yIGtleSBvZiBjdXJyU3RhdGUudHJhbnNpdGlvbnNcclxuXHRcdHRhcmdldCA9IGN1cnJTdGF0ZS50cmFuc2l0aW9uc1trZXldXHJcblx0XHRpZiBrZXkgb2YgYnV0dG9ucyB0aGVuIGJ1dHRvbnNba2V5XS5kcmF3IHRhcmdldCA9PSB1bmRlZmluZWRcclxuXHRcdGVsc2UgY29uc29sZS5sb2cgJ21pc3NpbmcgYnV0dG9uOicsa2V5XHJcblxyXG5cdCMgZGVidWdcclxuXHJcblx0IyBvcyA9IG5hdmlnYXRvci5hcHBWZXJzaW9uXHJcblx0IyB0ZXh0U2l6ZSAwLjAyNSAqIGhlaWdodFxyXG5cdCMgdGV4dCB3aWR0aCwwLjUqd2lkdGgsMC4wNSpoZWlnaHRcclxuXHQjIHRleHQgaGVpZ2h0LDAuNzUqd2lkdGgsMC4wNSpoZWlnaHRcclxuXHJcblx0IyB0ZXh0IGN1cnJTdGF0ZS5uYW1lLDAuNSp3aWR0aCwwLjAzKmhlaWdodFxyXG5cdCMgZmlsbCAnZ3JlZW4nXHJcblx0IyB0ZXh0IHJvdW5kMyhzdGF0ZXMuRWRpdG9yLmJvbnVzZXNbMF0pLDAuMSp3aWR0aCwwLjAzKmhlaWdodFxyXG5cdCMgdGV4dCByb3VuZDMoc3RhdGVzLkVkaXRvci5jbG9ja3NbMF0pLDAuMjUqd2lkdGgsMC4wMypoZWlnaHRcclxuXHQjIHRleHQgcm91bmQzKHN0YXRlcy5FZGl0b3IuY2xvY2tzWzFdKSwwLjc1KndpZHRoLDAuMDMqaGVpZ2h0XHJcblx0IyB0ZXh0IHJvdW5kMyhzdGF0ZXMuRWRpdG9yLmJvbnVzZXNbMV0pLDAuOSp3aWR0aCwwLjAzKmhlaWdodFxyXG5cclxuXHQjIHRleHQgc3RhdGVzLkNsb2NrU3RhdGUucGF1c2VkLDAuMyp3aWR0aCwwLjAyNSpoZWlnaHRcclxuXHQjIHRleHQgc3RhdGVzLkNsb2NrU3RhdGUucGxheWVyLDAuNyp3aWR0aCwwLjAyNSpoZWlnaHRcclxuXHJcblx0Y3VyclN0YXRlLmRyYXcoKVxyXG5cclxubW91c2VDbGlja2VkID0gLT5cclxuXHRmb3Iga2V5IG9mIGN1cnJTdGF0ZS50cmFuc2l0aW9uc1xyXG5cdFx0aWYgY3VyclN0YXRlLnRyYW5zaXRpb25zW2tleV0gPT0gdW5kZWZpbmVkIHRoZW4gY29udGludWVcclxuXHRcdGNvbnNvbGUubG9nIGtleVxyXG5cdFx0aWYgYnV0dG9uc1trZXldLmluc2lkZSBtb3VzZVgsIG1vdXNlWSBcclxuXHRcdFx0Y3VyclN0YXRlLm1lc3NhZ2Uga2V5XHJcblx0XHRcdGJyZWFrXHJcblxyXG4jIyMgR3JhdmUgeWFyZCAjIyNcclxuIyBjbGFzcyBMZWZ0T3JSaWdodCBleHRlbmRzIFN0YXRlXHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuIyBcdFx0c3VwZXIoKVxyXG4jIFx0XHRAY3JlYXRlVHJhbnMgJ3FyIGxlZnQ9PlJpZ2h0VGlja2luZyByaWdodD0+TGVmdFRpY2tpbmcgcGF1c2U9PlN0YXJ0U3RhdGUnXHJcbiMgXHRkcmF3IDogLT5cclxuIyBcdFx0YnV0dG9ucy5sZWZ0LmZnID0gJ3doaXRlJ1xyXG4jIFx0XHRidXR0b25zLnJpZ2h0LmZnID0gJ3doaXRlJ1xyXG5cclxuIyBjbGFzcyBMZWZ0VGlja2luZyBleHRlbmRzIFN0YXRlXHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuIyBcdFx0c3VwZXIoKVxyXG4jIFx0XHRAY3JlYXRlVHJhbnMgJ3FyIHJpZ2h0IGxlZnQ9PlJpZ2h0VGlja2luZyBwYXVzZT0+TGVmdFBhdXNlZCdcclxuIyBcdGRyYXcgOiAtPlxyXG4jIFx0XHRpZiBub3QgdGltZW91dFswXSB0aGVuIHN0YXRlcy5FZGl0b3IuY2xvY2tzWzBdIC09IDEvNjBcclxuIyBcdFx0aWYgc3RhdGVzLkVkaXRvci5jbG9ja3NbMF0gPD0gMCBcclxuIyBcdFx0XHRzdGF0ZXMuRWRpdG9yLmNsb2Nrc1swXSA9IDBcclxuIyBcdFx0XHR0aW1lb3V0WzBdID0gdHJ1ZVxyXG4jIFx0XHRidXR0b25zLmxlZnQuZmcgPSAnd2hpdGUnXHJcbiMgXHRcdGJ1dHRvbnMucmlnaHQuZmcgPSAnYmxhY2snXHJcbiMgXHRcdHN1cGVyKClcclxuIyBcdG1lc3NhZ2UgOiAoa2V5KSAtPlxyXG4jIFx0XHRpZiBrZXkgPT0gJ2xlZnQnXHJcbiMgXHRcdFx0aWYgbm90IHRpbWVvdXRbMF1cclxuIyBcdFx0XHRcdHN0YXRlcy5FZGl0b3IuY2xvY2tzWzBdICs9IHN0YXRlcy5FZGl0b3IuYm9udXNlc1swXVxyXG4jIFx0XHRcdGJ1dHRvbnMubGVmdC5mZyA9ICd3aGl0ZSdcclxuIyBcdFx0XHRidXR0b25zLnJpZ2h0LmZnID0gJ2JsYWNrJ1xyXG4jIFx0XHRzdXBlciBrZXlcclxuXHJcbiMgY2xhc3MgUmlnaHRUaWNraW5nIGV4dGVuZHMgU3RhdGVcclxuIyBcdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG4jIFx0XHRzdXBlcigpXHJcbiMgXHRcdEBjcmVhdGVUcmFucyAncXIgbGVmdCByaWdodD0+TGVmdFRpY2tpbmcgcGF1c2U9PlJpZ2h0UGF1c2VkJ1xyXG4jIFx0ZHJhdyA6IC0+XHJcbiMgXHRcdGlmIG5vdCB0aW1lb3V0WzFdIHRoZW4gc3RhdGVzLkVkaXRvci5jbG9ja3NbMV0gLT0gMS82MFxyXG4jIFx0XHRpZiBzdGF0ZXMuRWRpdG9yLmNsb2Nrc1sxXSA8PSAwIFxyXG4jIFx0XHRcdHN0YXRlcy5FZGl0b3IuY2xvY2tzWzFdID0gMFxyXG4jIFx0XHRcdHRpbWVvdXRbMV0gPSB0cnVlXHJcbiMgXHRcdGJ1dHRvbnMubGVmdC5mZyA9ICdibGFjaydcclxuIyBcdFx0YnV0dG9ucy5yaWdodC5mZyA9ICd3aGl0ZSdcclxuIyBcdFx0c3VwZXIoKVxyXG4jIFx0bWVzc2FnZSA6IChrZXkpIC0+XHJcbiMgXHRcdGlmIGtleSA9PSAncmlnaHQnXHJcbiMgXHRcdFx0aWYgbm90IHRpbWVvdXRbMV1cclxuIyBcdFx0XHRcdHN0YXRlcy5FZGl0b3IuY2xvY2tzWzFdICs9IHN0YXRlcy5FZGl0b3IuYm9udXNlc1sxXVxyXG4jIFx0XHRcdGJ1dHRvbnMubGVmdC5mZyA9ICdibGFjaydcclxuIyBcdFx0XHRidXR0b25zLnJpZ2h0LmZnID0gJ3doaXRlJ1xyXG4jIFx0XHRzdXBlciBrZXlcclxuXHJcbiMgY2xhc3MgTGVmdFBhdXNlZCBleHRlbmRzIFN0YXRlXHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuIyBcdFx0c3VwZXIoKVxyXG4jIFx0XHRAY3JlYXRlVHJhbnMgJ3FyIGxlZnQgcmlnaHQgcGxheT0+TGVmdFRpY2tpbmcgbmV3PT5FZGl0b3InXHJcblxyXG4jIGNsYXNzIFJpZ2h0UGF1c2VkIGV4dGVuZHMgU3RhdGVcclxuIyBcdGNvbnN0cnVjdG9yIDogKEBuYW1lKSAtPlxyXG4jIFx0XHRzdXBlcigpXHJcbiMgXHRcdEBjcmVhdGVUcmFucyAncXIgbGVmdCByaWdodCBwbGF5PT5SaWdodFRpY2tpbmcgbmV3PT5FZGl0b3InXHJcblxyXG4jIGNsYXNzIFdlbGNvbWVTdGF0ZSBleHRlbmRzIFN0YXRlXHJcbiMgXHRjb25zdHJ1Y3RvciA6IChAbmFtZSkgLT5cclxuIyBcdFx0c3VwZXIoKVxyXG4jIFx0XHRAY3JlYXRlVHJhbnMgJ3dlbGNvbWU9PlN0YXJ0U3RhdGUnXHJcbiMgXHRtZXNzYWdlIDogKGtleSkgLT5cclxuIyBcdFx0aWYga2V5ID09ICd3ZWxjb21lJ1xyXG4jIFx0XHRcdG9zID0gbmF2aWdhdG9yLmFwcFZlcnNpb25cclxuIyBcdFx0XHRvayA9IG9zLmluZGV4T2YoJ0xpbnV4JykgPj0gMCBcclxuIyBcdFx0XHRjb25zb2xlLmxvZyBva1xyXG4jIFx0XHRcdCNpZiBvayB0aGVuIHRvZ2dsZUZ1bGxTY3JlZW4oKVxyXG4jIFx0XHRzdXBlciBrZXlcclxuXHJcbiJdfQ==
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee