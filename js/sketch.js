// Generated by CoffeeScript 2.5.1
  // TODO
  // Försämring av frameRate inträffar om man går från fullscreen till normal på Android

// Istället för sekunder är nu normalformen tertier, 60-dels sekunder
var C960, CAdv, CCogwheel, CColor, CDead, CImage, CNumber, CPause, CRotate, CRounded, CSettings, CShow, Control, FRAMERATE, HEARTBEAT, HOUR, MINUTE, S960, SAdv, SBasic, SClock, SEC, State, TOGGLE, backup, cancel, chess, clone, createState, currState, d2, diag, draw, getLocalCoords, handicap, handlePlayer, lastStorageSave, minutes, mousePressed, mst, number960, ok, os, preload, pretty, prettyPair, qr, rates, seconds, settings, setup, sound, states, sumRate, touchStarted, windowResized,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
  boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

HOUR = 60 * 60 * 60; // tertier

MINUTE = 60 * 60; // tertier

SEC = 60; // tertier

TOGGLE = 1; // 0=porträtt (Android) 1=landskap (Mac)

HEARTBEAT = 1000; // ms updates of localStorage

FRAMERATE = 60; // 10

settings = {};

minutes = new CBits([1, 2, 4, 8, 15, 30, 60]);

seconds = new CBits([1, 2, 4, 8, 15, 30, 60]);

handicap = new CBits([1, 2, 4, 8, 15, 30]);

number960 = new CBits([1, 2, 4, 8, 15, 30, 60, 120, 240, 480]);

backup = null;

states = {};

qr = null;

chess = {};

currState = null;

os = '';

sound = null;

lastStorageSave = new Date();

rates = [];

sumRate = 0;

diag = 0;

getLocalCoords = function() {
  var matrix, pd;
  matrix = drawingContext.getTransform();
  pd = pixelDensity();
  return matrix.inverse().transformPoint(new DOMPoint(mouseX * pd, mouseY * pd));
};

createState = function(key, klass) {
  return states[key] = new klass(key);
};

pretty = function(tot) {
  var header, m, s, t;
  tot = Math.round(tot);
  t = modulo(tot, 60);
  tot = Math.floor(tot / 60);
  s = modulo(tot, 60);
  m = Math.floor(tot / 60);
  header = '';
  if (m > 0) {
    header += m + 'm';
  }
  if (s > 0) {
    header += s + 's';
  }
  if (t > 0) {
    header += t + 't';
  }
  return header;
};

assert('1m1t', pretty(3601));

assert('2s3t', pretty(123));

assert('60m30s', pretty(60 * 60 * 60 + 30 * 60));

prettyPair = function(a, b) {
  var separator;
  separator = pretty(b) !== '' ? ' + ' : '';
  return pretty(a) + separator + pretty(b);
};

assert('1m1t + 2s3t', prettyPair(3601, 123));

d2 = function(x) {
  x = Math.trunc(x);
  if (x < 10) {
    return '0' + x;
  } else {
    return x;
  }
};

assert('03', d2(3));

mst = function(x) { // tertier
  var m, orig, s, t;
  orig = x;
  t = modulo(x, 60);
  x = Math.floor(x / 60);
  s = modulo(x, 60);
  m = Math.floor(x / 60);
  return [m, s, t];
};

assert([3, 0, 0], mst(3 * 60 * 60));

assert([3, 0, 30], mst(180 * 60 + 30));

clone = function(x) {
  return JSON.parse(JSON.stringify(x));
};

cancel = () => {
  settings.cancel();
  return currState = states.SClock;
};

ok = () => {
  settings.ok();
  return currState = states.SClock;
};

CSettings = class CSettings {
  constructor() {
    console.log(localStorage.settings ? "load" : "default");
    if (localStorage.settings) {
      Object.assign(this, JSON.parse(localStorage.settings));
    }
    this.minutes || (this.minutes = 3);
    this.seconds || (this.seconds = 2);
    this.handicap || (this.handicap = 0);
    this.number960 || (this.number960 = 518);
    this.chess960 || (this.chess960 = 'RNBQKBNR');
    this.show || (this.show = '3 + 2');
    this.clocks || (this.clocks = [
      180 * 60,
      180 * 60 // tertier
    ]);
    this.bonuses || (this.bonuses = [
      2 * 60,
      2 * 60 // tertier
    ]);
    this.player || (this.player = -1);
    this.timeout || (this.timeout = false);
    this.paused = true;
    minutes.setNr(this.minutes);
    seconds.setNr(this.seconds);
    handicap.setNr(this.handicap);
    number960.setNr(this.number960);
    console.log(minutes, seconds, handicap, number960);
    this.makeHandicap();
    this.save();
  }

  tick() {
    var c;
    if (this.paused) {
      return;
    }
    c = this.clocks[this.player];
    if (c > 0) {
      c -= 60 / frameRate();
    }
    if (c <= 0) {
      c = 0;
      this.timeout = true;
      this.paused = true;
    }
    return this.clocks[this.player] = c;
  }

  save() {
    var d;
    d = new Date();
    if (d - lastStorageSave < HEARTBEAT) { // ms
      return;
    }
    lastStorageSave = d;
    this.minutes = minutes.nr;
    this.seconds = seconds.nr;
    this.handicap = handicap.nr;
    this.number960 = number960.nr;
    return localStorage.settings = JSON.stringify(this);
  }

  compact() {
    var header, header0, header1;
    header0 = '';
    header1 = '';
    if (minutes.nr > 0) {
      header0 += minutes.nr;
    }
    if (seconds.nr > 0) {
      header1 += seconds.nr;
    }
    header = header0;
    if (header1.length > 0) {
      header += '+' + header1;
    }
    if (handicap.nr > 0) {
      header += `\n(${handicap.nr})`;
    }
    return header;
  }

  makeHandicap() {
    var bonus, hcp, refl;
    hcp = handicap.nr / 60; // 0/60 to 59/60
    refl = MINUTE * minutes.nr; // tertier
    bonus = SEC * seconds.nr; // tertier
    this.players = [];
    this.players[0] = [refl + refl * hcp, bonus + bonus * hcp];
    return this.players[1] = [refl - refl * hcp, bonus - bonus * hcp];
  }

  ok() {
    console.log('settings.ok');
    this.makeHandicap();
    this.clocks = [this.players[0][0], this.players[1][0]];
    this.bonuses = [this.players[0][1], this.players[1][1]];
    this.timeout = false;
    this.paused = true;
    return this.player = -1;
  }

  cancel() {
    Object.assign(this, backup);
    return this.paused = true;
  }

};

Control = class Control {
  constructor(x1, y1, w1, h1, text1 = '', bg1 = 'black', fg1 = 'white') {
    this.x = x1;
    this.y = y1;
    this.w = w1;
    this.h = h1;
    this.text = text1;
    this.bg = bg1;
    this.fg = fg1;
    this.visible = true;
  }

  // @x = Math.round @x
  // @y = Math.round @y
  // @w = Math.round @w
  // @h = Math.round @h
  draw() {
    return console.log('Control.draw must be overriden!');
  }

  inside(x, y) {
    var ref, ref1, w;
    w = this.w * [height / width, width / height][1 - TOGGLE];
    return (-w / 2 <= (ref = x - this.x) && ref <= w / 2) && (-this.h / 2 <= (ref1 = y - this.y) && ref1 <= this.h / 2);
  }

};

CNumber = class CNumber extends Control {
  constructor(x, y, reader1) {
    super(x, y, 0, 0);
    this.reader = reader1;
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
  }

  draw() {
    push();
    textSize(8);
    fill('white');
    text(this.reader(), this.x, this.y);
    return pop();
  }

};

C960 = class C960 extends Control {
  constructor(x, y, w, h) {
    super(x, y, w, h);
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.w = Math.round(this.w);
    this.h = Math.round(this.h);
    this.visible = true;
  }

  draw() {
    var dx, i, k, len, ref, results, w, xoff;
    if (this.visible) {
      dx = 12;
      w = this.h * [height / width, width / height][TOGGLE];
      xoff = this.x + (dx - w) / 2;
      ref = range(8);
      results = [];
      for (k = 0, len = ref.length; k < len; k++) {
        i = ref[k];
        results.push(image(chess[settings.chess960[i]], xoff + (i - 4) * dx, this.y + 8, w, this.h));
      }
      return results;
    }
  }

};

CRounded = class CRounded extends Control {
  constructor(x, y, w, h, text = '', disabled = false, bg = 'white', fg = 'black', clicker1 = null) {
    super(x, y, w, h, text, bg, fg);
    this.click = this.click.bind(this);
    this.disabled = disabled;
    this.clicker = clicker1;
  }

  draw() {
    if (this.visible) {
      push();
      fill(this.disabled ? "black" : this.bg);
      rect(this.x, this.y, this.w, this.h, this.h / 2);
      textSize(4);
      fill(this.disabled ? "white" : this.fg);
      text(this.text, this.x, this.y);
      return pop();
    }
  }

  click() {
    boundMethodCheck(this, CRounded);
    if (this.clicker) {
      return this.clicker();
    }
  }

};

CPause = class CPause extends Control {
  constructor(x, y, w = 0, h = 0, bg1 = 'black', fg1 = 'white', clicker1) {
    super(x, y, w, h);
    this.click = this.click.bind(this);
    this.bg = bg1;
    this.fg = fg1;
    this.clicker = clicker1;
  }

  click() {
    boundMethodCheck(this, CPause);
    return this.clicker();
  }

  draw() {
    if (!settings.paused) {
      fill(this.fg);
      rect(this.x - 1.75, this.y, 3, 6);
      return rect(this.x + 1.75, this.y, 3, 6);
    }
  }

};

CCogwheel = class CCogwheel extends Control { // Kugghjul
  constructor(x, y, w = 0, h = 0, bg1 = 'black', fg1 = 'white', clicker1) {
    super(x, y, w, h);
    this.click = this.click.bind(this);
    this.bg = bg1;
    this.fg = fg1;
    this.clicker = clicker1;
  }

  click() {
    boundMethodCheck(this, CCogwheel);
    return this.clicker();
  }

  draw() {
    var k, len, ref, v;
    if (settings.paused) {
      push();
      translate(this.x, this.y);
      scale([height / width, width / height][TOGGLE], 1);
      fill(this.fg);
      circle(0, 0, 6);
      fill(this.bg);
      circle(0, 0, 3);
      fill(this.fg);
      ref = range(0, 360, 45);
      for (k = 0, len = ref.length; k < len; k++) {
        v = ref[k];
        push();
        rotate(v);
        translate(3, 0);
        stroke(this.fg);
        rect(0, 0, 1, 1);
        pop();
      }
      return pop();
    }
  }

};

CImage = class CImage extends Control {
  constructor(x, y, w, h, image1, clicker1) {
    super(x, y, w, h);
    this.click = this.click.bind(this);
    this.image = image1;
    this.clicker = clicker1;
  }

  click() {
    boundMethodCheck(this, CImage);
    return this.clicker();
  }

  draw() {
    var w;
    if (this.image) {
      w = this.h * [height / width, width / height][TOGGLE];
      return image(this.image, this.x - w / 2, 0.075 + this.y - this.h / 2, w, this.h);
    }
  }

};

CRotate = class CRotate extends Control {
  constructor(x, y, w, h, degrees, bg, fg, player2, clicker1) {
    super(x, y, w, h, '', bg, fg);
    this.click = this.click.bind(this);
    this.degrees = degrees;
    this.player = player2;
    this.clicker = clicker1;
  }

  click() {
    boundMethodCheck(this, CRotate);
    return this.clicker();
  }

  draw() {
    var m, minCol, mw, s, secCol, ss, sw, t, tertier;
    tertier = settings.clocks[this.player];
    [m, s, t] = mst(tertier);
    t = Math.round(t);
    ss = m + ':' + d2(s);
    noStroke();
    push();
    translate(this.x, this.y);
    rotate(this.degrees);
    if (settings.player === this.player) {
      minCol = 'red';
      secCol = settings.timeout ? 'red' : 'white';
    } else {
      minCol = 'lightgrey';
      secCol = 'grey';
    }
    textSize(18 + 9);
    mw = textWidth(m);
    sw = textWidth(d2(2));
    fill(minCol);
    text(m, -sw / 2, -2);
    fill(secCol);
    text(d2(s), mw / 2, -2);
    textSize(10);
    if (tertier < 10 * 60) {
      text(t, 36, -4);
    }
    if (handicap.nr > 0 && settings.bonuses[this.player] > 0) {
      textSize(8);
      fill('grey');
      text('+' + pretty(settings.bonuses[this.player]), 0, 17);
    }
    return pop();
  }

};

CAdv = class CAdv extends Control {
  constructor(bits1, index1, x, y, diam, text, flipper, read, clk) {
    super(x, y, diam, diam, text, 'black');
    this.bits = bits1;
    this.index = index1;
    this.flipper = flipper;
    this.read = read;
    this.clk = clk;
    this.visible = true;
  }

  draw() {
    var s;
    push();
    translate(this.x, this.y);
    if (this.flipper) {
      fill(1 === this.reader() ? 'yellow' : 'gray');
    } else {
      fill('gray');
    }
    s = [height / width, width / height][TOGGLE];
    ellipse(0, 0, this.w * s, this.h);
    fill('black');
    textSize(5);
    text(this.text, 0, 0.2);
    return pop();
  }

  inside(x, y) {
    var h, ref, ref1, s, w;
    s = [height / width, width / height][TOGGLE];
    w = this.w * s;
    h = this.h;
    return (-w / 2 <= (ref = x - this.x) && ref <= w / 2) && (-h / 2 <= (ref1 = y - this.y) && ref1 <= h / 2);
  }

  reader() {
    if (this.flipper) {
      return this.read(this.bits, this.index);
    } else {
      return this.read(this.bits, this.text);
    }
  }

  click() {
    if (this.flipper) {
      return this.clk(this.bits, this.index);
    } else {
      return this.clk(this.bits, this.text);
    }
  }

};

CDead = class CDead extends Control {
  constructor(x, y, text, fg = 'white') {
    super(x, y, 0, 0, text, 'black', fg);
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.text, this.x, this.y);
    return pop();
  }

};

CShow = class CShow extends CDead {
  constructor(x, y, fg = 'white') {
    super(x, y, '', fg);
  }

  draw() {
    push();
    translate(this.x, this.y);
    rotate(-90);
    this.text = settings.show;
    fill('white');
    textSize(5);
    text(settings.show, 0, 0);
    //super()
    return pop();
  }

};

CColor = class CColor extends Control {
  constructor(x, y, fg1, reader1) {
    super(x, y, 0, 0);
    this.fg = fg1;
    this.reader = reader1;
  }

  draw() {
    push();
    textSize(4);
    fill(this.fg);
    text(this.reader(), this.x, this.y);
    return pop();
  }

};

State = class State {
  constructor(name1) {
    this.draw = this.draw.bind(this);
    this.name = name1;
    this.controls = {};
  }

  draw(key) {
    var results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw(key));
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

handlePlayer = function(player) {
  if (settings.timeout) {
    return;
  }
  if (settings.paused) {
    sound.play();
  } else if (settings.player === -1) {
    sound.play();
  } else if (settings.player === player) {
    sound.play();
    settings.clocks[player] += settings.bonuses[player];
  }
  settings.paused = false;
  return settings.player = 1 - player;
};

SClock = class SClock extends State {
  constructor(name) {
    var handleQR, pause, player0, player1;
    super(name);
    this.draw = this.draw.bind(this);
    player0 = () => {
      if (settings.timeout) {

      } else {
        return handlePlayer(0);
      }
    };
    player1 = () => {
      if (settings.timeout) {

      } else {
        return handlePlayer(1);
      }
    };
    pause = () => {
      return settings.paused = true;
    };
    handleQR = () => {
      fullscreen(true);
      return resizeCanvas(innerWidth, innerHeight);
    };
    this.controls.left = new CRotate(50, 22, 100, 44, 180, 'black', 'white', 0, player0); // eg up
    this.controls.right = new CRotate(50, 78, 100, 44, 0, 'black', 'white', 1, player1); // eg down
    this.controls.pause = new CPause(67, 50, 17, 12, 'black', 'white', pause);
    this.controls.qr = new CImage(50, 50, 33, 12, qr, handleQR);
    this.controls.basic = new CCogwheel(83, 50, 17, 12, 'black', 'white', () => {
      return currState = states.SBasic;
    });
    this.controls.show = new CShow(22, 50, 'white');
  }

  indicator() {
    var a, andel, b;
    a = settings.clocks[0];
    b = settings.clocks[1];
    andel = 100 * a / (a + b);
    push();
    strokeWeight(1);
    stroke('white');
    line(1, andel, 10, andel);
    line(90, andel, 99, andel);
    return pop();
  }

  draw() {
    boundMethodCheck(this, SClock);
    super.draw();
    return this.indicator();
  }

};

SBasic = class SBasic extends State {
  constructor(name) {
    var M, clicker, diam, i, k, l, len, len1, len2, n, reader, ref, ref1, ref2, s, x, y;
    super(name);
    reader = (bits, text) => {
      return bits.nr;
    };
    clicker = (bits, text) => {
      return bits.nr = text;
    };
    x = [100 / 3, 200 / 3];
    y = [32, 41, 50, 59, 68, 77, 86, 95];
    diam = 8;
    this.controls.orange = states.SAdv.controls.orange;
    this.controls.white = states.SAdv.controls.white;
    this.controls.green = states.SAdv.controls.green;
    this.controls.reflection = new CDead(x[0], 20, 'reflection');
    this.controls.bonus = new CDead(x[1], 20, 'bonus');
    this.controls.M = new CDead(x[0], 25, 'minutes');
    this.controls.s = new CDead(x[1], 25, 'seconds');
    ref = range(5);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      M = [1, 2, 3, 5, 10][i];
      this.controls['M' + M] = new CAdv(minutes, i, x[0] - 10, y[i], diam, M, false, reader, clicker);
    }
    ref1 = range(6);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      M = [15, 20, 30, 45, 60, 90][i];
      this.controls['M' + M] = new CAdv(minutes, i, x[0] + 10, y[i], diam, M, false, reader, clicker);
    }
    ref2 = range(7);
    for (n = 0, len2 = ref2.length; n < len2; n++) {
      i = ref2[n];
      s = [0, 1, 2, 3, 5, 10, 30][i];
      this.controls['s' + s] = new CAdv(seconds, i, x[1], y[i], diam, s, false, reader, clicker);
    }
    this.controls.basic = new CRounded(1 * 100 / 10, y[7], 18, 6, 'basic', true, 'white', 'black');
    this.controls.adv = new CRounded(3 * 100 / 10, y[7], 18, 6, 'adv', false, 'white', 'black', () => {
      return currState = states.SAdv;
    });
    this.controls.b960 = new CRounded(5 * 100 / 10, y[7], 18, 6, '960', false, 'white', 'black', () => {
      return currState = states.S960;
    });
    this.controls.cancel = new CRounded(7 * 100 / 10, y[7], 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(9 * 100 / 10, y[7], 18, 6, 'ok', false, 'white', 'black', ok);
  }

};

SAdv = class SAdv extends State {
  constructor(name) {
    var getGreen, getOrange, getWhite, y;
    super(name);
    getOrange = function() {
      var sp;
      settings.makeHandicap();
      sp = settings.players;
      if (handicap.nr === 0) {
        return '';
      } else {
        return prettyPair(sp[0][0], sp[0][1]);
      }
    };
    getWhite = function() {
      return settings.compact();
    };
    getGreen = function() {
      var sp;
      settings.makeHandicap();
      sp = settings.players;
      if (handicap.nr === 0) {
        return '';
      } else {
        return prettyPair(sp[1][0], sp[1][1]);
      }
    };
    this.controls.orange = new CColor(50, 2.5, 'orange', getOrange);
    this.controls.white = new CColor(50, 9.5, 'white', getWhite);
    this.controls.green = new CColor(50, 16.5, 'green', getGreen);
    this.controls.reflection = new CDead(25, 21, 'reflection');
    this.controls.bonus = new CDead(50, 21, 'bonus');
    this.controls.hcp = new CDead(75, 21, 'handicap');
    y = 95;
    this.controls.basic = new CRounded(1 * 100 / 10, y, 18, 6, 'basic', false, 'white', 'black', () => {
      return currState = states.SBasic;
    });
    this.controls.adv = new CRounded(3 * 100 / 10, y, 18, 6, 'adv', true, 'white', 'black');
    this.controls.b960 = new CRounded(5 * 100 / 10, y, 18, 6, '960', false, 'white', 'black', () => {
      return currState = states.S960;
    });
    this.controls.cancel = new CRounded(7 * 100 / 10, y, 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(9 * 100 / 10, y, 18, 6, 'ok', false, 'white', 'black', ok);
    this.makeEditButtons();
  }

  makeEditButtons() {
    var clicker, diam, i, j, k, len, letter, name, number, reader, ref, results, xoff, xsize, yoff, ysize;
    reader = (bits, index) => {
      return bits.pattern[index];
    };
    clicker = (bits, index) => {
      bits.flipBit(index);
      return this.controls.ok.visible = minutes.nr > 0 && handicap.nr < 60;
    };
    ref = range(3);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'Mst'[i];
      xsize = 100 / 4;
      ysize = 100 / 12;
      xoff = xsize;
      yoff = 33 + 2;
      diam = 7;
      this.controls[letter] = new CDead(xoff + xsize * i, 26 + 1, 'minutes seconds tertier'.split(' ')[i]);
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(7);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30, 60][j];
          name = letter + number;
          if (i !== 2 || j !== 6) {
            results1.push(this.controls[name] = new CAdv([minutes, seconds, handicap][i], j, xoff + xsize * i, yoff + ysize * j, diam, number, true, reader, clicker));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  }

};

S960 = class S960 extends State {
  constructor(name) {
    var click960, diam, i, k, key, len, number, random960, reader960, ref, x, xi, y, yi;
    super(name);
    reader960 = (bits, index) => {
      return bits.pattern[index];
    };
    click960 = (bits, index) => {
      bits.flipBit(index);
      return settings.chess960 = chess960(number960.nr);
    };
    random960 = function() {
      var nr;
      nr = _.random(0, 959);
      number960.setNr(nr);
      return settings.chess960 = chess960(nr);
    };
    x = [100 / 4, 200 / 4, 300 / 4];
    y = [-5, 40, 52, 64, 76, 78, 90, 95];
    diam = 10;
    this.controls.C960 = new C960(50, y[0], 100, 10);
    this.controls.CNumber = new CNumber(50, 25, function() {
      return number960.nr;
    });
    ref = range(number960.lst.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      number = number960.lst[i];
      key = 'R' + number;
      xi = [0, 0, 0, 0, 1, 1, 1, 2, 2, 2][i];
      yi = [1, 2, 3, 4, 1, 2, 3, 1, 2, 3][i];
      this.controls[key] = new CAdv(number960, i, x[xi], y[yi], diam, number, true, reader960, click960);
    }
    this.controls.random = new CRounded((x[1] + x[2]) / 2, y[4], 18, 6, 'random', false, 'white', 'black', random960);
    this.controls.basic = new CRounded(10, y[7], 18, 6, 'basic', false, 'white', 'black', () => {
      return currState = states.SBasic;
    });
    this.controls.adv = new CRounded(30, y[7], 18, 6, 'adv', false, 'white', 'black', () => {
      return currState = states.SAdv;
    });
    this.controls.b960 = new CRounded(50, y[7], 18, 6, '960', true, 'white', 'black');
    this.controls.cancel = new CRounded(70, y[7], 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(90, y[7], 18, 6, 'ok', false, 'white', 'black', ok);
  }

};

//##################################
preload = function() {
  var k, len, ltr, ref, results;
  qr = loadImage('qr.png');
  sound = loadSound('key.mp3');
  ref = "KQRBN";
  results = [];
  for (k = 0, len = ref.length; k < len; k++) {
    ltr = ref[k];
    results.push(chess[ltr] = loadImage(`chess\\${ltr}.png`));
  }
  return results;
};

windowResized = function() {
  resizeCanvas(innerWidth, innerHeight);
  return diag = sqrt(width * width + height * height);
};

setup = function() {
  var canvas;
  settings = new CSettings();
  frameRate(FRAMERATE);
  os = navigator.appVersion;
  if (os.indexOf('Linux') >= 0) {
    os = 'Android';
  }
  if (os.indexOf('Windows') >= 0) {
    os = 'Windows';
  }
  if (os.indexOf('Mac') >= 0) {
    os = 'Mac';
  }
  canvas = createCanvas(innerWidth, innerHeight);
  bodyScrollLock.disableBodyScroll(canvas); // Förhindrar att man kan scrolla canvas på iOS
  if (os === 'Android') {
    textFont('Droid Sans');
  }
  if (os === 'Mac') {
    textFont('Verdana');
  }
  if (os === 'Windows') {
    textFont('Lucida Sans Unicode');
  }
  TOGGLE = os === 'Mac' ? 1 : 0;
  diag = sqrt(width * width + height * height);
  background('black');
  textAlign(CENTER, CENTER);
  rectMode(CENTER);
  angleMode(DEGREES);
  createState('SClock', SClock);
  createState('SAdv', SAdv);
  createState('SBasic', SBasic);
  createState('S960', S960);
  return currState = states.SClock;
};

mousePressed = function() {
  if (os === 'Windows') {
    return currState.mouseClicked();
  }
};

touchStarted = function() {
  if (os !== 'Windows') {
    return currState.mouseClicked();
  }
};

draw = function() {
  var aspect;
  if (TOGGLE === 0) {
    scale(width / 100, height / 100); // portrait
  } else {
    rotate(90);
    translate(0, -width);
    scale(height / 100, width / 100); // Landscape
  }
  strokeWeight(100 / height);
  push();
  background('black');
  settings.tick();
  currState.draw();
  pop();
  settings.save();
  return aspect = function(w, h, y) {
    if (w < h) {
      [w, h] = [h, w];
    }
    return text(`${w} ${(w / h).toFixed(3)} ${h}`, 50, y);
  };
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\sketch.coffee