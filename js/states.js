// Generated by CoffeeScript 2.5.1
var cancel, handlePlayer, ok;

import {
  globals,
  getLocalCoords,
  getOrange,
  getWhite,
  getGreen
} from './globals.js';

import {
  chess960
} from './chess960.js';

import {
  CRotate,
  CPause,
  CImage,
  CCogwheel,
  CShow,
  CColor,
  CDead,
  CRounded,
  CAdv,
  C960,
  CNumber
} from './controls.js';

export var State = class State {
  constructor(name1) {
    this.name = name1;
    this.controls = {};
  }

  draw() {
    var key, results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw());
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, x, y;
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

handlePlayer = function(player) {
  var g, gs;
  g = globals;
  gs = g.settings;
  if (gs.timeout) {
    return;
  }
  if (gs.paused) {
    globals.sound.play();
  } else if (gs.player === -1) {
    globals.sound.play();
  } else if (gs.player === player) {
    globals.sound.play();
    gs.clocks[player] += gs.bonuses[player];
  }
  gs.paused = false;
  return gs.player = 1 - player;
};

export var SClock = class SClock extends State {
  constructor(name) {
    var handleQR, pause, player0, player1;
    super(name);
    player0 = () => {
      if (globals.settings.timeout) {

      } else {
        return handlePlayer(0);
      }
    };
    player1 = () => {
      if (globals.settings.timeout) {

      } else {
        return handlePlayer(1);
      }
    };
    pause = () => {
      return globals.settings.paused = true;
    };
    handleQR = () => {
      fullscreen(true);
      return resizeCanvas(innerWidth, innerHeight);
    };
    this.controls.left = new CRotate(50, 22, 100, 44, 180, 'black', 'white', 0, player0); // eg up
    this.controls.right = new CRotate(50, 78, 100, 44, 0, 'black', 'white', 1, player1); // eg down
    this.controls.pause = new CPause(67, 50, 17, 12, 'black', 'white', pause);
    this.controls.qr = new CImage(50, 50, 33, 12, globals.qr, handleQR);
    this.controls.basic = new CCogwheel(83, 50, 17, 12, 'black', 'white', () => {
      globals.settings.backup();
      return globals.currState = globals.states.SBasic;
    });
    this.controls.show = new CShow(22, 50, 'white');
  }

  indicator() {
    var a, andel, b;
    a = globals.settings.clocks[0];
    b = globals.settings.clocks[1];
    andel = 100 * a / (a + b);
    push();
    strokeWeight(1);
    stroke('white');
    line(1, andel, 10, andel);
    line(90, andel, 99, andel);
    return pop();
  }

  draw() {
    super.draw();
    return this.indicator();
  }

};

cancel = () => {
  globals.settings.cancel();
  return globals.currState = globals.states.SClock;
};

ok = () => {
  globals.settings.ok();
  return globals.currState = globals.states.SClock;
};

export var SBasic = class SBasic extends State {
  constructor(name) {
    var M, clicker, diam, gbm, gbs, i, k, l, len, len1, len2, m, reader, ref, ref1, ref2, s, x, y;
    super(name);
    reader = (bitar, text) => {
      return bitar.nr;
    };
    clicker = (bitar, text) => {
      var g, gb, gs, gsi;
      bitar.setNr(text);
      g = globals;
      gb = g.bits;
      gs = g.settings;
      gsi = gs.info;
      gsi.orange = getOrange();
      gsi.white = getWhite();
      gsi.green = getGreen();
      return this.controls.ok.visible = gb.minutes.nr > 0 && gb.handicap.nr < 60;
    };
    x = [100 / 3, 80];
    y = [32, 41, 50, 59, 68, 77, 86, 95];
    diam = 8;
    this.controls.orange = new CColor(50, 2.5, 'orange');
    this.controls.white = new CColor(50, 9.5, 'white');
    this.controls.green = new CColor(50, 16.5, 'green');
    this.controls.reflection = new CDead(x[0], 23, "reflection\nminutes");
    this.controls.bonus = new CDead(x[1], 23, "bonus\nseconds");
    gbm = globals.bits.minutes;
    ref = range(5);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      M = [1, 2, 3, 5, 10][i];
      this.controls['M' + M] = new CAdv(gbm, i, x[0] - 10, y[i], diam, M, false, reader, clicker);
    }
    ref1 = range(6);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      M = [15, 20, 30, 45, 60, 90][i];
      this.controls['M' + M] = new CAdv(gbm, i, x[0] + 10, y[i], diam, M, false, reader, clicker);
    }
    gbs = globals.bits.seconds;
    ref2 = range(7);
    for (m = 0, len2 = ref2.length; m < len2; m++) {
      i = ref2[m];
      s = [0, 1, 2, 3, 5, 10, 30][i];
      this.controls['s' + s] = new CAdv(gbs, i, x[1], y[i], diam, s, false, reader, clicker);
    }
    this.controls.basic = new CRounded(1 * 100 / 10, y[7], 18, 6, 'basic', true, 'white', 'black');
    this.controls.adv = new CRounded(3 * 100 / 10, y[7], 18, 6, 'adv', false, 'white', 'black', () => {
      return globals.currState = globals.states.SAdv;
    });
    this.controls.b960 = new CRounded(5 * 100 / 10, y[7], 18, 6, '960', false, 'white', 'black', () => {
      return globals.currState = globals.states.S960;
    });
    this.controls.cancel = new CRounded(7 * 100 / 10, y[7], 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(9 * 100 / 10, y[7], 18, 6, 'ok', false, 'white', 'black', ok);
  }

};

export var SAdv = class SAdv extends State {
  constructor(name) {
    var y;
    super(name);
    this.controls.orange = new CColor(50, 2.5, 'orange');
    this.controls.white = new CColor(50, 9.5, 'white');
    this.controls.green = new CColor(50, 16.5, 'green');
    this.controls.reflection = new CDead(25, 25, "reflection\nminutes");
    this.controls.bonus = new CDead(50, 25, "bonus\nseconds");
    this.controls.hcp = new CDead(75, 25, "handicap\ntertier");
    y = 95;
    this.controls.basic = new CRounded(1 * 100 / 10, y, 18, 6, 'basic', false, 'white', 'black', () => {
      return globals.currState = globals.states.SBasic;
    });
    this.controls.adv = new CRounded(3 * 100 / 10, y, 18, 6, 'adv', true, 'white', 'black');
    this.controls.b960 = new CRounded(5 * 100 / 10, y, 18, 6, '960', false, 'white', 'black', () => {
      return globals.currState = globals.states.S960;
    });
    this.controls.cancel = new CRounded(7 * 100 / 10, y, 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(9 * 100 / 10, y, 18, 6, 'ok', false, 'white', 'black', ok);
    this.makeEditButtons();
  }

  makeEditButtons() {
    var clicker, diam, gb, i, j, k, len, letter, name, number, reader, ref, results, xoff, xsize, yoff, ysize;
    reader = (bits, index) => {
      return bits.pattern[index];
    };
    clicker = (bitar, index) => {
      var g, gs, gsi;
      bitar.flipBit(index);
      g = globals;
      gs = g.settings;
      gsi = gs.info;
      gsi.orange = getOrange();
      gsi.white = getWhite();
      gsi.green = getGreen();
      return this.controls.ok.visible = g.bits.minutes.nr > 0 && g.bits.handicap.nr < 60;
    };
    ref = range(3);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'Mst'[i];
      xsize = 100 / 4;
      ysize = 100 / 12;
      xoff = xsize;
      yoff = 35;
      diam = 7;
      gb = globals.bits;
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(7);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = [1, 2, 4, 8, 15, 30, 60][j];
          name = letter + number;
          if (i !== 2 || j !== 6) {
            results1.push(this.controls[name] = new CAdv([gb.minutes, gb.seconds, gb.handicap][i], j, xoff + xsize * i, yoff + ysize * j, diam, number, true, reader, clicker));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  }

};

export var S960 = class S960 extends State {
  constructor(name) {
    var click960, diam, gbn, i, k, key, len, number, random960, reader960, ref, x, xi, y, yi;
    super(name);
    reader960 = (bits, index) => {
      return bits.pattern[index];
    };
    click960 = (bitar, index) => {
      var gb;
      bitar.flipBit(index);
      gb = globals.bits;
      globals.settings.chess960 = chess960(gb.number960.nr);
      return this.controls.ok.visible = gb.number960.nr < 960;
    };
    random960 = function() {
      var nr;
      nr = _.random(0, 959);
      globals.bits.number960.setNr(nr);
      return globals.settings.chess960 = chess960(nr);
    };
    x = [100 / 4, 200 / 4, 300 / 4];
    y = [-5, 40, 52, 64, 76, 78, 90, 95];
    diam = 10;
    this.controls.C960 = new C960(50, y[0], 100, 10);
    this.controls.CNumber = new CNumber(50, 25, () => {
      return globals.bits.number960.nr;
    });
    gbn = globals.bits.number960;
    ref = range(gbn.lst.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      number = gbn.lst[i];
      key = 'R' + number;
      xi = [0, 0, 0, 0, 1, 1, 1, 2, 2, 2][i];
      yi = [1, 2, 3, 4, 1, 2, 3, 1, 2, 3][i];
      this.controls[key] = new CAdv(gbn, i, x[xi], y[yi], diam, number, true, reader960, click960);
    }
    this.controls.random = new CRounded((x[1] + x[2]) / 2, y[4], 18, 6, 'random', false, 'white', 'black', random960);
    this.controls.basic = new CRounded(10, y[7], 18, 6, 'basic', false, 'white', 'black', () => {
      return globals.currState = globals.states.SBasic;
    });
    this.controls.adv = new CRounded(30, y[7], 18, 6, 'adv', false, 'white', 'black', () => {
      return globals.currState = globals.states.SAdv;
    });
    this.controls.b960 = new CRounded(50, y[7], 18, 6, '960', true, 'white', 'black');
    this.controls.cancel = new CRounded(70, y[7], 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(90, y[7], 18, 6, 'ok', false, 'white', 'black', ok);
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\states.coffee