// Generated by CoffeeScript 2.5.1
var S960, SAdv, SBasic, SClock, State;

State = class State {
  constructor(name1) {
    this.name = name1;
    this.controls = {};
  }

  draw() {
    var key, results;
    results = [];
    for (key in this.controls) {
      results.push(this.controls[key].draw());
    }
    return results;
  }

  mouseClicked() {
    var control, key, results, x, y;
    console.log('State.mouseClicked');
    ({x, y} = getLocalCoords());
    results = [];
    for (key in this.controls) {
      control = this.controls[key];
      if (control.visible && !control.disabled && control.inside(x, y)) {
        if (control.click) {
          control.click();
        }
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  }

};

S960 = class S960 extends State {
  constructor(name) {
    var click960, diam, i, k, key, len, number, random960, reader960, ref, x, xi, y, yi;
    super(name);
    reader960 = (bits, index) => {
      return bits.pattern[index];
    };
    click960 = (bitar, index) => {
      bitar.flipBit(index);
      settings.chess960 = chess960(bits.number960.nr);
      return this.controls.ok.visible = bits.number960.nr < 960;
    };
    random960 = function() {
      var nr;
      nr = _.random(0, 959);
      bits.number960.setNr(nr);
      return settings.chess960 = chess960(nr);
    };
    x = [100 / 4, 200 / 4, 300 / 4];
    y = [-5, 40, 52, 64, 76, 78, 90, 95];
    diam = 10;
    this.controls.C960 = new C960(50, y[0], 100, 10);
    this.controls.CNumber = new CNumber(50, 25, () => {
      return bits.number960.nr;
    });
    ref = range(bits.number960.lst.length);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      number = bits.number960.lst[i];
      key = 'R' + number;
      xi = [0, 0, 0, 0, 1, 1, 1, 2, 2, 2][i];
      yi = [1, 2, 3, 4, 1, 2, 3, 1, 2, 3][i];
      this.controls[key] = new CAdv(bits.number960, i, x[xi], y[yi], diam, number, true, reader960, click960);
    }
    this.controls.random = new CRounded((x[1] + x[2]) / 2, y[4], 18, 6, 'random', false, 'white', 'black', random960);
    this.controls.basic = new CRounded(10, y[7], 18, 6, 'basic', false, 'white', 'black', () => {
      var currState;
      return currState = states.SBasic;
    });
    this.controls.adv = new CRounded(30, y[7], 18, 6, 'adv', false, 'white', 'black', () => {
      var currState;
      return currState = states.SAdv;
    });
    this.controls.b960 = new CRounded(50, y[7], 18, 6, '960', true, 'white', 'black');
    this.controls.cancel = new CRounded(70, y[7], 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(90, y[7], 18, 6, 'ok', false, 'white', 'black', ok);
  }

};

SAdv = class SAdv extends State {
  constructor(name) {
    var y;
    super(name);
    this.controls.orange = new CColor(50, 2.5, 'orange');
    this.controls.white = new CColor(50, 9.5, 'white');
    this.controls.green = new CColor(50, 16.5, 'green');
    this.controls.reflection = new CDead(25, 25, "reflection\nminutes");
    this.controls.bonus = new CDead(50, 25, "bonus\nseconds");
    this.controls.hcp = new CDead(75, 25, "handicap\ntertier");
    y = 95;
    this.controls.basic = new CRounded(1 * 100 / 10, y, 18, 6, 'basic', false, 'white', 'black', () => {
      var currState;
      return currState = states.SBasic;
    });
    this.controls.adv = new CRounded(3 * 100 / 10, y, 18, 6, 'adv', true, 'white', 'black');
    this.controls.b960 = new CRounded(5 * 100 / 10, y, 18, 6, '960', false, 'white', 'black', () => {
      var currState;
      return currState = states.S960;
    });
    this.controls.cancel = new CRounded(7 * 100 / 10, y, 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(9 * 100 / 10, y, 18, 6, 'ok', false, 'white', 'black', ok);
    this.makeEditButtons();
  }

  makeEditButtons() {
    var clicker, diam, i, j, k, len, letter, name, number, reader, ref, results, xoff, xsize, yoff, ysize;
    reader = (bitar, index) => {
      return bitar.pattern[index];
    };
    clicker = (bitar, index) => {
      bitar.flipBit(index);
      settings.info.orange = getOrange();
      settings.info.white = getWhite();
      settings.info.green = getGreen();
      return this.controls.ok.visible = bits.minutes.nr > 0 && bits.handicap.nr < 60;
    };
    ref = range(3);
    results = [];
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      letter = 'Mst'[i];
      xsize = 100 / 4;
      ysize = 100 / 12;
      xoff = xsize;
      yoff = 33 + 2;
      diam = 7;
      results.push((function() {
        var l, len1, ref1, results1;
        ref1 = range(7);
        results1 = [];
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          j = ref1[l];
          number = bits.minutes.lst[j];
          name = letter + number;
          if (i !== 2 || j !== 6) {
            results1.push(this.controls[name] = new CAdv([bits.minutes, bits.seconds, bits.handicap][i], j, xoff + xsize * i, yoff + ysize * j, diam, number, true, reader, clicker));
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  }

};

SBasic = class SBasic extends State {
  constructor(name) {
    var M, clicker, diam, i, k, l, len, len1, reader, ref, ref1, s, x, xi, xm, y, yi;
    super(name);
    reader = (bitar, text) => {
      return bitar.nr;
    };
    clicker = (bitar, text) => {
      bitar.nr = text;
      settings.info.orange = getOrange();
      settings.info.white = getWhite();
      settings.info.green = getGreen();
      return this.controls.ok.visible = bits.minutes.nr > 0 && bits.handicap.nr < 60;
    };
    x = [20, 45, 80];
    y = [32, 41, 50, 59, 68, 77, 86, 95];
    xm = (x[0] + x[1]) / 2;
    diam = 8;
    this.controls.orange = new CColor(50, 2.5, 'orange'); // ,getOrange
    this.controls.white = new CColor(50, 9.5, 'white'); // , getWhite
    this.controls.green = new CColor(50, 16.5, 'green'); // , getGreen
    this.controls.reflection = new CDead(xm, 23, "reflection\nminutes");
    this.controls.bonus = new CDead(x[2], 23, "bonus\nseconds");
    ref = range(11);
    for (k = 0, len = ref.length; k < len; k++) {
      i = ref[k];
      xi = [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1][i];
      yi = [0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5][i];
      M = [1, 2, 3, 5, 10, 15, 20, 30, 45, 60, 90][i];
      this.controls['M' + M] = new CAdv(bits.minutes, i, x[xi], y[yi], diam, M, false, reader, clicker);
    }
    ref1 = range(7);
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      i = ref1[l];
      s = [0, 1, 2, 3, 5, 10, 30][i];
      this.controls['s' + s] = new CAdv(bits.seconds, i, x[2], y[i], diam, s, false, reader, clicker);
    }
    this.controls.basic = new CRounded(1 * 100 / 10, y[7], 18, 6, 'basic', true, 'white', 'black');
    this.controls.adv = new CRounded(3 * 100 / 10, y[7], 18, 6, 'adv', false, 'white', 'black', () => {
      var currState;
      return currState = states.SAdv;
    });
    this.controls.b960 = new CRounded(5 * 100 / 10, y[7], 18, 6, '960', false, 'white', 'black', () => {
      var currState;
      return currState = states.S960;
    });
    this.controls.cancel = new CRounded(7 * 100 / 10, y[7], 18, 6, 'cancel', false, 'white', 'black', cancel);
    this.controls.ok = new CRounded(9 * 100 / 10, y[7], 18, 6, 'ok', false, 'white', 'black', ok);
  }

};

SClock = class SClock extends State {
  constructor(name) {
    var handleQR, pause, player0, player1;
    super(name);
    player0 = () => {
      if (settings.timeout) {

      } else {
        return this.handlePlayer(0);
      }
    };
    player1 = () => {
      if (settings.timeout) {

      } else {
        return this.handlePlayer(1);
      }
    };
    pause = () => {
      return settings.paused = true;
    };
    handleQR = () => {
      fullscreen(true);
      return resizeCanvas(innerWidth, innerHeight);
    };
    this.controls.left = new CRotate(50, 22, 100, 44, 180, 'black', 'white', 0, player0); // eg up
    this.controls.right = new CRotate(50, 78, 100, 44, 0, 'black', 'white', 1, player1); // eg down
    this.controls.pause = new CPause(67, 50, 17, 12, 'black', 'white', pause);
    this.controls.qr = new CImage(50, 50, 33, 12, qr, handleQR);
    this.controls.basic = new CCogwheel(83, 50, 17, 12, 'black', 'white', () => {
      var currState;
      console.log('SClock clicker');
      settings.backup();
      currState = states.SBasic;
      return console.log(currState);
    });
    this.controls.show = new CShow(22, 50, 'white');
  }

  handlePlayer(player) {
    if (settings.timeout) {
      return;
    }
    if (settings.paused) {
      sound.play();
    } else if (settings.player === -1) {
      sound.play();
    } else if (settings.player === player) {
      sound.play();
      settings.clocks[player] += settings.bonuses[player];
    }
    settings.paused = false;
    return settings.player = 1 - player;
  }

  indicator() {
    var a, andel, b;
    a = settings.clocks[0];
    b = settings.clocks[1];
    andel = 100 * a / (a + b);
    push();
    strokeWeight(1);
    stroke('white');
    line(1, andel, 10, andel);
    line(90, andel, 99, andel);
    return pop();
  }

  draw() {
    super.draw();
    return this.indicator();
  }

};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\2022-007-StateLab\coffee\states.coffee